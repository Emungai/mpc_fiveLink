/*
 * Automatically Generated from Mathematica.
 * Tue 3 Dec 2019 15:22:35 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1940;
  double t1060;
  double t1063;
  double t2058;
  double t3020;
  double t1059;
  double t1891;
  double t2162;
  double t2189;
  double t2214;
  double t3038;
  double t6359;
  double t6360;
  double t6361;
  double t6365;
  double t6424;
  double t6480;
  double t6481;
  double t6482;
  double t6491;
  double t6554;
  double t6546;
  double t6547;
  double t6555;
  double t6553;
  double t6562;
  double t6581;
  double t6582;
  double t6583;
  double t6589;
  double t6595;
  double t6596;
  double t6597;
  double t6606;
  double t6607;
  double t6608;
  double t6609;
  double t6610;
  double t6643;
  double t6644;
  double t6645;
  double t6640;
  double t6641;
  double t6642;
  double t6367;
  double t6368;
  double t6414;
  double t6647;
  double t6651;
  double t6658;
  double t6541;
  double t6532;
  double t6533;
  double t6534;
  double t6540;
  double t6542;
  double t6666;
  double t6672;
  double t6683;
  double t6684;
  double t6685;
  double t6680;
  double t6681;
  double t6682;
  double t6602;
  double t6603;
  double t6604;
  double t6690;
  double t6691;
  double t6692;
  double t6635;
  double t6624;
  double t6625;
  double t6626;
  double t6627;
  double t6636;
  double t6700;
  double t6708;
  double t6669;
  double t6670;
  double t6665;
  double t6667;
  double t6662;
  double t6663;
  double t6677;
  double t6678;
  double t6705;
  double t6706;
  double t6699;
  double t6703;
  double t6696;
  double t6697;
  double t6713;
  double t6714;
  double t6751;
  double t6752;
  double t6753;
  double t6755;
  double t6756;
  double t6757;
  double t6771;
  double t6772;
  double t6773;
  double t6775;
  double t6776;
  double t6777;
  double t6415;
  double t6529;
  double t6530;
  double t6531;
  double t6503;
  double t6504;
  double t6505;
  double t6509;
  double t6789;
  double t6790;
  double t6791;
  double t6792;
  double t6793;
  double t6646;
  double t6659;
  double t6660;
  double t6661;
  double t6671;
  double t6718;
  double t6719;
  double t6720;
  double t6721;
  double t6722;
  double t6723;
  double t6806;
  double t6807;
  double t6745;
  double t6746;
  double t6747;
  double t6748;
  double t6749;
  double t6750;
  double t6754;
  double t6758;
  double t6759;
  double t6761;
  double t6762;
  double t6763;
  double t6818;
  double t6819;
  double t6820;
  double t6794;
  double t6795;
  double t6796;
  double t6799;
  double t6800;
  double t6801;
  double t6802;
  double t6803;
  double t6804;
  double t6805;
  double t6808;
  double t6811;
  double t6812;
  double t6813;
  double t6814;
  double t6817;
  double t6822;
  double t6823;
  double t6827;
  double t6852;
  double t6853;
  double t6829;
  double t6855;
  double t6856;
  double t6831;
  double t6605;
  double t6621;
  double t6622;
  double t6623;
  double t6616;
  double t6617;
  double t6618;
  double t6619;
  double t6868;
  double t6869;
  double t6870;
  double t6871;
  double t6872;
  double t6686;
  double t6693;
  double t6694;
  double t6695;
  double t6707;
  double t6730;
  double t6731;
  double t6732;
  double t6733;
  double t6734;
  double t6735;
  double t6885;
  double t6886;
  double t6765;
  double t6766;
  double t6767;
  double t6768;
  double t6769;
  double t6770;
  double t6774;
  double t6778;
  double t6779;
  double t6781;
  double t6782;
  double t6783;
  double t6897;
  double t6898;
  double t6899;
  double t6873;
  double t6874;
  double t6875;
  double t6878;
  double t6879;
  double t6880;
  double t6881;
  double t6882;
  double t6883;
  double t6884;
  double t6887;
  double t6890;
  double t6891;
  double t6892;
  double t6893;
  double t6896;
  double t6901;
  double t6902;
  double t6906;
  double t6931;
  double t6932;
  double t6908;
  double t6934;
  double t6935;
  double t6910;
  double t6725;
  double t6727;
  double t6737;
  double t6739;
  double t6969;
  double t6970;
  double t6971;
  double t6972;
  double t6973;
  double t6974;
  double t6975;
  double t6976;
  double t6977;
  double t6978;
  double t6979;
  double t6980;
  double t6981;
  double t6982;
  double t6983;
  double t6984;
  double t6985;
  double t6987;
  double t6988;
  double t6989;
  double t6990;
  double t6991;
  double t6992;
  double t6993;
  double t6994;
  double t6948;
  double t6949;
  double t6950;
  double t6951;
  double t6954;
  double t6955;
  double t6956;
  double t6957;
  double t6797;
  double t6798;
  double t6809;
  double t6810;
  double t6815;
  double t6816;
  double t6821;
  double t6824;
  double t6825;
  double t6826;
  double t6828;
  double t6830;
  double t6832;
  double t6833;
  double t6834;
  double t6835;
  double t6836;
  double t6837;
  double t6675;
  double t7003;
  double t6961;
  double t7031;
  double t7032;
  double t7033;
  double t7004;
  double t6838;
  double t6839;
  double t6840;
  double t7005;
  double t7006;
  double t6842;
  double t6843;
  double t6844;
  double t7009;
  double t7010;
  double t7011;
  double t7012;
  double t7013;
  double t7014;
  double t7017;
  double t7018;
  double t7019;
  double t7020;
  double t7021;
  double t7022;
  double t7025;
  double t7026;
  double t6854;
  double t6857;
  double t6858;
  double t7030;
  double t7036;
  double t6860;
  double t6861;
  double t6862;
  double t7041;
  double t7064;
  double t7065;
  double t7045;
  double t6959;
  double t6960;
  double t7093;
  double t7094;
  double t7095;
  double t7096;
  double t7097;
  double t7099;
  double t7100;
  double t7101;
  double t7102;
  double t7103;
  double t7085;
  double t7086;
  double t7087;
  double t6841;
  double t6845;
  double t6846;
  double t6847;
  double t6848;
  double t6849;
  double t6850;
  double t6851;
  double t6859;
  double t6863;
  double t6864;
  double t6865;
  double t6866;
  double t6867;
  double t7052;
  double t7053;
  double t7054;
  double t7055;
  double t7056;
  double t7057;
  double t7058;
  double t7059;
  double t7060;
  double t7061;
  double t7062;
  double t7063;
  double t7066;
  double t7067;
  double t7068;
  double t7069;
  double t7070;
  double t7071;
  double t7072;
  double t7073;
  double t7074;
  double t7075;
  double t7076;
  double t7077;
  double t7078;
  double t7079;
  double t7080;
  double t7081;
  double t7082;
  double t7083;
  double t7084;
  double t7089;
  double t7090;
  double t7139;
  double t7141;
  double t7142;
  double t7143;
  double t7133;
  double t7134;
  double t7135;
  double t7109;
  double t6876;
  double t6877;
  double t6888;
  double t6889;
  double t6894;
  double t6895;
  double t6900;
  double t6903;
  double t6904;
  double t6905;
  double t6907;
  double t6909;
  double t6911;
  double t6912;
  double t6913;
  double t6914;
  double t6915;
  double t6916;
  double t6711;
  double t7149;
  double t6965;
  double t7177;
  double t7178;
  double t7179;
  double t7150;
  double t6917;
  double t6918;
  double t6919;
  double t7151;
  double t7152;
  double t6921;
  double t6922;
  double t6923;
  double t7155;
  double t7156;
  double t7157;
  double t7158;
  double t7159;
  double t7160;
  double t7163;
  double t7164;
  double t7165;
  double t7166;
  double t7167;
  double t7168;
  double t7171;
  double t7172;
  double t6933;
  double t6936;
  double t6937;
  double t7176;
  double t7182;
  double t6939;
  double t6940;
  double t6941;
  double t7187;
  double t7210;
  double t7211;
  double t7191;
  double t6963;
  double t6964;
  double t7239;
  double t7240;
  double t7241;
  double t7242;
  double t7243;
  double t7245;
  double t7246;
  double t7247;
  double t7248;
  double t7249;
  double t7231;
  double t7232;
  double t7233;
  double t6920;
  double t6924;
  double t6925;
  double t6926;
  double t6927;
  double t6928;
  double t6929;
  double t6930;
  double t6938;
  double t6942;
  double t6943;
  double t6944;
  double t6945;
  double t6946;
  double t7198;
  double t7199;
  double t7200;
  double t7201;
  double t7202;
  double t7203;
  double t7204;
  double t7205;
  double t7206;
  double t7207;
  double t7208;
  double t7209;
  double t7212;
  double t7213;
  double t7214;
  double t7215;
  double t7216;
  double t7217;
  double t7218;
  double t7219;
  double t7220;
  double t7221;
  double t7222;
  double t7223;
  double t7224;
  double t7225;
  double t7226;
  double t7227;
  double t7228;
  double t7229;
  double t7230;
  double t7235;
  double t7236;
  double t7285;
  double t7287;
  double t7288;
  double t7289;
  double t7279;
  double t7280;
  double t7281;
  double t7255;
  t1940 = Cos(var1[3]);
  t1060 = Cos(var1[4]);
  t1063 = Sin(var1[3]);
  t2058 = Sin(var1[4]);
  t3020 = Cos(var1[2]);
  t1059 = Sin(var1[2]);
  t1891 = -1.*t1060*t1063;
  t2162 = -1.*t1940*t2058;
  t2189 = t1891 + t2162;
  t2214 = -1.*t1059*t2189;
  t3038 = t1940*t1060;
  t6359 = -1.*t1063*t2058;
  t6360 = t3038 + t6359;
  t6361 = -1.*t3020*t6360;
  t6365 = t2214 + t6361;
  t6424 = -1.*t1060;
  t6480 = 1. + t6424;
  t6481 = 0.4*t6480;
  t6482 = 0.64*t1060;
  t6491 = t6481 + t6482;
  t6554 = Cos(var1[5]);
  t6546 = Cos(var1[6]);
  t6547 = Sin(var1[5]);
  t6555 = Sin(var1[6]);
  t6553 = -1.*t6546*t6547;
  t6562 = -1.*t6554*t6555;
  t6581 = t6553 + t6562;
  t6582 = -1.*t1059*t6581;
  t6583 = t6554*t6546;
  t6589 = -1.*t6547*t6555;
  t6595 = t6583 + t6589;
  t6596 = -1.*t3020*t6595;
  t6597 = t6582 + t6596;
  t6606 = -1.*t6546;
  t6607 = 1. + t6606;
  t6608 = 0.4*t6607;
  t6609 = 0.64*t6546;
  t6610 = t6608 + t6609;
  t6643 = t3020*t1940;
  t6644 = -1.*t1059*t1063;
  t6645 = t6643 + t6644;
  t6640 = -1.*t1940*t1059;
  t6641 = -1.*t3020*t1063;
  t6642 = t6640 + t6641;
  t6367 = -1.*t3020*t1940;
  t6368 = t1059*t1063;
  t6414 = t6367 + t6368;
  t6647 = t1940*t1059;
  t6651 = t3020*t1063;
  t6658 = t6647 + t6651;
  t6541 = -1.*t1059*t6360;
  t6532 = t1060*t1063;
  t6533 = t1940*t2058;
  t6534 = t6532 + t6533;
  t6540 = -1.*t3020*t6534;
  t6542 = t6540 + t6541;
  t6666 = t3020*t6360;
  t6672 = t1059*t6360;
  t6683 = t3020*t6554;
  t6684 = -1.*t1059*t6547;
  t6685 = t6683 + t6684;
  t6680 = -1.*t6554*t1059;
  t6681 = -1.*t3020*t6547;
  t6682 = t6680 + t6681;
  t6602 = -1.*t3020*t6554;
  t6603 = t1059*t6547;
  t6604 = t6602 + t6603;
  t6690 = t6554*t1059;
  t6691 = t3020*t6547;
  t6692 = t6690 + t6691;
  t6635 = -1.*t1059*t6595;
  t6624 = t6546*t6547;
  t6625 = t6554*t6555;
  t6626 = t6624 + t6625;
  t6627 = -1.*t3020*t6626;
  t6636 = t6627 + t6635;
  t6700 = t3020*t6595;
  t6708 = t1059*t6595;
  t6669 = t1059*t2189;
  t6670 = t6669 + t6666;
  t6665 = -1.*t1059*t6534;
  t6667 = t6665 + t6666;
  t6662 = t3020*t2189;
  t6663 = t6662 + t6541;
  t6677 = t3020*t6534;
  t6678 = t6677 + t6672;
  t6705 = t1059*t6581;
  t6706 = t6705 + t6700;
  t6699 = -1.*t1059*t6626;
  t6703 = t6699 + t6700;
  t6696 = t3020*t6581;
  t6697 = t6696 + t6635;
  t6713 = t3020*t6626;
  t6714 = t6713 + t6708;
  t6751 = t6491*t1063;
  t6752 = 0.24*t1940*t2058;
  t6753 = t6751 + t6752;
  t6755 = t1940*t6491;
  t6756 = -0.24*t1063*t2058;
  t6757 = t6755 + t6756;
  t6771 = t6610*t6547;
  t6772 = 0.24*t6554*t6555;
  t6773 = t6771 + t6772;
  t6775 = t6554*t6610;
  t6776 = -0.24*t6547*t6555;
  t6777 = t6775 + t6776;
  t6415 = -0.748*t6414;
  t6529 = t6491*t2058;
  t6530 = -0.24*t1060*t2058;
  t6531 = t6529 + t6530;
  t6503 = t6491*t1060;
  t6504 = Power(t2058,2);
  t6505 = 0.24*t6504;
  t6509 = t6503 + t6505;
  t6789 = -1.*t1940*t1060;
  t6790 = t1063*t2058;
  t6791 = t6789 + t6790;
  t6792 = t3020*t6791;
  t6793 = t2214 + t6792;
  t6646 = -20.4*t6642*t6645;
  t6659 = -6.8*t6658*t6645;
  t6660 = -20.4*t6642*t6414;
  t6661 = -6.8*t6658*t6414;
  t6671 = -1.*t3020*t2189;
  t6718 = Power(t6642,2);
  t6719 = -13.6*t6718;
  t6720 = -13.6*t6642*t6658;
  t6721 = Power(t6645,2);
  t6722 = -13.6*t6721;
  t6723 = -13.6*t6645*t6414;
  t6806 = t1059*t6791;
  t6807 = t6662 + t6806;
  t6745 = Power(t1940,2);
  t6746 = 0.11*t6745;
  t6747 = Power(t1063,2);
  t6748 = 0.11*t6747;
  t6749 = t6746 + t6748;
  t6750 = -6.8*t6414*t6749;
  t6754 = -1.*t6753*t6360;
  t6758 = -1.*t2189*t6757;
  t6759 = t6754 + t6758;
  t6761 = t6753*t6534;
  t6762 = t6360*t6757;
  t6763 = t6761 + t6762;
  t6818 = -1.*t6491*t1063;
  t6819 = -0.24*t1940*t2058;
  t6820 = t6818 + t6819;
  t6794 = 0.384*var2[4]*t6793;
  t6795 = -3.2*t6531*t6663;
  t6796 = -3.2*t6509*t6793;
  t6799 = -6.4*t6667*t6663;
  t6800 = -3.2*t6670*t6542;
  t6801 = -3.2*t6365*t6678;
  t6802 = -6.4*t6663*t6793;
  t6803 = -1.*t1059*t6791;
  t6804 = t6671 + t6803;
  t6805 = -3.2*t6670*t6804;
  t6808 = -3.2*t6365*t6807;
  t6811 = -6.4*t6670*t6667;
  t6812 = -6.4*t6663*t6678;
  t6813 = -6.4*t6670*t6793;
  t6814 = -6.4*t6663*t6807;
  t6817 = -3.2*t6663*t6759;
  t6822 = t6753*t6360;
  t6823 = t2189*t6757;
  t6827 = -3.2*t6763*t6793;
  t6852 = -0.24*t1060*t1063;
  t6853 = t6852 + t6819;
  t6829 = -1.*t2189*t6753;
  t6855 = 0.24*t1940*t1060;
  t6856 = t6855 + t6756;
  t6831 = -1.*t6757*t6791;
  t6605 = -0.748*t6604;
  t6621 = t6610*t6555;
  t6622 = -0.24*t6546*t6555;
  t6623 = t6621 + t6622;
  t6616 = t6610*t6546;
  t6617 = Power(t6555,2);
  t6618 = 0.24*t6617;
  t6619 = t6616 + t6618;
  t6868 = -1.*t6554*t6546;
  t6869 = t6547*t6555;
  t6870 = t6868 + t6869;
  t6871 = t3020*t6870;
  t6872 = t6582 + t6871;
  t6686 = -20.4*t6682*t6685;
  t6693 = -6.8*t6692*t6685;
  t6694 = -20.4*t6682*t6604;
  t6695 = -6.8*t6692*t6604;
  t6707 = -1.*t3020*t6581;
  t6730 = Power(t6682,2);
  t6731 = -13.6*t6730;
  t6732 = -13.6*t6682*t6692;
  t6733 = Power(t6685,2);
  t6734 = -13.6*t6733;
  t6735 = -13.6*t6685*t6604;
  t6885 = t1059*t6870;
  t6886 = t6696 + t6885;
  t6765 = Power(t6554,2);
  t6766 = 0.11*t6765;
  t6767 = Power(t6547,2);
  t6768 = 0.11*t6767;
  t6769 = t6766 + t6768;
  t6770 = -6.8*t6604*t6769;
  t6774 = -1.*t6773*t6595;
  t6778 = -1.*t6581*t6777;
  t6779 = t6774 + t6778;
  t6781 = t6773*t6626;
  t6782 = t6595*t6777;
  t6783 = t6781 + t6782;
  t6897 = -1.*t6610*t6547;
  t6898 = -0.24*t6554*t6555;
  t6899 = t6897 + t6898;
  t6873 = 0.384*var2[6]*t6872;
  t6874 = -3.2*t6623*t6697;
  t6875 = -3.2*t6619*t6872;
  t6878 = -6.4*t6703*t6697;
  t6879 = -3.2*t6706*t6636;
  t6880 = -3.2*t6597*t6714;
  t6881 = -6.4*t6697*t6872;
  t6882 = -1.*t1059*t6870;
  t6883 = t6707 + t6882;
  t6884 = -3.2*t6706*t6883;
  t6887 = -3.2*t6597*t6886;
  t6890 = -6.4*t6706*t6703;
  t6891 = -6.4*t6697*t6714;
  t6892 = -6.4*t6706*t6872;
  t6893 = -6.4*t6697*t6886;
  t6896 = -3.2*t6697*t6779;
  t6901 = t6773*t6595;
  t6902 = t6581*t6777;
  t6906 = -3.2*t6783*t6872;
  t6931 = -0.24*t6546*t6547;
  t6932 = t6931 + t6898;
  t6908 = -1.*t6581*t6773;
  t6934 = 0.24*t6554*t6546;
  t6935 = t6934 + t6776;
  t6910 = -1.*t6777*t6870;
  t6725 = Power(t6667,2);
  t6727 = Power(t6663,2);
  t6737 = Power(t6703,2);
  t6739 = Power(t6697,2);
  t6969 = -6.8*t6718;
  t6970 = -6.8*t6642*t6658;
  t6971 = -6.8*t6721;
  t6972 = -6.8*t6645*t6414;
  t6973 = -3.2*t6365*t6670;
  t6974 = -3.2*t6725;
  t6975 = -3.2*t6727;
  t6976 = -3.2*t6542*t6678;
  t6977 = -6.8*t6730;
  t6978 = -6.8*t6682*t6692;
  t6979 = -6.8*t6733;
  t6980 = -6.8*t6685*t6604;
  t6981 = -3.2*t6597*t6706;
  t6982 = -3.2*t6737;
  t6983 = -3.2*t6739;
  t6984 = -3.2*t6636*t6714;
  t6985 = t6969 + t6970 + t6971 + t6972 + t6973 + t6974 + t6975 + t6976 + t6977 + t6978 + t6979 + t6980 + t6981 + t6982 + t6983 + t6984;
  t6987 = 2.88*t1059;
  t6988 = -6.8*t6642*t6749;
  t6989 = -3.2*t6667*t6759;
  t6990 = -3.2*t6663*t6763;
  t6991 = -6.8*t6682*t6769;
  t6992 = -3.2*t6703*t6779;
  t6993 = -3.2*t6697*t6783;
  t6994 = t6987 + t6988 + t6989 + t6990 + t6991 + t6992 + t6993;
  t6948 = -0.748*t6642;
  t6949 = -3.2*t6531*t6667;
  t6950 = -3.2*t6509*t6663;
  t6951 = t6948 + t6949 + t6950;
  t6954 = -0.748*t6682;
  t6955 = -3.2*t6623*t6703;
  t6956 = -3.2*t6619*t6697;
  t6957 = t6954 + t6955 + t6956;
  t6797 = t6415 + t6795 + t6796;
  t6798 = -0.5*var2[3]*t6797;
  t6809 = t6646 + t6659 + t6660 + t6661 + t6799 + t6800 + t6801 + t6802 + t6805 + t6808;
  t6810 = -0.5*var2[1]*t6809;
  t6815 = t6719 + t6720 + t6722 + t6723 + t6811 + t6812 + t6813 + t6814;
  t6816 = -0.5*var2[0]*t6815;
  t6821 = t6820*t6360;
  t6824 = t6534*t6757;
  t6825 = t6821 + t6822 + t6823 + t6824;
  t6826 = -3.2*t6663*t6825;
  t6828 = -1.*t2189*t6820;
  t6830 = -1.*t6360*t6757;
  t6832 = t6828 + t6829 + t6830 + t6831;
  t6833 = -3.2*t6667*t6832;
  t6834 = t6750 + t6817 + t6826 + t6827 + t6833;
  t6835 = -0.5*var2[2]*t6834;
  t6836 = t6794 + t6798 + t6810 + t6816 + t6835;
  t6837 = var2[0]*t6836;
  t6675 = t1059*t6534;
  t7003 = t6675 + t6792;
  t6961 = -6.4*t6670*t6663;
  t7031 = -1.*t1940*t6491;
  t7032 = 0.24*t1063*t2058;
  t7033 = t7031 + t7032;
  t7004 = 0.384*var2[4]*t7003;
  t6838 = Power(t1060,2);
  t6839 = -0.24*t6838;
  t6840 = t6503 + t6839;
  t7005 = -3.2*t6509*t7003;
  t7006 = -3.2*t6531*t6807;
  t6842 = -1.*t6491*t2058;
  t6843 = 0.24*t1060*t2058;
  t6844 = t6842 + t6843;
  t7009 = -3.2*t6678*t6793;
  t7010 = -3.2*t6663*t7003;
  t7011 = t6677 + t6803;
  t7012 = -3.2*t6670*t7011;
  t7013 = -3.2*t6667*t6807;
  t7014 = -6.4*t6793*t6807;
  t7017 = Power(t6670,2);
  t7018 = -6.4*t7017;
  t7019 = -6.4*t6670*t7003;
  t7020 = -6.4*t6678*t6807;
  t7021 = Power(t6807,2);
  t7022 = -6.4*t7021;
  t7025 = -3.2*t6763*t7003;
  t7026 = -3.2*t6759*t6807;
  t6854 = t6853*t6360;
  t6857 = t6534*t6856;
  t6858 = t6854 + t6822 + t6823 + t6857;
  t7030 = -1.*t6534*t6757;
  t7036 = -1.*t6753*t6791;
  t6860 = -1.*t2189*t6853;
  t6861 = -1.*t6360*t6856;
  t6862 = t6860 + t6829 + t6861 + t6831;
  t7041 = t2189*t6753;
  t7064 = -0.24*t1940*t1060;
  t7065 = t7064 + t7032;
  t7045 = t6757*t6791;
  t6959 = -13.6*t6642*t6645;
  t6960 = -13.6*t6658*t6645;
  t7093 = -3.2*t6670*t6667;
  t7094 = -3.2*t6663*t6678;
  t7095 = -3.2*t6670*t6793;
  t7096 = -3.2*t6663*t6807;
  t7097 = t6969 + t6970 + t6971 + t6972 + t7093 + t7094 + t7095 + t7096;
  t7099 = -3.2*t6670*t6759;
  t7100 = -3.2*t6670*t6825;
  t7101 = -3.2*t6763*t6807;
  t7102 = -3.2*t6678*t6832;
  t7103 = t6988 + t7099 + t7100 + t7101 + t7102;
  t7085 = -3.2*t6531*t6670;
  t7086 = -3.2*t6509*t6807;
  t7087 = t6948 + t7085 + t7086;
  t6841 = -3.2*t6840*t6667;
  t6845 = -3.2*t6844*t6663;
  t6846 = t6841 + t6795 + t6845 + t6796;
  t6847 = -0.5*var2[3]*t6846;
  t6848 = t6799 + t6800 + t6801 + t6802 + t6805 + t6808;
  t6849 = -0.5*var2[1]*t6848;
  t6850 = t6811 + t6812 + t6813 + t6814;
  t6851 = -0.5*var2[0]*t6850;
  t6859 = -3.2*t6663*t6858;
  t6863 = -3.2*t6667*t6862;
  t6864 = t6817 + t6859 + t6827 + t6863;
  t6865 = -0.5*var2[2]*t6864;
  t6866 = t6794 + t6847 + t6849 + t6851 + t6865;
  t6867 = var2[0]*t6866;
  t7052 = -3.2*t6840*t6670;
  t7053 = -3.2*t6844*t6807;
  t7054 = t7052 + t7005 + t7006 + t7053;
  t7055 = -0.5*var2[3]*t7054;
  t7056 = t6961 + t7009 + t7010 + t7012 + t7013 + t7014;
  t7057 = -0.5*var2[1]*t7056;
  t7058 = t7018 + t7019 + t7020 + t7022;
  t7059 = -0.5*var2[0]*t7058;
  t7060 = -3.2*t6825*t6807;
  t7061 = -3.2*t6858*t6807;
  t7062 = -1.*t6853*t6360;
  t7063 = -1.*t2189*t6856;
  t7066 = -1.*t2189*t7065;
  t7067 = -1.*t6820*t6791;
  t7068 = -1.*t6853*t6791;
  t7069 = t7062 + t6758 + t7030 + t7063 + t7066 + t7067 + t7068 + t7036;
  t7070 = -3.2*t6678*t7069;
  t7071 = -3.2*t6670*t6832;
  t7072 = -3.2*t6670*t6862;
  t7073 = t2189*t6820;
  t7074 = t2189*t6853;
  t7075 = t6853*t6534;
  t7076 = t6360*t6856;
  t7077 = t6360*t7065;
  t7078 = t7073 + t7074 + t7041 + t7075 + t6762 + t7076 + t7077 + t7045;
  t7079 = -3.2*t6670*t7078;
  t7080 = t7025 + t7026 + t7060 + t7061 + t7070 + t7071 + t7072 + t7079;
  t7081 = -0.5*var2[2]*t7080;
  t7082 = t7004 + t7055 + t7057 + t7059 + t7081;
  t7083 = var2[0]*t7082;
  t7084 = 0.384*var2[4]*t6807;
  t7089 = -6.4*t6670*t6678;
  t7090 = -6.4*t6670*t6807;
  t7139 = t7093 + t7094 + t7095 + t7096;
  t7141 = -3.2*t6670*t6858;
  t7142 = -3.2*t6678*t6862;
  t7143 = t7099 + t7141 + t7101 + t7142;
  t7133 = -3.2*t6844*t6670;
  t7134 = -3.2*t6840*t6678;
  t7135 = t7085 + t7133 + t7134 + t7086;
  t7109 = 0.384*var2[0]*t6807;
  t6876 = t6605 + t6874 + t6875;
  t6877 = -0.5*var2[5]*t6876;
  t6888 = t6686 + t6693 + t6694 + t6695 + t6878 + t6879 + t6880 + t6881 + t6884 + t6887;
  t6889 = -0.5*var2[1]*t6888;
  t6894 = t6731 + t6732 + t6734 + t6735 + t6890 + t6891 + t6892 + t6893;
  t6895 = -0.5*var2[0]*t6894;
  t6900 = t6899*t6595;
  t6903 = t6626*t6777;
  t6904 = t6900 + t6901 + t6902 + t6903;
  t6905 = -3.2*t6697*t6904;
  t6907 = -1.*t6581*t6899;
  t6909 = -1.*t6595*t6777;
  t6911 = t6907 + t6908 + t6909 + t6910;
  t6912 = -3.2*t6703*t6911;
  t6913 = t6770 + t6896 + t6905 + t6906 + t6912;
  t6914 = -0.5*var2[2]*t6913;
  t6915 = t6873 + t6877 + t6889 + t6895 + t6914;
  t6916 = var2[0]*t6915;
  t6711 = t1059*t6626;
  t7149 = t6711 + t6871;
  t6965 = -6.4*t6706*t6697;
  t7177 = -1.*t6554*t6610;
  t7178 = 0.24*t6547*t6555;
  t7179 = t7177 + t7178;
  t7150 = 0.384*var2[6]*t7149;
  t6917 = Power(t6546,2);
  t6918 = -0.24*t6917;
  t6919 = t6616 + t6918;
  t7151 = -3.2*t6619*t7149;
  t7152 = -3.2*t6623*t6886;
  t6921 = -1.*t6610*t6555;
  t6922 = 0.24*t6546*t6555;
  t6923 = t6921 + t6922;
  t7155 = -3.2*t6714*t6872;
  t7156 = -3.2*t6697*t7149;
  t7157 = t6713 + t6882;
  t7158 = -3.2*t6706*t7157;
  t7159 = -3.2*t6703*t6886;
  t7160 = -6.4*t6872*t6886;
  t7163 = Power(t6706,2);
  t7164 = -6.4*t7163;
  t7165 = -6.4*t6706*t7149;
  t7166 = -6.4*t6714*t6886;
  t7167 = Power(t6886,2);
  t7168 = -6.4*t7167;
  t7171 = -3.2*t6783*t7149;
  t7172 = -3.2*t6779*t6886;
  t6933 = t6932*t6595;
  t6936 = t6626*t6935;
  t6937 = t6933 + t6901 + t6902 + t6936;
  t7176 = -1.*t6626*t6777;
  t7182 = -1.*t6773*t6870;
  t6939 = -1.*t6581*t6932;
  t6940 = -1.*t6595*t6935;
  t6941 = t6939 + t6908 + t6940 + t6910;
  t7187 = t6581*t6773;
  t7210 = -0.24*t6554*t6546;
  t7211 = t7210 + t7178;
  t7191 = t6777*t6870;
  t6963 = -13.6*t6682*t6685;
  t6964 = -13.6*t6692*t6685;
  t7239 = -3.2*t6706*t6703;
  t7240 = -3.2*t6697*t6714;
  t7241 = -3.2*t6706*t6872;
  t7242 = -3.2*t6697*t6886;
  t7243 = t6977 + t6978 + t6979 + t6980 + t7239 + t7240 + t7241 + t7242;
  t7245 = -3.2*t6706*t6779;
  t7246 = -3.2*t6706*t6904;
  t7247 = -3.2*t6783*t6886;
  t7248 = -3.2*t6714*t6911;
  t7249 = t6991 + t7245 + t7246 + t7247 + t7248;
  t7231 = -3.2*t6623*t6706;
  t7232 = -3.2*t6619*t6886;
  t7233 = t6954 + t7231 + t7232;
  t6920 = -3.2*t6919*t6703;
  t6924 = -3.2*t6923*t6697;
  t6925 = t6920 + t6874 + t6924 + t6875;
  t6926 = -0.5*var2[5]*t6925;
  t6927 = t6878 + t6879 + t6880 + t6881 + t6884 + t6887;
  t6928 = -0.5*var2[1]*t6927;
  t6929 = t6890 + t6891 + t6892 + t6893;
  t6930 = -0.5*var2[0]*t6929;
  t6938 = -3.2*t6697*t6937;
  t6942 = -3.2*t6703*t6941;
  t6943 = t6896 + t6938 + t6906 + t6942;
  t6944 = -0.5*var2[2]*t6943;
  t6945 = t6873 + t6926 + t6928 + t6930 + t6944;
  t6946 = var2[0]*t6945;
  t7198 = -3.2*t6919*t6706;
  t7199 = -3.2*t6923*t6886;
  t7200 = t7198 + t7151 + t7152 + t7199;
  t7201 = -0.5*var2[5]*t7200;
  t7202 = t6965 + t7155 + t7156 + t7158 + t7159 + t7160;
  t7203 = -0.5*var2[1]*t7202;
  t7204 = t7164 + t7165 + t7166 + t7168;
  t7205 = -0.5*var2[0]*t7204;
  t7206 = -3.2*t6904*t6886;
  t7207 = -3.2*t6937*t6886;
  t7208 = -1.*t6932*t6595;
  t7209 = -1.*t6581*t6935;
  t7212 = -1.*t6581*t7211;
  t7213 = -1.*t6899*t6870;
  t7214 = -1.*t6932*t6870;
  t7215 = t7208 + t6778 + t7176 + t7209 + t7212 + t7213 + t7214 + t7182;
  t7216 = -3.2*t6714*t7215;
  t7217 = -3.2*t6706*t6911;
  t7218 = -3.2*t6706*t6941;
  t7219 = t6581*t6899;
  t7220 = t6581*t6932;
  t7221 = t6932*t6626;
  t7222 = t6595*t6935;
  t7223 = t6595*t7211;
  t7224 = t7219 + t7220 + t7187 + t7221 + t6782 + t7222 + t7223 + t7191;
  t7225 = -3.2*t6706*t7224;
  t7226 = t7171 + t7172 + t7206 + t7207 + t7216 + t7217 + t7218 + t7225;
  t7227 = -0.5*var2[2]*t7226;
  t7228 = t7150 + t7201 + t7203 + t7205 + t7227;
  t7229 = var2[0]*t7228;
  t7230 = 0.384*var2[6]*t6886;
  t7235 = -6.4*t6706*t6714;
  t7236 = -6.4*t6706*t6886;
  t7285 = t7239 + t7240 + t7241 + t7242;
  t7287 = -3.2*t6706*t6937;
  t7288 = -3.2*t6714*t6941;
  t7289 = t7245 + t7287 + t7247 + t7288;
  t7279 = -3.2*t6923*t6706;
  t7280 = -3.2*t6919*t6714;
  t7281 = t7231 + t7279 + t7280 + t7232;
  t7255 = 0.384*var2[0]*t6886;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t6365*t6670 - 6.4*t6542*t6678 - 6.4*t6597*t6706 - 6.4*t6636*t6714 + t6719 + t6720 + t6722 + t6723 - 6.4*t6725 - 6.4*t6727 + t6731 + t6732 + t6734 + t6735 - 6.4*t6737 - 6.4*t6739)*var2[0] - 0.5*(t6646 + t6659 + t6660 + t6661 - 9.6*t6365*t6663 - 9.6*t6542*t6667 - 3.2*t6670*(t6671 + t6672) - 3.2*(t6361 + t6675)*t6678 + t6686 + t6693 + t6694 + t6695 - 9.6*t6597*t6697 - 9.6*t6636*t6703 - 3.2*t6706*(t6707 + t6708) - 3.2*(t6596 + t6711)*t6714)*var2[1] - 0.5*(2.88*t3020 + t6750 - 3.2*t6542*t6759 - 3.2*t6365*t6763 + t6770 - 3.2*t6636*t6779 - 3.2*t6597*t6783)*var2[2] - 0.5*(t6415 - 3.2*t6365*t6509 - 3.2*t6531*t6542)*var2[3] + 0.384*t6365*var2[4] - 0.5*(t6605 - 3.2*t6597*t6619 - 3.2*t6623*t6636)*var2[5] + 0.384*t6597*var2[6]);
  p_output1[1]=t6837;
  p_output1[2]=t6867;
  p_output1[3]=t6916;
  p_output1[4]=t6946;
  p_output1[5]=-1.*(-6.4*t6667*t6678 - 6.4*t6703*t6714 + t6959 + t6960 + t6961 + t6963 + t6964 + t6965)*var2[0] - 0.5*t6985*var2[1] - 0.5*t6994*var2[2] - 0.5*t6951*var2[3] + 0.384*t6663*var2[4] - 0.5*t6957*var2[5] + 0.384*t6697*var2[6];
  p_output1[6]=-0.5*t6985*var2[0];
  p_output1[7]=-0.5*t6994*var2[0];
  p_output1[8]=-0.5*t6951*var2[0];
  p_output1[9]=0.384*t6663*var2[0];
  p_output1[10]=-0.5*t6957*var2[0];
  p_output1[11]=0.384*t6697*var2[0];
  p_output1[12]=t6837;
  p_output1[13]=var2[0]*(t7004 - 0.5*(t6719 + t6720 + t6722 + t6723 + t7018 + t7019 + t7020 + t7022)*var2[0] - 0.5*(t6646 + t6659 + t6660 + t6661 + t6961 + t7009 + t7010 + t7012 + t7013 + t7014)*var2[1] - 0.5*(t6750 - 6.4*t6807*t6825 - 6.4*t6670*t6832 + t7025 + t7026 - 3.2*t6678*(-2.*t2189*t6757 - 1.*t6360*t6820 - 2.*t6791*t6820 + t7030 - 1.*t2189*t7033 + t7036) - 3.2*t6670*(2.*t6360*t6757 + 2.*t2189*t6820 + t6534*t6820 + t6360*t7033 + t7041 + t7045))*var2[2] - 0.5*(t6415 + t7005 + t7006)*var2[3]);
  p_output1[14]=t7083;
  p_output1[15]=t7084 - 1.*(t6959 + t6960 + t7089 + t7090)*var2[0] - 0.5*t7097*var2[1] - 0.5*t7103*var2[2] - 0.5*t7087*var2[3];
  p_output1[16]=-0.5*t7097*var2[0];
  p_output1[17]=-0.5*t7103*var2[0];
  p_output1[18]=-0.5*t7087*var2[0];
  p_output1[19]=t7109;
  p_output1[20]=t6867;
  p_output1[21]=t7083;
  p_output1[22]=var2[0]*(t7004 + t7057 + t7059 - 0.5*(-6.4*t6807*t6858 - 6.4*t6670*t6862 + t7025 + t7026 - 3.2*t6678*(-2.*t6791*t6853 - 2.*t2189*t6856 + t7030 + t7036 + t7062 + t7066) - 3.2*t6670*(2.*t2189*t6853 + 2.*t6360*t6856 + t7041 + t7045 + t7075 + t7077))*var2[2] - 0.5*(-3.2*t6670*(-1.*t1060*t6491 + 0.24*t6838) - 6.4*t6670*t6840 - 3.2*t6678*t6844 - 6.4*t6807*t6844 + t7005 + t7006)*var2[3]);
  p_output1[23]=t7084 - 1.*(t7089 + t7090)*var2[0] - 0.5*t7139*var2[1] - 0.5*t7143*var2[2] - 0.5*t7135*var2[3];
  p_output1[24]=-0.5*t7139*var2[0];
  p_output1[25]=-0.5*t7143*var2[0];
  p_output1[26]=-0.5*t7135*var2[0];
  p_output1[27]=t7109;
  p_output1[28]=t6916;
  p_output1[29]=var2[0]*(t7150 - 0.5*(t6731 + t6732 + t6734 + t6735 + t7164 + t7165 + t7166 + t7168)*var2[0] - 0.5*(t6686 + t6693 + t6694 + t6695 + t6965 + t7155 + t7156 + t7158 + t7159 + t7160)*var2[1] - 0.5*(t6770 - 6.4*t6886*t6904 - 6.4*t6706*t6911 + t7171 + t7172 - 3.2*t6714*(-2.*t6581*t6777 - 1.*t6595*t6899 - 2.*t6870*t6899 + t7176 - 1.*t6581*t7179 + t7182) - 3.2*t6706*(2.*t6595*t6777 + 2.*t6581*t6899 + t6626*t6899 + t6595*t7179 + t7187 + t7191))*var2[2] - 0.5*(t6605 + t7151 + t7152)*var2[5]);
  p_output1[30]=t7229;
  p_output1[31]=t7230 - 1.*(t6963 + t6964 + t7235 + t7236)*var2[0] - 0.5*t7243*var2[1] - 0.5*t7249*var2[2] - 0.5*t7233*var2[5];
  p_output1[32]=-0.5*t7243*var2[0];
  p_output1[33]=-0.5*t7249*var2[0];
  p_output1[34]=-0.5*t7233*var2[0];
  p_output1[35]=t7255;
  p_output1[36]=t6946;
  p_output1[37]=t7229;
  p_output1[38]=var2[0]*(t7150 + t7203 + t7205 - 0.5*(-6.4*t6886*t6937 - 6.4*t6706*t6941 + t7171 + t7172 - 3.2*t6714*(-2.*t6870*t6932 - 2.*t6581*t6935 + t7176 + t7182 + t7208 + t7212) - 3.2*t6706*(2.*t6581*t6932 + 2.*t6595*t6935 + t7187 + t7191 + t7221 + t7223))*var2[2] - 0.5*(-3.2*t6706*(-1.*t6546*t6610 + 0.24*t6917) - 6.4*t6706*t6919 - 3.2*t6714*t6923 - 6.4*t6886*t6923 + t7151 + t7152)*var2[5]);
  p_output1[39]=t7230 - 1.*(t7235 + t7236)*var2[0] - 0.5*t7285*var2[1] - 0.5*t7289*var2[2] - 0.5*t7281*var2[5];
  p_output1[40]=-0.5*t7285*var2[0];
  p_output1[41]=-0.5*t7289*var2[0];
  p_output1[42]=-0.5*t7281*var2[0];
  p_output1[43]=t7255;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
