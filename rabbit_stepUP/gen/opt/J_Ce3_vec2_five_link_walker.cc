/*
 * Automatically Generated from Mathematica.
 * Tue 3 Dec 2019 15:22:38 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t1584;
  double t965;
  double t1066;
  double t1635;
  double t1705;
  double t25;
  double t1706;
  double t1711;
  double t1718;
  double t1732;
  double t1733;
  double t1734;
  double t1736;
  double t1737;
  double t1127;
  double t1697;
  double t1699;
  double t1700;
  double t1719;
  double t1720;
  double t1772;
  double t1767;
  double t1768;
  double t1774;
  double t1781;
  double t1782;
  double t1783;
  double t1792;
  double t1793;
  double t1795;
  double t1796;
  double t1798;
  double t1771;
  double t1775;
  double t1777;
  double t1778;
  double t1784;
  double t1785;
  double t2052;
  double t2053;
  double t2057;
  double t1726;
  double t1727;
  double t1729;
  double t2606;
  double t2607;
  double t2926;
  double t1746;
  double t1742;
  double t1743;
  double t1744;
  double t1745;
  double t1747;
  double t6638;
  double t6679;
  double t6698;
  double t6704;
  double t1787;
  double t1788;
  double t1789;
  double t6724;
  double t6726;
  double t6728;
  double t1819;
  double t1808;
  double t1809;
  double t1810;
  double t1818;
  double t1820;
  double t6785;
  double t2249;
  double t2298;
  double t2605;
  double t3221;
  double t6366;
  double t6673;
  double t6674;
  double t6544;
  double t6545;
  double t6599;
  double t6637;
  double t6639;
  double t6715;
  double t6716;
  double t6717;
  double t6740;
  double t6741;
  double t6947;
  double t6952;
  double t6744;
  double t6760;
  double t6764;
  double t6784;
  double t6786;
  double t7049;
  double t7050;
  double t7051;
  double t7091;
  double t7092;
  double t7098;
  double t7118;
  double t7119;
  double t7120;
  double t7122;
  double t7123;
  double t7124;
  double t1730;
  double t1738;
  double t1739;
  double t1741;
  double t1749;
  double t1751;
  double t1758;
  double t1760;
  double t7140;
  double t7144;
  double t7145;
  double t7146;
  double t7147;
  double t2158;
  double t2188;
  double t2201;
  double t2927;
  double t3083;
  double t3088;
  double t6966;
  double t6967;
  double t6968;
  double t6986;
  double t6997;
  double t6998;
  double t7000;
  double t7001;
  double t7173;
  double t7174;
  double t7042;
  double t7043;
  double t7044;
  double t7046;
  double t7047;
  double t7048;
  double t7088;
  double t7104;
  double t7105;
  double t7107;
  double t7108;
  double t7110;
  double t7197;
  double t7234;
  double t7237;
  double t7148;
  double t7153;
  double t7154;
  double t7169;
  double t7170;
  double t7175;
  double t7180;
  double t7184;
  double t7185;
  double t7186;
  double t7188;
  double t7189;
  double t7190;
  double t7192;
  double t7193;
  double t7196;
  double t7244;
  double t7250;
  double t7254;
  double t7283;
  double t7284;
  double t7257;
  double t7290;
  double t7291;
  double t7259;
  double t1791;
  double t1799;
  double t1801;
  double t1807;
  double t1827;
  double t1828;
  double t1829;
  double t1830;
  double t7303;
  double t7304;
  double t7305;
  double t7306;
  double t7307;
  double t6709;
  double t6710;
  double t6712;
  double t6729;
  double t6736;
  double t6738;
  double t7007;
  double t7008;
  double t7015;
  double t7016;
  double t7027;
  double t7028;
  double t7034;
  double t7035;
  double t7315;
  double t7316;
  double t7112;
  double t7113;
  double t7114;
  double t7115;
  double t7116;
  double t7117;
  double t7121;
  double t7125;
  double t7126;
  double t7128;
  double t7129;
  double t7130;
  double t7332;
  double t7333;
  double t7334;
  double t7308;
  double t7309;
  double t7310;
  double t7313;
  double t7314;
  double t7317;
  double t7318;
  double t7321;
  double t7322;
  double t7323;
  double t7324;
  double t7325;
  double t7326;
  double t7327;
  double t7328;
  double t7331;
  double t7336;
  double t7337;
  double t7341;
  double t7366;
  double t7367;
  double t7343;
  double t7369;
  double t7370;
  double t7345;
  double t7382;
  double t7383;
  double t7384;
  double t7385;
  double t7386;
  double t7387;
  double t7388;
  double t7389;
  double t7390;
  double t7391;
  double t7392;
  double t7393;
  double t7394;
  double t7395;
  double t7396;
  double t7397;
  double t7398;
  double t7399;
  double t7400;
  double t7401;
  double t7402;
  double t7403;
  double t7404;
  double t7429;
  double t7430;
  double t7431;
  double t7432;
  double t7433;
  double t7434;
  double t7435;
  double t7436;
  double t7407;
  double t7408;
  double t7409;
  double t7410;
  double t7413;
  double t7414;
  double t7415;
  double t7416;
  double t7161;
  double t7162;
  double t7181;
  double t7183;
  double t7194;
  double t7195;
  double t7238;
  double t7251;
  double t7252;
  double t7253;
  double t7256;
  double t7258;
  double t7260;
  double t7261;
  double t7262;
  double t7263;
  double t7264;
  double t7265;
  double t7444;
  double t7472;
  double t7473;
  double t7474;
  double t7445;
  double t7270;
  double t7271;
  double t7272;
  double t7446;
  double t7266;
  double t7267;
  double t7268;
  double t7447;
  double t7450;
  double t7451;
  double t7452;
  double t7453;
  double t7454;
  double t7457;
  double t7458;
  double t7459;
  double t7460;
  double t7461;
  double t7462;
  double t7463;
  double t7466;
  double t7286;
  double t7292;
  double t7293;
  double t7468;
  double t7471;
  double t7477;
  double t7295;
  double t7296;
  double t7297;
  double t7482;
  double t7505;
  double t7506;
  double t7486;
  double t7418;
  double t7419;
  double t7525;
  double t7526;
  double t7527;
  double t7528;
  double t7529;
  double t7539;
  double t7540;
  double t7541;
  double t7542;
  double t7543;
  double t7532;
  double t7533;
  double t7534;
  double t7269;
  double t7273;
  double t7274;
  double t7275;
  double t7276;
  double t7277;
  double t7278;
  double t7282;
  double t7294;
  double t7298;
  double t7299;
  double t7300;
  double t7301;
  double t7302;
  double t7493;
  double t7494;
  double t7495;
  double t7496;
  double t7497;
  double t7498;
  double t7499;
  double t7500;
  double t7501;
  double t7502;
  double t7503;
  double t7504;
  double t7507;
  double t7508;
  double t7509;
  double t7510;
  double t7511;
  double t7512;
  double t7513;
  double t7514;
  double t7515;
  double t7516;
  double t7517;
  double t7518;
  double t7519;
  double t7520;
  double t7521;
  double t7522;
  double t7523;
  double t7524;
  double t7531;
  double t7572;
  double t7581;
  double t7582;
  double t7583;
  double t7574;
  double t7575;
  double t7576;
  double t7548;
  double t7311;
  double t7312;
  double t7319;
  double t7320;
  double t7329;
  double t7330;
  double t7335;
  double t7338;
  double t7339;
  double t7340;
  double t7342;
  double t7344;
  double t7346;
  double t7347;
  double t7348;
  double t7349;
  double t7350;
  double t7351;
  double t7588;
  double t7616;
  double t7617;
  double t7618;
  double t7589;
  double t7356;
  double t7357;
  double t7358;
  double t7590;
  double t7352;
  double t7353;
  double t7354;
  double t7591;
  double t7594;
  double t7595;
  double t7596;
  double t7597;
  double t7598;
  double t7601;
  double t7602;
  double t7603;
  double t7604;
  double t7605;
  double t7606;
  double t7607;
  double t7610;
  double t7368;
  double t7371;
  double t7372;
  double t7612;
  double t7615;
  double t7621;
  double t7374;
  double t7375;
  double t7376;
  double t7626;
  double t7649;
  double t7650;
  double t7630;
  double t7422;
  double t7423;
  double t7669;
  double t7670;
  double t7671;
  double t7672;
  double t7673;
  double t7683;
  double t7684;
  double t7685;
  double t7686;
  double t7687;
  double t7676;
  double t7677;
  double t7678;
  double t7355;
  double t7359;
  double t7360;
  double t7361;
  double t7362;
  double t7363;
  double t7364;
  double t7365;
  double t7373;
  double t7377;
  double t7378;
  double t7379;
  double t7380;
  double t7381;
  double t7637;
  double t7638;
  double t7639;
  double t7640;
  double t7641;
  double t7642;
  double t7643;
  double t7644;
  double t7645;
  double t7646;
  double t7647;
  double t7648;
  double t7651;
  double t7652;
  double t7653;
  double t7654;
  double t7655;
  double t7656;
  double t7657;
  double t7658;
  double t7659;
  double t7660;
  double t7661;
  double t7662;
  double t7663;
  double t7664;
  double t7665;
  double t7666;
  double t7667;
  double t7668;
  double t7675;
  double t7716;
  double t7725;
  double t7726;
  double t7727;
  double t7718;
  double t7719;
  double t7720;
  double t7692;
  t1584 = Cos(var1[3]);
  t965 = Cos(var1[4]);
  t1066 = Sin(var1[3]);
  t1635 = Sin(var1[4]);
  t1705 = Sin(var1[2]);
  t25 = Cos(var1[2]);
  t1706 = t1584*t965;
  t1711 = -1.*t1066*t1635;
  t1718 = t1706 + t1711;
  t1732 = -1.*t965;
  t1733 = 1. + t1732;
  t1734 = 0.4*t1733;
  t1736 = 0.64*t965;
  t1737 = t1734 + t1736;
  t1127 = -1.*t965*t1066;
  t1697 = -1.*t1584*t1635;
  t1699 = t1127 + t1697;
  t1700 = -1.*t25*t1699;
  t1719 = t1705*t1718;
  t1720 = t1700 + t1719;
  t1772 = Cos(var1[5]);
  t1767 = Cos(var1[6]);
  t1768 = Sin(var1[5]);
  t1774 = Sin(var1[6]);
  t1781 = t1772*t1767;
  t1782 = -1.*t1768*t1774;
  t1783 = t1781 + t1782;
  t1792 = -1.*t1767;
  t1793 = 1. + t1792;
  t1795 = 0.4*t1793;
  t1796 = 0.64*t1767;
  t1798 = t1795 + t1796;
  t1771 = -1.*t1767*t1768;
  t1775 = -1.*t1772*t1774;
  t1777 = t1771 + t1775;
  t1778 = -1.*t25*t1777;
  t1784 = t1705*t1783;
  t1785 = t1778 + t1784;
  t2052 = -1.*t1584*t1705;
  t2053 = -1.*t25*t1066;
  t2057 = t2052 + t2053;
  t1726 = t1584*t1705;
  t1727 = t25*t1066;
  t1729 = t1726 + t1727;
  t2606 = -1.*t25*t1584;
  t2607 = t1705*t1066;
  t2926 = t2606 + t2607;
  t1746 = -1.*t25*t1718;
  t1742 = t965*t1066;
  t1743 = t1584*t1635;
  t1744 = t1742 + t1743;
  t1745 = t1705*t1744;
  t1747 = t1745 + t1746;
  t6638 = -1.*t1705*t1718;
  t6679 = -1.*t1772*t1705;
  t6698 = -1.*t25*t1768;
  t6704 = t6679 + t6698;
  t1787 = t1772*t1705;
  t1788 = t25*t1768;
  t1789 = t1787 + t1788;
  t6724 = -1.*t25*t1772;
  t6726 = t1705*t1768;
  t6728 = t6724 + t6726;
  t1819 = -1.*t25*t1783;
  t1808 = t1767*t1768;
  t1809 = t1772*t1774;
  t1810 = t1808 + t1809;
  t1818 = t1705*t1810;
  t1820 = t1818 + t1819;
  t6785 = -1.*t1705*t1783;
  t2249 = t25*t1584;
  t2298 = -1.*t1705*t1066;
  t2605 = t2249 + t2298;
  t3221 = -1.*t1705*t1699;
  t6366 = t3221 + t1746;
  t6673 = t25*t1699;
  t6674 = t6673 + t6638;
  t6544 = -1.*t1705*t1744;
  t6545 = t25*t1718;
  t6599 = t6544 + t6545;
  t6637 = -1.*t25*t1744;
  t6639 = t6637 + t6638;
  t6715 = t25*t1772;
  t6716 = -1.*t1705*t1768;
  t6717 = t6715 + t6716;
  t6740 = -1.*t1705*t1777;
  t6741 = t6740 + t1819;
  t6947 = t25*t1777;
  t6952 = t6947 + t6785;
  t6744 = -1.*t1705*t1810;
  t6760 = t25*t1783;
  t6764 = t6744 + t6760;
  t6784 = -1.*t25*t1810;
  t6786 = t6784 + t6785;
  t7049 = t1737*t1066;
  t7050 = 0.24*t1584*t1635;
  t7051 = t7049 + t7050;
  t7091 = t1584*t1737;
  t7092 = -0.24*t1066*t1635;
  t7098 = t7091 + t7092;
  t7118 = t1798*t1768;
  t7119 = 0.24*t1772*t1774;
  t7120 = t7118 + t7119;
  t7122 = t1772*t1798;
  t7123 = -0.24*t1768*t1774;
  t7124 = t7122 + t7123;
  t1730 = -0.748*t1729;
  t1738 = t1737*t1635;
  t1739 = -0.24*t965*t1635;
  t1741 = t1738 + t1739;
  t1749 = t1737*t965;
  t1751 = Power(t1635,2);
  t1758 = 0.24*t1751;
  t1760 = t1749 + t1758;
  t7140 = -1.*t1584*t965;
  t7144 = t1066*t1635;
  t7145 = t7140 + t7144;
  t7146 = -1.*t1705*t7145;
  t7147 = t1700 + t7146;
  t2158 = Power(t2057,2);
  t2188 = -13.6*t2158;
  t2201 = -13.6*t2057*t1729;
  t2927 = -13.6*t2605*t2926;
  t3083 = Power(t2926,2);
  t3088 = -13.6*t3083;
  t6966 = -20.4*t2057*t2605;
  t6967 = -6.8*t1729*t2605;
  t6968 = -20.4*t2057*t2926;
  t6986 = -6.8*t1729*t2926;
  t6997 = t1705*t1699;
  t6998 = t6997 + t6545;
  t7000 = t25*t1744;
  t7001 = t7000 + t1719;
  t7173 = t25*t7145;
  t7174 = t3221 + t7173;
  t7042 = Power(t1584,2);
  t7043 = 0.11*t7042;
  t7044 = Power(t1066,2);
  t7046 = 0.11*t7044;
  t7047 = t7043 + t7046;
  t7048 = -6.8*t1729*t7047;
  t7088 = -1.*t7051*t1718;
  t7104 = -1.*t1699*t7098;
  t7105 = t7088 + t7104;
  t7107 = t7051*t1744;
  t7108 = t1718*t7098;
  t7110 = t7107 + t7108;
  t7197 = -1.*t1737*t1066;
  t7234 = -0.24*t1584*t1635;
  t7237 = t7197 + t7234;
  t7148 = 0.384*var2[4]*t7147;
  t7153 = -3.2*t1741*t6366;
  t7154 = -3.2*t1760*t7147;
  t7169 = -6.4*t6366*t6599;
  t7170 = -6.4*t6674*t6639;
  t7175 = -6.4*t6366*t7174;
  t7180 = -6.4*t6674*t7147;
  t7184 = -6.4*t6599*t6674;
  t7185 = -3.2*t6998*t6639;
  t7186 = -3.2*t6366*t7001;
  t7188 = -6.4*t6674*t7174;
  t7189 = -3.2*t6998*t7147;
  t7190 = t1705*t7145;
  t7192 = t6673 + t7190;
  t7193 = -3.2*t6366*t7192;
  t7196 = -3.2*t6366*t7105;
  t7244 = t7051*t1718;
  t7250 = t1699*t7098;
  t7254 = -3.2*t7110*t7147;
  t7283 = -0.24*t965*t1066;
  t7284 = t7283 + t7234;
  t7257 = -1.*t1699*t7051;
  t7290 = 0.24*t1584*t965;
  t7291 = t7290 + t7092;
  t7259 = -1.*t7098*t7145;
  t1791 = -0.748*t1789;
  t1799 = t1798*t1774;
  t1801 = -0.24*t1767*t1774;
  t1807 = t1799 + t1801;
  t1827 = t1798*t1767;
  t1828 = Power(t1774,2);
  t1829 = 0.24*t1828;
  t1830 = t1827 + t1829;
  t7303 = -1.*t1772*t1767;
  t7304 = t1768*t1774;
  t7305 = t7303 + t7304;
  t7306 = -1.*t1705*t7305;
  t7307 = t1778 + t7306;
  t6709 = Power(t6704,2);
  t6710 = -13.6*t6709;
  t6712 = -13.6*t6704*t1789;
  t6729 = -13.6*t6717*t6728;
  t6736 = Power(t6728,2);
  t6738 = -13.6*t6736;
  t7007 = -20.4*t6704*t6717;
  t7008 = -6.8*t1789*t6717;
  t7015 = -20.4*t6704*t6728;
  t7016 = -6.8*t1789*t6728;
  t7027 = t1705*t1777;
  t7028 = t7027 + t6760;
  t7034 = t25*t1810;
  t7035 = t7034 + t1784;
  t7315 = t25*t7305;
  t7316 = t6740 + t7315;
  t7112 = Power(t1772,2);
  t7113 = 0.11*t7112;
  t7114 = Power(t1768,2);
  t7115 = 0.11*t7114;
  t7116 = t7113 + t7115;
  t7117 = -6.8*t1789*t7116;
  t7121 = -1.*t7120*t1783;
  t7125 = -1.*t1777*t7124;
  t7126 = t7121 + t7125;
  t7128 = t7120*t1810;
  t7129 = t1783*t7124;
  t7130 = t7128 + t7129;
  t7332 = -1.*t1798*t1768;
  t7333 = -0.24*t1772*t1774;
  t7334 = t7332 + t7333;
  t7308 = 0.384*var2[6]*t7307;
  t7309 = -3.2*t1807*t6741;
  t7310 = -3.2*t1830*t7307;
  t7313 = -6.4*t6741*t6764;
  t7314 = -6.4*t6952*t6786;
  t7317 = -6.4*t6741*t7316;
  t7318 = -6.4*t6952*t7307;
  t7321 = -6.4*t6764*t6952;
  t7322 = -3.2*t7028*t6786;
  t7323 = -3.2*t6741*t7035;
  t7324 = -6.4*t6952*t7316;
  t7325 = -3.2*t7028*t7307;
  t7326 = t1705*t7305;
  t7327 = t6947 + t7326;
  t7328 = -3.2*t6741*t7327;
  t7331 = -3.2*t6741*t7126;
  t7336 = t7120*t1783;
  t7337 = t1777*t7124;
  t7341 = -3.2*t7130*t7307;
  t7366 = -0.24*t1767*t1768;
  t7367 = t7366 + t7333;
  t7343 = -1.*t1777*t7120;
  t7369 = 0.24*t1772*t1767;
  t7370 = t7369 + t7123;
  t7345 = -1.*t7124*t7305;
  t7382 = -6.8*t2158;
  t7383 = -6.8*t2057*t1729;
  t7384 = Power(t2605,2);
  t7385 = -6.8*t7384;
  t7386 = -6.8*t2605*t2926;
  t7387 = -3.2*t6366*t6998;
  t7388 = Power(t6599,2);
  t7389 = -3.2*t7388;
  t7390 = Power(t6674,2);
  t7391 = -3.2*t7390;
  t7392 = -3.2*t6639*t7001;
  t7393 = -6.8*t6709;
  t7394 = -6.8*t6704*t1789;
  t7395 = Power(t6717,2);
  t7396 = -6.8*t7395;
  t7397 = -6.8*t6717*t6728;
  t7398 = -3.2*t6741*t7028;
  t7399 = Power(t6764,2);
  t7400 = -3.2*t7399;
  t7401 = Power(t6952,2);
  t7402 = -3.2*t7401;
  t7403 = -3.2*t6786*t7035;
  t7404 = t7382 + t7383 + t7385 + t7386 + t7387 + t7389 + t7391 + t7392 + t7393 + t7394 + t7396 + t7397 + t7398 + t7400 + t7402 + t7403;
  t7429 = 2.88*t25;
  t7430 = -6.8*t2926*t7047;
  t7431 = -3.2*t6639*t7105;
  t7432 = -3.2*t6366*t7110;
  t7433 = -6.8*t6728*t7116;
  t7434 = -3.2*t6786*t7126;
  t7435 = -3.2*t6741*t7130;
  t7436 = t7429 + t7430 + t7431 + t7432 + t7433 + t7434 + t7435;
  t7407 = -0.748*t2926;
  t7408 = -3.2*t1760*t6366;
  t7409 = -3.2*t1741*t6639;
  t7410 = t7407 + t7408 + t7409;
  t7413 = -0.748*t6728;
  t7414 = -3.2*t1830*t6741;
  t7415 = -3.2*t1807*t6786;
  t7416 = t7413 + t7414 + t7415;
  t7161 = t1730 + t7153 + t7154;
  t7162 = -0.5*var2[3]*t7161;
  t7181 = t2188 + t2201 + t2927 + t3088 + t7169 + t7170 + t7175 + t7180;
  t7183 = -0.5*var2[1]*t7181;
  t7194 = t6966 + t6967 + t6968 + t6986 + t7184 + t7185 + t7186 + t7188 + t7189 + t7193;
  t7195 = -0.5*var2[0]*t7194;
  t7238 = t7237*t1718;
  t7251 = t1744*t7098;
  t7252 = t7238 + t7244 + t7250 + t7251;
  t7253 = -3.2*t6366*t7252;
  t7256 = -1.*t1699*t7237;
  t7258 = -1.*t1718*t7098;
  t7260 = t7256 + t7257 + t7258 + t7259;
  t7261 = -3.2*t6639*t7260;
  t7262 = t7048 + t7196 + t7253 + t7254 + t7261;
  t7263 = -0.5*var2[2]*t7262;
  t7264 = t7148 + t7162 + t7183 + t7195 + t7263;
  t7265 = var2[1]*t7264;
  t7444 = t7000 + t7146;
  t7472 = -1.*t1584*t1737;
  t7473 = 0.24*t1066*t1635;
  t7474 = t7472 + t7473;
  t7445 = 0.384*var2[4]*t7444;
  t7270 = Power(t965,2);
  t7271 = -0.24*t7270;
  t7272 = t1749 + t7271;
  t7446 = -3.2*t1741*t7174;
  t7266 = -1.*t1737*t1635;
  t7267 = 0.24*t965*t1635;
  t7268 = t7266 + t7267;
  t7447 = -3.2*t1760*t7444;
  t7450 = -6.4*t7390;
  t7451 = -6.4*t6599*t7174;
  t7452 = Power(t7174,2);
  t7453 = -6.4*t7452;
  t7454 = -6.4*t6674*t7444;
  t7457 = -6.4*t6998*t6674;
  t7458 = -3.2*t7001*t7174;
  t7459 = t1745 + t7173;
  t7460 = -3.2*t6674*t7459;
  t7461 = -3.2*t6998*t7444;
  t7462 = -3.2*t6599*t7192;
  t7463 = -6.4*t7174*t7192;
  t7466 = -3.2*t7105*t7174;
  t7286 = t7284*t1718;
  t7292 = t1744*t7291;
  t7293 = t7286 + t7244 + t7250 + t7292;
  t7468 = -3.2*t7110*t7444;
  t7471 = -1.*t1744*t7098;
  t7477 = -1.*t7051*t7145;
  t7295 = -1.*t1699*t7284;
  t7296 = -1.*t1718*t7291;
  t7297 = t7295 + t7257 + t7296 + t7259;
  t7482 = t1699*t7051;
  t7505 = -0.24*t1584*t965;
  t7506 = t7505 + t7473;
  t7486 = t7098*t7145;
  t7418 = -13.6*t2057*t2605;
  t7419 = -13.6*t2057*t2926;
  t7525 = -3.2*t6998*t6599;
  t7526 = -3.2*t6674*t7001;
  t7527 = -3.2*t6998*t7174;
  t7528 = -3.2*t6674*t7192;
  t7529 = t7382 + t7383 + t7385 + t7386 + t7525 + t7526 + t7527 + t7528;
  t7539 = -3.2*t6674*t7105;
  t7540 = -3.2*t6674*t7252;
  t7541 = -3.2*t7110*t7174;
  t7542 = -3.2*t6599*t7260;
  t7543 = t7430 + t7539 + t7540 + t7541 + t7542;
  t7532 = -3.2*t1741*t6674;
  t7533 = -3.2*t1760*t7174;
  t7534 = t7407 + t7532 + t7533;
  t7269 = -3.2*t7268*t6366;
  t7273 = -3.2*t7272*t6639;
  t7274 = t7153 + t7269 + t7273 + t7154;
  t7275 = -0.5*var2[3]*t7274;
  t7276 = t7169 + t7170 + t7175 + t7180;
  t7277 = -0.5*var2[1]*t7276;
  t7278 = t7184 + t7185 + t7186 + t7188 + t7189 + t7193;
  t7282 = -0.5*var2[0]*t7278;
  t7294 = -3.2*t6366*t7293;
  t7298 = -3.2*t6639*t7297;
  t7299 = t7196 + t7294 + t7254 + t7298;
  t7300 = -0.5*var2[2]*t7299;
  t7301 = t7148 + t7275 + t7277 + t7282 + t7300;
  t7302 = var2[1]*t7301;
  t7493 = -3.2*t7272*t6674;
  t7494 = -3.2*t7268*t7174;
  t7495 = t7493 + t7446 + t7494 + t7447;
  t7496 = -0.5*var2[3]*t7495;
  t7497 = t7450 + t7451 + t7453 + t7454;
  t7498 = -0.5*var2[1]*t7497;
  t7499 = t7457 + t7458 + t7460 + t7461 + t7462 + t7463;
  t7500 = -0.5*var2[0]*t7499;
  t7501 = -3.2*t7252*t7174;
  t7502 = -3.2*t7293*t7174;
  t7503 = -1.*t7284*t1718;
  t7504 = -1.*t1699*t7291;
  t7507 = -1.*t1699*t7506;
  t7508 = -1.*t7237*t7145;
  t7509 = -1.*t7284*t7145;
  t7510 = t7503 + t7104 + t7471 + t7504 + t7507 + t7508 + t7509 + t7477;
  t7511 = -3.2*t6599*t7510;
  t7512 = -3.2*t6674*t7260;
  t7513 = -3.2*t6674*t7297;
  t7514 = t1699*t7237;
  t7515 = t1699*t7284;
  t7516 = t7284*t1744;
  t7517 = t1718*t7291;
  t7518 = t1718*t7506;
  t7519 = t7514 + t7515 + t7482 + t7516 + t7108 + t7517 + t7518 + t7486;
  t7520 = -3.2*t6674*t7519;
  t7521 = t7466 + t7501 + t7502 + t7468 + t7511 + t7512 + t7513 + t7520;
  t7522 = -0.5*var2[2]*t7521;
  t7523 = t7445 + t7496 + t7498 + t7500 + t7522;
  t7524 = var2[1]*t7523;
  t7531 = 0.384*var2[4]*t7174;
  t7572 = t7525 + t7526 + t7527 + t7528;
  t7581 = -3.2*t6674*t7293;
  t7582 = -3.2*t6599*t7297;
  t7583 = t7539 + t7581 + t7541 + t7582;
  t7574 = -3.2*t7272*t6599;
  t7575 = -3.2*t7268*t6674;
  t7576 = t7574 + t7532 + t7575 + t7533;
  t7548 = 0.384*var2[1]*t7174;
  t7311 = t1791 + t7309 + t7310;
  t7312 = -0.5*var2[5]*t7311;
  t7319 = t6710 + t6712 + t6729 + t6738 + t7313 + t7314 + t7317 + t7318;
  t7320 = -0.5*var2[1]*t7319;
  t7329 = t7007 + t7008 + t7015 + t7016 + t7321 + t7322 + t7323 + t7324 + t7325 + t7328;
  t7330 = -0.5*var2[0]*t7329;
  t7335 = t7334*t1783;
  t7338 = t1810*t7124;
  t7339 = t7335 + t7336 + t7337 + t7338;
  t7340 = -3.2*t6741*t7339;
  t7342 = -1.*t1777*t7334;
  t7344 = -1.*t1783*t7124;
  t7346 = t7342 + t7343 + t7344 + t7345;
  t7347 = -3.2*t6786*t7346;
  t7348 = t7117 + t7331 + t7340 + t7341 + t7347;
  t7349 = -0.5*var2[2]*t7348;
  t7350 = t7308 + t7312 + t7320 + t7330 + t7349;
  t7351 = var2[1]*t7350;
  t7588 = t7034 + t7306;
  t7616 = -1.*t1772*t1798;
  t7617 = 0.24*t1768*t1774;
  t7618 = t7616 + t7617;
  t7589 = 0.384*var2[6]*t7588;
  t7356 = Power(t1767,2);
  t7357 = -0.24*t7356;
  t7358 = t1827 + t7357;
  t7590 = -3.2*t1807*t7316;
  t7352 = -1.*t1798*t1774;
  t7353 = 0.24*t1767*t1774;
  t7354 = t7352 + t7353;
  t7591 = -3.2*t1830*t7588;
  t7594 = -6.4*t7401;
  t7595 = -6.4*t6764*t7316;
  t7596 = Power(t7316,2);
  t7597 = -6.4*t7596;
  t7598 = -6.4*t6952*t7588;
  t7601 = -6.4*t7028*t6952;
  t7602 = -3.2*t7035*t7316;
  t7603 = t1818 + t7315;
  t7604 = -3.2*t6952*t7603;
  t7605 = -3.2*t7028*t7588;
  t7606 = -3.2*t6764*t7327;
  t7607 = -6.4*t7316*t7327;
  t7610 = -3.2*t7126*t7316;
  t7368 = t7367*t1783;
  t7371 = t1810*t7370;
  t7372 = t7368 + t7336 + t7337 + t7371;
  t7612 = -3.2*t7130*t7588;
  t7615 = -1.*t1810*t7124;
  t7621 = -1.*t7120*t7305;
  t7374 = -1.*t1777*t7367;
  t7375 = -1.*t1783*t7370;
  t7376 = t7374 + t7343 + t7375 + t7345;
  t7626 = t1777*t7120;
  t7649 = -0.24*t1772*t1767;
  t7650 = t7649 + t7617;
  t7630 = t7124*t7305;
  t7422 = -13.6*t6704*t6717;
  t7423 = -13.6*t6704*t6728;
  t7669 = -3.2*t7028*t6764;
  t7670 = -3.2*t6952*t7035;
  t7671 = -3.2*t7028*t7316;
  t7672 = -3.2*t6952*t7327;
  t7673 = t7393 + t7394 + t7396 + t7397 + t7669 + t7670 + t7671 + t7672;
  t7683 = -3.2*t6952*t7126;
  t7684 = -3.2*t6952*t7339;
  t7685 = -3.2*t7130*t7316;
  t7686 = -3.2*t6764*t7346;
  t7687 = t7433 + t7683 + t7684 + t7685 + t7686;
  t7676 = -3.2*t1807*t6952;
  t7677 = -3.2*t1830*t7316;
  t7678 = t7413 + t7676 + t7677;
  t7355 = -3.2*t7354*t6741;
  t7359 = -3.2*t7358*t6786;
  t7360 = t7309 + t7355 + t7359 + t7310;
  t7361 = -0.5*var2[5]*t7360;
  t7362 = t7313 + t7314 + t7317 + t7318;
  t7363 = -0.5*var2[1]*t7362;
  t7364 = t7321 + t7322 + t7323 + t7324 + t7325 + t7328;
  t7365 = -0.5*var2[0]*t7364;
  t7373 = -3.2*t6741*t7372;
  t7377 = -3.2*t6786*t7376;
  t7378 = t7331 + t7373 + t7341 + t7377;
  t7379 = -0.5*var2[2]*t7378;
  t7380 = t7308 + t7361 + t7363 + t7365 + t7379;
  t7381 = var2[1]*t7380;
  t7637 = -3.2*t7358*t6952;
  t7638 = -3.2*t7354*t7316;
  t7639 = t7637 + t7590 + t7638 + t7591;
  t7640 = -0.5*var2[5]*t7639;
  t7641 = t7594 + t7595 + t7597 + t7598;
  t7642 = -0.5*var2[1]*t7641;
  t7643 = t7601 + t7602 + t7604 + t7605 + t7606 + t7607;
  t7644 = -0.5*var2[0]*t7643;
  t7645 = -3.2*t7339*t7316;
  t7646 = -3.2*t7372*t7316;
  t7647 = -1.*t7367*t1783;
  t7648 = -1.*t1777*t7370;
  t7651 = -1.*t1777*t7650;
  t7652 = -1.*t7334*t7305;
  t7653 = -1.*t7367*t7305;
  t7654 = t7647 + t7125 + t7615 + t7648 + t7651 + t7652 + t7653 + t7621;
  t7655 = -3.2*t6764*t7654;
  t7656 = -3.2*t6952*t7346;
  t7657 = -3.2*t6952*t7376;
  t7658 = t1777*t7334;
  t7659 = t1777*t7367;
  t7660 = t7367*t1810;
  t7661 = t1783*t7370;
  t7662 = t1783*t7650;
  t7663 = t7658 + t7659 + t7626 + t7660 + t7129 + t7661 + t7662 + t7630;
  t7664 = -3.2*t6952*t7663;
  t7665 = t7610 + t7645 + t7646 + t7612 + t7655 + t7656 + t7657 + t7664;
  t7666 = -0.5*var2[2]*t7665;
  t7667 = t7589 + t7640 + t7642 + t7644 + t7666;
  t7668 = var2[1]*t7667;
  t7675 = 0.384*var2[6]*t7316;
  t7716 = t7669 + t7670 + t7671 + t7672;
  t7725 = -3.2*t6952*t7372;
  t7726 = -3.2*t6764*t7376;
  t7727 = t7683 + t7725 + t7685 + t7726;
  t7718 = -3.2*t7358*t6764;
  t7719 = -3.2*t7354*t6952;
  t7720 = t7718 + t7676 + t7719 + t7677;
  t7692 = 0.384*var2[1]*t7316;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t6599*t6639 - 9.6*t6366*t6674 - 9.6*t6764*t6786 - 9.6*t6741*t6952 + t6966 + t6967 + t6968 + t6986 - 3.2*t1720*t6998 - 3.2*t1747*t7001 + t7007 + t7008 + t7015 + t7016 - 3.2*t1785*t7028 - 3.2*t1820*t7035)*var2[0] - 0.5*(t2188 + t2201 + t2927 + t3088 - 6.4*Power(t6366,2) - 6.4*t1747*t6599 - 6.4*Power(t6639,2) - 6.4*t1720*t6674 + t6710 + t6712 + t6729 + t6738 - 6.4*Power(t6741,2) - 6.4*t1820*t6764 - 6.4*Power(t6786,2) - 6.4*t1785*t6952)*var2[1] - 0.5*(-2.88*t1705 + t7048 - 3.2*t1747*t7105 - 3.2*t1720*t7110 + t7117 - 3.2*t1820*t7126 - 3.2*t1785*t7130)*var2[2] - 0.5*(t1730 - 3.2*t1741*t1747 - 3.2*t1720*t1760)*var2[3] + 0.384*t1720*var2[4] - 0.5*(t1791 - 3.2*t1807*t1820 - 3.2*t1785*t1830)*var2[5] + 0.384*t1785*var2[6]);
  p_output1[1]=t7265;
  p_output1[2]=t7302;
  p_output1[3]=t7351;
  p_output1[4]=t7381;
  p_output1[5]=-0.5*t7404*var2[1];
  p_output1[6]=-0.5*t7404*var2[0] - 1.*(-6.4*t6599*t6639 - 6.4*t6366*t6674 - 6.4*t6764*t6786 - 6.4*t6741*t6952 + t7418 + t7419 + t7422 + t7423)*var2[1] - 0.5*t7436*var2[2] - 0.5*t7410*var2[3] + 0.384*t6366*var2[4] - 0.5*t7416*var2[5] + 0.384*t6741*var2[6];
  p_output1[7]=-0.5*t7436*var2[1];
  p_output1[8]=-0.5*t7410*var2[1];
  p_output1[9]=0.384*t6366*var2[1];
  p_output1[10]=-0.5*t7416*var2[1];
  p_output1[11]=0.384*t6741*var2[1];
  p_output1[12]=t7265;
  p_output1[13]=var2[1]*(t7445 - 0.5*(t6966 + t6967 + t6968 + t6986 + t7457 + t7458 + t7460 + t7461 + t7462 + t7463)*var2[0] - 0.5*(t2188 + t2201 + t2927 + t3088 + t7450 + t7451 + t7453 + t7454)*var2[1] - 0.5*(t7048 - 6.4*t7174*t7252 - 6.4*t6674*t7260 + t7466 + t7468 - 3.2*t6599*(-2.*t1699*t7098 - 1.*t1718*t7237 - 2.*t7145*t7237 + t7471 - 1.*t1699*t7474 + t7477) - 3.2*t6674*(2.*t1718*t7098 + 2.*t1699*t7237 + t1744*t7237 + t1718*t7474 + t7482 + t7486))*var2[2] - 0.5*(t1730 + t7446 + t7447)*var2[3]);
  p_output1[14]=t7524;
  p_output1[15]=-0.5*t7529*var2[1];
  p_output1[16]=t7531 - 0.5*t7529*var2[0] - 1.*(t7184 + t7188 + t7418 + t7419)*var2[1] - 0.5*t7543*var2[2] - 0.5*t7534*var2[3];
  p_output1[17]=-0.5*t7543*var2[1];
  p_output1[18]=-0.5*t7534*var2[1];
  p_output1[19]=t7548;
  p_output1[20]=t7302;
  p_output1[21]=t7524;
  p_output1[22]=var2[1]*(t7445 + t7498 + t7500 - 0.5*(-6.4*t7174*t7293 - 6.4*t6674*t7297 + t7466 + t7468 - 3.2*t6599*(-2.*t7145*t7284 - 2.*t1699*t7291 + t7471 + t7477 + t7503 + t7507) - 3.2*t6674*(2.*t1699*t7284 + 2.*t1718*t7291 + t7482 + t7486 + t7516 + t7518))*var2[2] - 0.5*(-3.2*t6599*t7268 - 6.4*t7174*t7268 - 6.4*t6674*t7272 + t7446 + t7447 - 3.2*t6674*(0.24*t7270 - 1.*t1737*t965))*var2[3]);
  p_output1[23]=-0.5*t7572*var2[1];
  p_output1[24]=t7531 - 0.5*t7572*var2[0] - 1.*(t7184 + t7188)*var2[1] - 0.5*t7583*var2[2] - 0.5*t7576*var2[3];
  p_output1[25]=-0.5*t7583*var2[1];
  p_output1[26]=-0.5*t7576*var2[1];
  p_output1[27]=t7548;
  p_output1[28]=t7351;
  p_output1[29]=var2[1]*(t7589 - 0.5*(t7007 + t7008 + t7015 + t7016 + t7601 + t7602 + t7604 + t7605 + t7606 + t7607)*var2[0] - 0.5*(t6710 + t6712 + t6729 + t6738 + t7594 + t7595 + t7597 + t7598)*var2[1] - 0.5*(t7117 - 6.4*t7316*t7339 - 6.4*t6952*t7346 + t7610 + t7612 - 3.2*t6764*(-2.*t1777*t7124 - 1.*t1783*t7334 - 2.*t7305*t7334 + t7615 - 1.*t1777*t7618 + t7621) - 3.2*t6952*(2.*t1783*t7124 + 2.*t1777*t7334 + t1810*t7334 + t1783*t7618 + t7626 + t7630))*var2[2] - 0.5*(t1791 + t7590 + t7591)*var2[5]);
  p_output1[30]=t7668;
  p_output1[31]=-0.5*t7673*var2[1];
  p_output1[32]=t7675 - 0.5*t7673*var2[0] - 1.*(t7321 + t7324 + t7422 + t7423)*var2[1] - 0.5*t7687*var2[2] - 0.5*t7678*var2[5];
  p_output1[33]=-0.5*t7687*var2[1];
  p_output1[34]=-0.5*t7678*var2[1];
  p_output1[35]=t7692;
  p_output1[36]=t7381;
  p_output1[37]=t7668;
  p_output1[38]=var2[1]*(t7589 + t7642 + t7644 - 0.5*(-6.4*t7316*t7372 - 6.4*t6952*t7376 + t7610 + t7612 - 3.2*t6764*(-2.*t7305*t7367 - 2.*t1777*t7370 + t7615 + t7621 + t7647 + t7651) - 3.2*t6952*(2.*t1777*t7367 + 2.*t1783*t7370 + t7626 + t7630 + t7660 + t7662))*var2[2] - 0.5*(-3.2*t6764*t7354 - 6.4*t7316*t7354 - 3.2*t6952*(-1.*t1767*t1798 + 0.24*t7356) - 6.4*t6952*t7358 + t7590 + t7591)*var2[5]);
  p_output1[39]=-0.5*t7716*var2[1];
  p_output1[40]=t7675 - 0.5*t7716*var2[0] - 1.*(t7321 + t7324)*var2[1] - 0.5*t7727*var2[2] - 0.5*t7720*var2[5];
  p_output1[41]=-0.5*t7727*var2[1];
  p_output1[42]=-0.5*t7720*var2[1];
  p_output1[43]=t7692;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace RightStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
