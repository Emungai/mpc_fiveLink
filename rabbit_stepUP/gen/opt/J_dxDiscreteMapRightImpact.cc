/*
 * Automatically Generated from Mathematica.
 * Tue 3 Dec 2019 15:41:43 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t2010;
  double t6;
  double t2819;
  double t2989;
  double t3199;
  double t3227;
  double t3236;
  double t3237;
  double t3253;
  double t3292;
  double t3294;
  double t3341;
  double t3344;
  double t3358;
  double t3360;
  double t3363;
  double t3138;
  double t3141;
  double t3154;
  double t2912;
  double t3000;
  double t3002;
  double t3202;
  double t3228;
  double t3230;
  double t3234;
  double t3254;
  double t3255;
  double t3260;
  double t3261;
  double t3262;
  double t3263;
  double t3267;
  double t3276;
  double t3326;
  double t3330;
  double t3331;
  double t3293;
  double t3307;
  double t3308;
  double t3343;
  double t3345;
  double t3347;
  double t3348;
  double t3364;
  double t3365;
  double t3382;
  double t3384;
  double t3393;
  double t3394;
  double t3395;
  double t3397;
  double t3620;
  double t3621;
  double t3622;
  double t3623;
  double t3624;
  double t3625;
  double t3626;
  double t3627;
  double t3643;
  double t3644;
  double t3646;
  double t3754;
  double t3755;
  double t3756;
  double t3757;
  double t3760;
  double t3761;
  double t3766;
  double t3769;
  double t3771;
  double t3772;
  double t3773;
  double t3498;
  double t3499;
  double t3520;
  double t3426;
  double t3434;
  double t3435;
  double t3799;
  double t3800;
  double t3802;
  double t3545;
  double t3559;
  double t3793;
  double t3794;
  double t3796;
  double t3797;
  double t3575;
  double t3578;
  double t3580;
  double t3565;
  double t3566;
  double t3567;
  double t3852;
  double t3860;
  double t3861;
  double t3582;
  double t3586;
  double t3840;
  double t3842;
  double t3846;
  double t3850;
  double t3155;
  double t3333;
  double t3614;
  double t3615;
  double t3616;
  double t3617;
  double t3618;
  double t3628;
  double t3647;
  double t3650;
  double t3652;
  double t3653;
  double t3675;
  double t3689;
  double t3728;
  double t3734;
  double t3738;
  double t3739;
  double t3770;
  double t3774;
  double t3775;
  double t3777;
  double t3778;
  double t3779;
  double t3883;
  double t3885;
  double t3887;
  double t3894;
  double t3900;
  double t4025;
  double t4026;
  double t4027;
  double t4028;
  double t4029;
  double t3938;
  double t3939;
  double t3940;
  double t3941;
  double t3959;
  double t3962;
  double t3963;
  double t3964;
  double t3966;
  double t3967;
  double t3968;
  double t3969;
  double t3970;
  double t3971;
  double t3973;
  double t4009;
  double t4014;
  double t4016;
  double t4052;
  double t4053;
  double t4054;
  double t4030;
  double t4031;
  double t4032;
  double t4036;
  double t4037;
  double t4043;
  double t4044;
  double t4045;
  double t4046;
  double t4047;
  double t4048;
  double t4051;
  double t4056;
  double t4057;
  double t4063;
  double t4116;
  double t4117;
  double t4065;
  double t4119;
  double t4120;
  double t4069;
  double t3917;
  double t3918;
  double t3920;
  double t3922;
  double t3931;
  double t4168;
  double t4169;
  double t4170;
  double t4171;
  double t4172;
  double t3945;
  double t3947;
  double t3986;
  double t3987;
  double t3988;
  double t3989;
  double t3990;
  double t3991;
  double t3992;
  double t3994;
  double t3995;
  double t4019;
  double t4210;
  double t4211;
  double t4212;
  double t4173;
  double t4174;
  double t4175;
  double t4178;
  double t4179;
  double t4182;
  double t4183;
  double t4184;
  double t4185;
  double t4186;
  double t4187;
  double t4209;
  double t4215;
  double t4216;
  double t4221;
  double t4262;
  double t4264;
  double t4223;
  double t4266;
  double t4267;
  double t4225;
  double t319;
  double t2106;
  double t3007;
  double t3256;
  double t3288;
  double t3319;
  double t3379;
  double t3398;
  double t3440;
  double t3496;
  double t3525;
  double t3562;
  double t3572;
  double t3573;
  double t3581;
  double t3587;
  double t3609;
  double t1967;
  double t2282;
  double t3194;
  double t3977;
  double t3980;
  double t3340;
  double t4000;
  double t4002;
  double t3974;
  double t3975;
  double t3982;
  double t3984;
  double t3997;
  double t3998;
  double t4004;
  double t4005;
  double t3976;
  double t3979;
  double t3981;
  double t3985;
  double t3999;
  double t4001;
  double t4003;
  double t4006;
  double t4007;
  double t3610;
  double t5736;
  double t5887;
  double t4049;
  double t6800;
  double t4055;
  double t4058;
  double t4060;
  double t4064;
  double t4068;
  double t4070;
  double t6950;
  double t4106;
  double t4107;
  double t4108;
  double t6969;
  double t4102;
  double t4103;
  double t4104;
  double t6980;
  double t7017;
  double t7032;
  double t4114;
  double t7139;
  double t4118;
  double t4121;
  double t4143;
  double t7156;
  double t4148;
  double t4149;
  double t4150;
  double t5829;
  double t6730;
  double t4188;
  double t6826;
  double t4213;
  double t4217;
  double t4219;
  double t4222;
  double t4224;
  double t4227;
  double t8213;
  double t4245;
  double t4246;
  double t4248;
  double t8216;
  double t4233;
  double t4234;
  double t4235;
  double t8232;
  double t8238;
  double t8239;
  double t4260;
  double t8330;
  double t4265;
  double t4272;
  double t4273;
  double t8385;
  double t4277;
  double t4278;
  double t4295;
  double t4327;
  double t4328;
  double t4329;
  double t4331;
  double t4333;
  double t4334;
  double t4335;
  double t4336;
  double t4340;
  double t4302;
  double t4304;
  double t4015;
  double t4017;
  double t4018;
  double t4020;
  double t4021;
  double t4022;
  double t3901;
  double t3902;
  double t3903;
  double t3933;
  double t3934;
  double t3935;
  double t3619;
  double t3651;
  double t3687;
  double t3744;
  double t3776;
  double t3780;
  double t3785;
  double t4402;
  double t4403;
  double t4404;
  double t4405;
  double t4406;
  double t4412;
  double t5259;
  double t5262;
  double t6801;
  double t6810;
  double t6845;
  double t6875;
  double t6884;
  double t10082;
  double t10087;
  double t10089;
  double t10090;
  double t10092;
  double t10093;
  double t10094;
  double t10095;
  double t10096;
  double t10104;
  double t10110;
  double t10113;
  double t10114;
  double t10115;
  double t10121;
  double t10122;
  double t7143;
  double t7159;
  double t7160;
  double t4062;
  double t4071;
  double t4072;
  double t8179;
  double t8189;
  double t8202;
  double t4145;
  double t4151;
  double t4154;
  double t8337;
  double t8389;
  double t8393;
  double t4220;
  double t4228;
  double t4229;
  double t9776;
  double t9863;
  double t9868;
  double t4276;
  double t4296;
  double t4297;
  double t4341;
  double t4342;
  double t4344;
  double t4345;
  double t4347;
  double t4348;
  double t4349;
  double t4350;
  double t9885;
  double t9889;
  double t9904;
  double t9915;
  double t9921;
  double t9956;
  double t10162;
  double t3789;
  double t3798;
  double t3824;
  double t3825;
  double t5368;
  double t5416;
  double t5539;
  double t5542;
  double t9999;
  double t10019;
  double t10032;
  double t10049;
  double t5783;
  double t5784;
  double t5801;
  double t6989;
  double t4033;
  double t10133;
  double t10134;
  double t10138;
  double t10158;
  double t10163;
  double t10164;
  double t10168;
  double t10170;
  double t10172;
  double t10174;
  double t10176;
  double t10194;
  double t10195;
  double t10202;
  double t10203;
  double t10208;
  double t7204;
  double t7215;
  double t7224;
  double t4105;
  double t4109;
  double t4110;
  double t10209;
  double t10210;
  double t10211;
  double t10215;
  double t10216;
  double t4351;
  double t4352;
  double t4357;
  double t4358;
  double t10301;
  double t10305;
  double t10307;
  double t10309;
  double t10330;
  double t10334;
  double t10320;
  double t10321;
  double t10322;
  double t10323;
  double t10324;
  double t10325;
  double t10326;
  double t10327;
  double t10328;
  double t10329;
  double t3829;
  double t5641;
  double t10055;
  double t10056;
  double t10337;
  double t10340;
  double t10371;
  double t10372;
  double t4361;
  double t9877;
  double t10310;
  double t10313;
  double t10361;
  double t10362;
  double t10376;
  double t3839;
  double t3851;
  double t3862;
  double t3863;
  double t5652;
  double t5653;
  double t5658;
  double t5659;
  double t10057;
  double t10065;
  double t10069;
  double t10074;
  double t5841;
  double t5843;
  double t5845;
  double t8236;
  double t4176;
  double t10245;
  double t10246;
  double t10247;
  double t8463;
  double t8475;
  double t8487;
  double t4244;
  double t4249;
  double t4250;
  double t10260;
  double t10261;
  double t10262;
  double t10263;
  double t10269;
  double t4362;
  double t4363;
  double t4380;
  double t4381;
  double t10314;
  double t10315;
  double t10316;
  double t10317;
  double t10401;
  double t10403;
  double t3864;
  double t5668;
  double t10076;
  double t10081;
  double t10406;
  double t10407;
  double t10433;
  double t10434;
  double t4382;
  double t9884;
  double t10318;
  double t10319;
  double t10427;
  double t10428;
  t2010 = Sin(var2[2]);
  t6 = Cos(var2[2]);
  t2819 = Cos(var2[3]);
  t2989 = Sin(var2[3]);
  t3199 = Cos(var2[4]);
  t3227 = Sin(var2[4]);
  t3236 = t2819*t3199;
  t3237 = -1.*t2989*t3227;
  t3253 = t3236 + t3237;
  t3292 = Cos(var2[5]);
  t3294 = Sin(var2[5]);
  t3341 = Cos(var2[6]);
  t3344 = Sin(var2[6]);
  t3358 = t3292*t3341;
  t3360 = -1.*t3294*t3344;
  t3363 = t3358 + t3360;
  t3138 = t6*t2819;
  t3141 = -1.*t2010*t2989;
  t3154 = t3138 + t3141;
  t2912 = t2819*t2010;
  t3000 = t6*t2989;
  t3002 = t2912 + t3000;
  t3202 = -1.*t3199*t2989;
  t3228 = -1.*t2819*t3227;
  t3230 = t3202 + t3228;
  t3234 = t2010*t3230;
  t3254 = t6*t3253;
  t3255 = t3234 + t3254;
  t3260 = t3199*t2989;
  t3261 = t2819*t3227;
  t3262 = t3260 + t3261;
  t3263 = t6*t3262;
  t3267 = t2010*t3253;
  t3276 = t3263 + t3267;
  t3326 = t6*t3292;
  t3330 = -1.*t2010*t3294;
  t3331 = t3326 + t3330;
  t3293 = t3292*t2010;
  t3307 = t6*t3294;
  t3308 = t3293 + t3307;
  t3343 = -1.*t3341*t3294;
  t3345 = -1.*t3292*t3344;
  t3347 = t3343 + t3345;
  t3348 = t2010*t3347;
  t3364 = t6*t3363;
  t3365 = t3348 + t3364;
  t3382 = t3341*t3294;
  t3384 = t3292*t3344;
  t3393 = t3382 + t3384;
  t3394 = t6*t3393;
  t3395 = t2010*t3363;
  t3397 = t3394 + t3395;
  t3620 = -1.*t3199;
  t3621 = 1. + t3620;
  t3622 = 0.4*t3621;
  t3623 = 0.64*t3199;
  t3624 = t3622 + t3623;
  t3625 = t3624*t2989;
  t3626 = 0.24*t2819*t3227;
  t3627 = t3625 + t3626;
  t3643 = t2819*t3624;
  t3644 = -0.24*t2989*t3227;
  t3646 = t3643 + t3644;
  t3754 = -1.*t3341;
  t3755 = 1. + t3754;
  t3756 = 0.4*t3755;
  t3757 = 0.64*t3341;
  t3760 = t3756 + t3757;
  t3761 = t3760*t3294;
  t3766 = 0.24*t3292*t3344;
  t3769 = t3761 + t3766;
  t3771 = t3292*t3760;
  t3772 = -0.24*t3294*t3344;
  t3773 = t3771 + t3772;
  t3498 = t6*t3230;
  t3499 = -1.*t2010*t3253;
  t3520 = t3498 + t3499;
  t3426 = -1.*t2819*t2010;
  t3434 = -1.*t6*t2989;
  t3435 = t3426 + t3434;
  t3799 = t3624*t3227;
  t3800 = -0.24*t3199*t3227;
  t3802 = t3799 + t3800;
  t3545 = -1.*t2010*t3262;
  t3559 = t3545 + t3254;
  t3793 = t3624*t3199;
  t3794 = Power(t3227,2);
  t3796 = 0.24*t3794;
  t3797 = t3793 + t3796;
  t3575 = t6*t3347;
  t3578 = -1.*t2010*t3363;
  t3580 = t3575 + t3578;
  t3565 = -1.*t3292*t2010;
  t3566 = -1.*t6*t3294;
  t3567 = t3565 + t3566;
  t3852 = t3760*t3344;
  t3860 = -0.24*t3341*t3344;
  t3861 = t3852 + t3860;
  t3582 = -1.*t2010*t3393;
  t3586 = t3582 + t3364;
  t3840 = t3760*t3341;
  t3842 = Power(t3344,2);
  t3846 = 0.24*t3842;
  t3850 = t3840 + t3846;
  t3155 = Power(t3154,2);
  t3333 = Power(t3331,2);
  t3614 = Power(t2819,2);
  t3615 = 0.11*t3614;
  t3616 = Power(t2989,2);
  t3617 = 0.11*t3616;
  t3618 = t3615 + t3617;
  t3628 = -1.*t3627*t3253;
  t3647 = -1.*t3230*t3646;
  t3650 = t3628 + t3647;
  t3652 = t3627*t3262;
  t3653 = t3253*t3646;
  t3675 = t3652 + t3653;
  t3689 = Power(t3292,2);
  t3728 = 0.11*t3689;
  t3734 = Power(t3294,2);
  t3738 = 0.11*t3734;
  t3739 = t3728 + t3738;
  t3770 = -1.*t3769*t3363;
  t3774 = -1.*t3347*t3773;
  t3775 = t3770 + t3774;
  t3777 = t3769*t3393;
  t3778 = t3363*t3773;
  t3779 = t3777 + t3778;
  t3883 = -1.*var1[4];
  t3885 = var3[4] + t3883;
  t3887 = -1.*var1[3];
  t3894 = var3[3] + t3887;
  t3900 = 0.748*t3435;
  t4025 = -1.*t2819*t3199;
  t4026 = t2989*t3227;
  t4027 = t4025 + t4026;
  t4028 = t2010*t4027;
  t4029 = t3498 + t4028;
  t3938 = -1.*var1[0];
  t3939 = var3[0] + t3938;
  t3940 = 13.6*t3435*t3154;
  t3941 = 13.6*t3002*t3154;
  t3959 = -1.*var1[1];
  t3962 = var3[1] + t3959;
  t3963 = Power(t3435,2);
  t3964 = 6.8*t3963;
  t3966 = 6.8*t3435*t3002;
  t3967 = 6.8*t3155;
  t3968 = -1.*t6*t2819;
  t3969 = t2010*t2989;
  t3970 = t3968 + t3969;
  t3971 = 6.8*t3154*t3970;
  t3973 = -1.*t2010*t3230;
  t4009 = -1.*var1[2];
  t4014 = var3[2] + t4009;
  t4016 = 6.8*t3435*t3618;
  t4052 = -1.*t3624*t2989;
  t4053 = -0.24*t2819*t3227;
  t4054 = t4052 + t4053;
  t4030 = 0.768*t3885*t4029;
  t4031 = 3.2*t3802*t3255;
  t4032 = 3.2*t3797*t4029;
  t4036 = 6.4*t3255*t3276;
  t4037 = 6.4*t3255*t4029;
  t4043 = 3.2*t3255*t3559;
  t4044 = 3.2*t3520*t3276;
  t4045 = t6*t4027;
  t4046 = t3973 + t4045;
  t4047 = 3.2*t3255*t4046;
  t4048 = 3.2*t3520*t4029;
  t4051 = 3.2*t3255*t3650;
  t4056 = t3627*t3253;
  t4057 = t3230*t3646;
  t4063 = 3.2*t3675*t4029;
  t4116 = -0.24*t3199*t2989;
  t4117 = t4116 + t4053;
  t4065 = -1.*t3230*t3627;
  t4119 = 0.24*t2819*t3199;
  t4120 = t4119 + t3644;
  t4069 = -1.*t3646*t4027;
  t3917 = -1.*var1[6];
  t3918 = var3[6] + t3917;
  t3920 = -1.*var1[5];
  t3922 = var3[5] + t3920;
  t3931 = 0.748*t3567;
  t4168 = -1.*t3292*t3341;
  t4169 = t3294*t3344;
  t4170 = t4168 + t4169;
  t4171 = t2010*t4170;
  t4172 = t3575 + t4171;
  t3945 = 13.6*t3567*t3331;
  t3947 = 13.6*t3308*t3331;
  t3986 = Power(t3567,2);
  t3987 = 6.8*t3986;
  t3988 = 6.8*t3567*t3308;
  t3989 = 6.8*t3333;
  t3990 = -1.*t6*t3292;
  t3991 = t2010*t3294;
  t3992 = t3990 + t3991;
  t3994 = 6.8*t3331*t3992;
  t3995 = -1.*t2010*t3347;
  t4019 = 6.8*t3567*t3739;
  t4210 = -1.*t3760*t3294;
  t4211 = -0.24*t3292*t3344;
  t4212 = t4210 + t4211;
  t4173 = 0.768*t3918*t4172;
  t4174 = 3.2*t3861*t3365;
  t4175 = 3.2*t3850*t4172;
  t4178 = 6.4*t3365*t3397;
  t4179 = 6.4*t3365*t4172;
  t4182 = 3.2*t3365*t3586;
  t4183 = 3.2*t3580*t3397;
  t4184 = t6*t4170;
  t4185 = t3995 + t4184;
  t4186 = 3.2*t3365*t4185;
  t4187 = 3.2*t3580*t4172;
  t4209 = 3.2*t3365*t3775;
  t4215 = t3769*t3363;
  t4216 = t3347*t3773;
  t4221 = 3.2*t3779*t4172;
  t4262 = -0.24*t3341*t3294;
  t4264 = t4262 + t4211;
  t4223 = -1.*t3347*t3769;
  t4266 = 0.24*t3292*t3341;
  t4267 = t4266 + t3772;
  t4225 = -1.*t3773*t4170;
  t319 = Power(t6,2);
  t2106 = Power(t2010,2);
  t3007 = Power(t3002,2);
  t3256 = Power(t3255,2);
  t3288 = Power(t3276,2);
  t3319 = Power(t3308,2);
  t3379 = Power(t3365,2);
  t3398 = Power(t3397,2);
  t3440 = -6.8*t3435*t3154;
  t3496 = -6.8*t3002*t3154;
  t3525 = -3.2*t3255*t3520;
  t3562 = -3.2*t3559*t3276;
  t3572 = -6.8*t3567*t3331;
  t3573 = -6.8*t3308*t3331;
  t3581 = -3.2*t3365*t3580;
  t3587 = -3.2*t3586*t3397;
  t3609 = t3440 + t3496 + t3525 + t3562 + t3572 + t3573 + t3581 + t3587;
  t1967 = -12.*t319;
  t2282 = -12.*t2106;
  t3194 = -6.8*t3155;
  t3977 = Power(t3559,2);
  t3980 = Power(t3520,2);
  t3340 = -6.8*t3333;
  t4000 = Power(t3586,2);
  t4002 = Power(t3580,2);
  t3974 = -1.*t6*t3253;
  t3975 = t3973 + t3974;
  t3982 = -1.*t6*t3262;
  t3984 = t3982 + t3499;
  t3997 = -1.*t6*t3363;
  t3998 = t3995 + t3997;
  t4004 = -1.*t6*t3393;
  t4005 = t4004 + t3578;
  t3976 = 3.2*t3975*t3255;
  t3979 = 3.2*t3977;
  t3981 = 3.2*t3980;
  t3985 = 3.2*t3984*t3276;
  t3999 = 3.2*t3998*t3365;
  t4001 = 3.2*t4000;
  t4003 = 3.2*t4002;
  t4006 = 3.2*t4005*t3397;
  t4007 = t3964 + t3966 + t3967 + t3971 + t3976 + t3979 + t3981 + t3985 + t3987 + t3988 + t3989 + t3994 + t3999 + t4001 + t4003 + t4006;
  t3610 = -2.88*t6;
  t5736 = 0.748*t3970;
  t5887 = 13.6*t3435*t3970;
  t4049 = t3964 + t3966 + t3967 + t3971 + t4043 + t4044 + t4047 + t4048;
  t6800 = 6.8*t3970*t3618;
  t4055 = t4054*t3253;
  t4058 = t3262*t3646;
  t4060 = t4055 + t4056 + t4057 + t4058;
  t4064 = -1.*t3230*t4054;
  t4068 = -1.*t3253*t3646;
  t4070 = t4064 + t4065 + t4068 + t4069;
  t6950 = 0.768*t3885*t4046;
  t4106 = Power(t3199,2);
  t4107 = -0.24*t4106;
  t4108 = t3793 + t4107;
  t6969 = 3.2*t3802*t3520;
  t4102 = -1.*t3624*t3227;
  t4103 = 0.24*t3199*t3227;
  t4104 = t4102 + t4103;
  t6980 = 3.2*t3797*t4046;
  t7017 = 6.4*t3559*t3520;
  t7032 = 6.4*t3520*t4046;
  t4114 = t4043 + t4044 + t4047 + t4048;
  t7139 = 3.2*t3520*t3650;
  t4118 = t4117*t3253;
  t4121 = t3262*t4120;
  t4143 = t4118 + t4056 + t4057 + t4121;
  t7156 = 3.2*t3675*t4046;
  t4148 = -1.*t3230*t4117;
  t4149 = -1.*t3253*t4120;
  t4150 = t4148 + t4065 + t4149 + t4069;
  t5829 = 0.748*t3992;
  t6730 = 13.6*t3567*t3992;
  t4188 = t3987 + t3988 + t3989 + t3994 + t4182 + t4183 + t4186 + t4187;
  t6826 = 6.8*t3992*t3739;
  t4213 = t4212*t3363;
  t4217 = t3393*t3773;
  t4219 = t4213 + t4215 + t4216 + t4217;
  t4222 = -1.*t3347*t4212;
  t4224 = -1.*t3363*t3773;
  t4227 = t4222 + t4223 + t4224 + t4225;
  t8213 = 0.768*t3918*t4185;
  t4245 = Power(t3341,2);
  t4246 = -0.24*t4245;
  t4248 = t3840 + t4246;
  t8216 = 3.2*t3861*t3580;
  t4233 = -1.*t3760*t3344;
  t4234 = 0.24*t3341*t3344;
  t4235 = t4233 + t4234;
  t8232 = 3.2*t3850*t4185;
  t8238 = 6.4*t3586*t3580;
  t8239 = 6.4*t3580*t4185;
  t4260 = t4182 + t4183 + t4186 + t4187;
  t8330 = 3.2*t3580*t3775;
  t4265 = t4264*t3363;
  t4272 = t3393*t4267;
  t4273 = t4265 + t4215 + t4216 + t4272;
  t8385 = 3.2*t3779*t4185;
  t4277 = -1.*t3347*t4264;
  t4278 = -1.*t3363*t4267;
  t4295 = t4277 + t4223 + t4278 + t4225;
  t4327 = 6.8*t3435*t3154;
  t4328 = 6.8*t3002*t3154;
  t4329 = 3.2*t3255*t3520;
  t4331 = 3.2*t3559*t3276;
  t4333 = 6.8*t3567*t3331;
  t4334 = 6.8*t3308*t3331;
  t4335 = 3.2*t3365*t3580;
  t4336 = 3.2*t3586*t3397;
  t4340 = t4327 + t4328 + t4329 + t4331 + t4333 + t4334 + t4335 + t4336;
  t4302 = 12.*t319;
  t4304 = 12.*t2106;
  t4015 = -2.88*t2010;
  t4017 = 3.2*t3559*t3650;
  t4018 = 3.2*t3520*t3675;
  t4020 = 3.2*t3586*t3775;
  t4021 = 3.2*t3580*t3779;
  t4022 = t4015 + t4016 + t4017 + t4018 + t4019 + t4020 + t4021;
  t3901 = 3.2*t3802*t3559;
  t3902 = 3.2*t3797*t3520;
  t3903 = t3900 + t3901 + t3902;
  t3933 = 3.2*t3861*t3586;
  t3934 = 3.2*t3850*t3580;
  t3935 = t3931 + t3933 + t3934;
  t3619 = -6.8*t3154*t3618;
  t3651 = -3.2*t3276*t3650;
  t3687 = -3.2*t3255*t3675;
  t3744 = -6.8*t3331*t3739;
  t3776 = -3.2*t3397*t3775;
  t3780 = -3.2*t3365*t3779;
  t3785 = t3610 + t3619 + t3651 + t3687 + t3744 + t3776 + t3780;
  t4402 = 2.88*t2010;
  t4403 = -6.8*t3435*t3618;
  t4404 = -3.2*t3559*t3650;
  t4405 = -3.2*t3520*t3675;
  t4406 = -6.8*t3567*t3739;
  t4412 = -3.2*t3586*t3775;
  t5259 = -3.2*t3580*t3779;
  t5262 = t4402 + t4403 + t4404 + t4405 + t4406 + t4412 + t5259;
  t6801 = 3.2*t3984*t3650;
  t6810 = 3.2*t3975*t3675;
  t6845 = 3.2*t4005*t3775;
  t6875 = 3.2*t3998*t3779;
  t6884 = t3610 + t6800 + t6801 + t6810 + t6826 + t6845 + t6875;
  t10082 = 0.4*t3621*t3970;
  t10087 = -0.4*t3002*t3227;
  t10089 = t3199*t3970;
  t10090 = t3002*t3227;
  t10092 = t10089 + t10090;
  t10093 = 0.8*t10092;
  t10094 = t10082 + t10087 + t10093;
  t10095 = -1.*var4[2]*t10094;
  t10096 = 0.4*t3621*t3435;
  t10104 = -0.4*t3970*t3227;
  t10110 = t3199*t3435;
  t10113 = t3970*t3227;
  t10114 = t10110 + t10113;
  t10115 = 0.8*t10114;
  t10121 = t10096 + t10104 + t10115;
  t10122 = -1.*var4[0]*t10121;
  t7143 = 3.2*t3520*t4060;
  t7159 = 3.2*t3559*t4070;
  t7160 = t6800 + t7139 + t7143 + t7156 + t7159;
  t4062 = 3.2*t3255*t4060;
  t4071 = 3.2*t3276*t4070;
  t4072 = t4016 + t4051 + t4062 + t4063 + t4071;
  t8179 = 3.2*t3520*t4143;
  t8189 = 3.2*t3559*t4150;
  t8202 = t7139 + t8179 + t7156 + t8189;
  t4145 = 3.2*t3255*t4143;
  t4151 = 3.2*t3276*t4150;
  t4154 = t4051 + t4145 + t4063 + t4151;
  t8337 = 3.2*t3580*t4219;
  t8389 = 3.2*t3586*t4227;
  t8393 = t6826 + t8330 + t8337 + t8385 + t8389;
  t4220 = 3.2*t3365*t4219;
  t4228 = 3.2*t3397*t4227;
  t4229 = t4019 + t4209 + t4220 + t4221 + t4228;
  t9776 = 3.2*t3580*t4273;
  t9863 = 3.2*t3586*t4295;
  t9868 = t8330 + t9776 + t8385 + t9863;
  t4276 = 3.2*t3365*t4273;
  t4296 = 3.2*t3397*t4295;
  t4297 = t4209 + t4276 + t4221 + t4296;
  t4341 = 2.88*t6;
  t4342 = 6.8*t3154*t3618;
  t4344 = 3.2*t3276*t3650;
  t4345 = 3.2*t3255*t3675;
  t4347 = 6.8*t3331*t3739;
  t4348 = 3.2*t3397*t3775;
  t4349 = 3.2*t3365*t3779;
  t4350 = t4341 + t4342 + t4344 + t4345 + t4347 + t4348 + t4349;
  t9885 = Power(t3618,2);
  t9889 = Power(t3650,2);
  t9904 = Power(t3675,2);
  t9915 = Power(t3739,2);
  t9921 = Power(t3775,2);
  t9956 = Power(t3779,2);
  t10162 = 0.4*t3435*t3227;
  t3789 = -0.748*t3154;
  t3798 = -3.2*t3797*t3255;
  t3824 = -3.2*t3802*t3276;
  t3825 = t3789 + t3798 + t3824;
  t5368 = -0.748*t3435;
  t5416 = -3.2*t3802*t3559;
  t5539 = -3.2*t3797*t3520;
  t5542 = t5368 + t5416 + t5539;
  t9999 = -0.748*t3618;
  t10019 = -3.2*t3802*t3650;
  t10032 = -3.2*t3797*t3675;
  t10049 = -0.67 + t9999 + t10019 + t10032;
  t5783 = 3.2*t3797*t3975;
  t5784 = 3.2*t3802*t3984;
  t5801 = t5736 + t5783 + t5784;
  t6989 = t5736 + t6969 + t6980;
  t4033 = t3900 + t4031 + t4032;
  t10133 = 3.2*t3797*t4060;
  t10134 = 3.2*t3802*t4070;
  t10138 = t10133 + t10134;
  t10158 = -0.4*t3199*t3970;
  t10163 = -1.*t3435*t3227;
  t10164 = t10089 + t10163;
  t10168 = 0.8*t10164;
  t10170 = t10158 + t10162 + t10168;
  t10172 = -1.*var4[2]*t10170;
  t10174 = -0.4*t3199*t3435;
  t10176 = 0.4*t3154*t3227;
  t10194 = -1.*t3154*t3227;
  t10195 = t10110 + t10194;
  t10202 = 0.8*t10195;
  t10203 = t10174 + t10176 + t10202;
  t10208 = -1.*var4[0]*t10203;
  t7204 = 3.2*t4108*t3559;
  t7215 = 3.2*t4104*t3520;
  t7224 = t7204 + t6969 + t7215 + t6980;
  t4105 = 3.2*t4104*t3255;
  t4109 = 3.2*t4108*t3276;
  t4110 = t4031 + t4105 + t4109 + t4032;
  t10209 = 3.2*t4108*t3650;
  t10210 = 3.2*t4104*t3675;
  t10211 = 3.2*t3797*t4143;
  t10215 = 3.2*t3802*t4150;
  t10216 = t10209 + t10210 + t10211 + t10215;
  t4351 = 0.748*t3154;
  t4352 = 3.2*t3797*t3255;
  t4357 = 3.2*t3802*t3276;
  t4358 = t4351 + t4352 + t4357;
  t10301 = 0.748*t3618;
  t10305 = 3.2*t3802*t3650;
  t10307 = 3.2*t3797*t3675;
  t10309 = 0.67 + t10301 + t10305 + t10307;
  t10330 = Power(t3802,2);
  t10334 = Power(t3797,2);
  t10320 = -0.4*t3621*t3154;
  t10321 = t3199*t3154;
  t10322 = t3435*t3227;
  t10323 = t10321 + t10322;
  t10324 = -0.8*t10323;
  t10325 = t10320 + t10162 + t10324;
  t10326 = -0.4*t3621*t3435;
  t10327 = 0.4*t3970*t3227;
  t10328 = -0.8*t10114;
  t10329 = t10326 + t10327 + t10328;
  t3829 = -0.768*t3255;
  t5641 = -0.768*t3520;
  t10055 = -0.768*t3675;
  t10056 = -0.2 + t10055;
  t10337 = -0.768*t3797;
  t10340 = -0.2 + t10337;
  t10371 = 0.768*t3962*t4046;
  t10372 = 0.768*t3939*t4029;
  t4361 = 0.768*t3255;
  t9877 = 0.768*t3520;
  t10310 = 0.768*t3675;
  t10313 = 0.2 + t10310;
  t10361 = 0.768*t3797;
  t10362 = 0.2 + t10361;
  t10376 = 0.4*t3199*t3154;
  t3839 = -0.748*t3331;
  t3851 = -3.2*t3850*t3365;
  t3862 = -3.2*t3861*t3397;
  t3863 = t3839 + t3851 + t3862;
  t5652 = -0.748*t3567;
  t5653 = -3.2*t3861*t3586;
  t5658 = -3.2*t3850*t3580;
  t5659 = t5652 + t5653 + t5658;
  t10057 = -0.748*t3739;
  t10065 = -3.2*t3861*t3775;
  t10069 = -3.2*t3850*t3779;
  t10074 = -0.67 + t10057 + t10065 + t10069;
  t5841 = 3.2*t3850*t3998;
  t5843 = 3.2*t3861*t4005;
  t5845 = t5829 + t5841 + t5843;
  t8236 = t5829 + t8216 + t8232;
  t4176 = t3931 + t4174 + t4175;
  t10245 = 3.2*t3850*t4219;
  t10246 = 3.2*t3861*t4227;
  t10247 = t10245 + t10246;
  t8463 = 3.2*t4248*t3586;
  t8475 = 3.2*t4235*t3580;
  t8487 = t8463 + t8216 + t8475 + t8232;
  t4244 = 3.2*t4235*t3365;
  t4249 = 3.2*t4248*t3397;
  t4250 = t4174 + t4244 + t4249 + t4175;
  t10260 = 3.2*t4248*t3775;
  t10261 = 3.2*t4235*t3779;
  t10262 = 3.2*t3850*t4273;
  t10263 = 3.2*t3861*t4295;
  t10269 = t10260 + t10261 + t10262 + t10263;
  t4362 = 0.748*t3331;
  t4363 = 3.2*t3850*t3365;
  t4380 = 3.2*t3861*t3397;
  t4381 = t4362 + t4363 + t4380;
  t10314 = 0.748*t3739;
  t10315 = 3.2*t3861*t3775;
  t10316 = 3.2*t3850*t3779;
  t10317 = 0.67 + t10314 + t10315 + t10316;
  t10401 = Power(t3861,2);
  t10403 = Power(t3850,2);
  t3864 = -0.768*t3365;
  t5668 = -0.768*t3580;
  t10076 = -0.768*t3779;
  t10081 = -0.2 + t10076;
  t10406 = -0.768*t3850;
  t10407 = -0.2 + t10406;
  t10433 = 0.768*t3962*t4185;
  t10434 = 0.768*t3939*t4172;
  t4382 = 0.768*t3365;
  t9884 = 0.768*t3580;
  t10318 = 0.768*t3779;
  t10319 = 0.2 + t10318;
  t10427 = 0.768*t3850;
  t10428 = 0.2 + t10427;
  p_output1[0]=t1967 + t2282 - 6.8*t3007 + t3194 - 3.2*t3256 - 3.2*t3288 - 6.8*t3319 + t3340 - 3.2*t3379 - 3.2*t3398;
  p_output1[1]=t3609;
  p_output1[2]=t3785;
  p_output1[3]=t3825;
  p_output1[4]=t3829;
  p_output1[5]=t3863;
  p_output1[6]=t3864;
  p_output1[7]=0.768*t3520*t3885 + t3894*t3903 + 0.768*t3580*t3918 + t3922*t3935 + t3939*(6.4*t3255*t3520 + 6.4*t3276*t3559 + 6.4*t3365*t3580 + 6.4*t3397*t3586 + t3940 + t3941 + t3945 + t3947) + t3962*t4007 + t4014*t4022;
  p_output1[8]=t4030 + t3894*t4033 + t3939*(t3940 + t3941 + t4036 + t4037) + t3962*t4049 + t4014*t4072;
  p_output1[9]=t4030 + t3939*(t4036 + t4037) + t3894*t4110 + t3962*t4114 + t4014*t4154;
  p_output1[10]=t4173 + t3922*t4176 + t3939*(t3945 + t3947 + t4178 + t4179) + t3962*t4188 + t4014*t4229;
  p_output1[11]=t4173 + t3939*(t4178 + t4179) + t3922*t4250 + t3962*t4260 + t4014*t4297;
  p_output1[12]=6.8*t3007 + 3.2*t3256 + 3.2*t3288 + 6.8*t3319 + 3.2*t3379 + 3.2*t3398 + t3967 + t3989 + t4302 + t4304;
  p_output1[13]=t4340;
  p_output1[14]=t4350;
  p_output1[15]=t4358;
  p_output1[16]=t4361;
  p_output1[17]=t4381;
  p_output1[18]=t4382;
  p_output1[19]=-1.;
  p_output1[20]=t3609;
  p_output1[21]=t1967 + t2282 + t3194 + t3340 - 6.8*t3963 - 3.2*t3977 - 3.2*t3980 - 6.8*t3986 - 3.2*t4000 - 3.2*t4002;
  p_output1[22]=t5262;
  p_output1[23]=t5542;
  p_output1[24]=t5641;
  p_output1[25]=t5659;
  p_output1[26]=t5668;
  p_output1[27]=0.768*t3885*t3975 + 0.768*t3918*t3998 + t3939*t4007 + t3894*t5801 + t3922*t5845 + t3962*(t3940 + t3945 + 6.4*t3520*t3975 + 6.4*t3559*t3984 + 6.4*t3580*t3998 + 6.4*t3586*t4005 + t5887 + t6730) + t4014*t6884;
  p_output1[28]=t3939*t4049 + t6950 + t3894*t6989 + t3962*(t3940 + t5887 + t7017 + t7032) + t4014*t7160;
  p_output1[29]=t3939*t4114 + t6950 + t3962*(t7017 + t7032) + t3894*t7224 + t4014*t8202;
  p_output1[30]=t3939*t4188 + t8213 + t3922*t8236 + t3962*(t3945 + t6730 + t8238 + t8239) + t4014*t8393;
  p_output1[31]=t3939*t4260 + t8213 + t3962*(t8238 + t8239) + t3922*t8487 + t4014*t9868;
  p_output1[32]=t4340;
  p_output1[33]=t3964 + t3967 + t3979 + t3981 + t3987 + t3989 + t4001 + t4003 + t4302 + t4304;
  p_output1[34]=t4022;
  p_output1[35]=t3903;
  p_output1[36]=t9877;
  p_output1[37]=t3935;
  p_output1[38]=t9884;
  p_output1[39]=-1.;
  p_output1[40]=t3785;
  p_output1[41]=t5262;
  p_output1[42]=-3.3612 - 6.8*t9885 - 3.2*t9889 - 3.2*t9904 - 6.8*t9915 - 3.2*t9921 - 3.2*t9956;
  p_output1[43]=t10049;
  p_output1[44]=t10056;
  p_output1[45]=t10074;
  p_output1[46]=t10081;
  p_output1[47]=t10095 + t10122 + t3939*t4022 + t3962*t6884;
  p_output1[48]=t10095 + t10122 + t10138*t3894 + 0.768*t3885*t4060 + t4014*(6.4*t3675*t4060 + 6.4*t3650*t4070) + t3939*t4072 + t3962*t7160;
  p_output1[49]=t10172 + t10208 + t10216*t3894 + 0.768*t3885*t4143 + t4014*(6.4*t3675*t4143 + 6.4*t3650*t4150) + t3939*t4154 + t3962*t8202;
  p_output1[50]=t10247*t3922 + 0.768*t3918*t4219 + t4014*(6.4*t3779*t4219 + 6.4*t3775*t4227) + t3939*t4229 + t3962*t8393;
  p_output1[51]=t10269*t3922 + 0.768*t3918*t4273 + t4014*(6.4*t3779*t4273 + 6.4*t3775*t4295) + t3939*t4297 + t3962*t9868;
  p_output1[52]=t4350;
  p_output1[53]=t4022;
  p_output1[54]=3.3612 + 6.8*t9885 + 3.2*t9889 + 3.2*t9904 + 6.8*t9915 + 3.2*t9921 + 3.2*t9956;
  p_output1[55]=t10309;
  p_output1[56]=t10313;
  p_output1[57]=t10317;
  p_output1[58]=t10319;
  p_output1[59]=t10325;
  p_output1[60]=t10329;
  p_output1[61]=t3825;
  p_output1[62]=t5542;
  p_output1[63]=t10049;
  p_output1[64]=-1.58228 - 3.2*t10330 - 3.2*t10334;
  p_output1[65]=t10340;
  p_output1[66]=t10095 + t10122 + t3903*t3939 + t3962*t5801;
  p_output1[67]=t10095 + t10122 + t10138*t4014 + t3939*t4033 + t3962*t6989;
  p_output1[68]=t10172 + t10208 + t10216*t4014 + 0.768*t3885*t4104 + t3894*(6.4*t3797*t4104 + 6.4*t3802*t4108) + t3939*t4110 + t3962*t7224;
  p_output1[69]=t4358;
  p_output1[70]=t3903;
  p_output1[71]=t10309;
  p_output1[72]=1.58228 + 3.2*t10330 + 3.2*t10334;
  p_output1[73]=t10362;
  p_output1[74]=t10325;
  p_output1[75]=t10329;
  p_output1[76]=t3829;
  p_output1[77]=t5641;
  p_output1[78]=t10056;
  p_output1[79]=t10340;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=t10172 + t10208 + 0.768*t3520*t3939 + 0.768*t3962*t3975;
  p_output1[82]=t10172 + t10208 + t10371 + t10372 + 0.768*t4014*t4060;
  p_output1[83]=t10371 + t10372 + 0.768*t3894*t4104 + 0.768*t4014*t4143 - 1.*(t10176 + 0.4*t3002*t3199 + 0.8*(t10194 - 1.*t3002*t3199))*var4[0] - 1.*(t10162 + t10376 + 0.8*(t10163 - 1.*t3154*t3199))*var4[2];
  p_output1[84]=t4361;
  p_output1[85]=t9877;
  p_output1[86]=t10313;
  p_output1[87]=t10362;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t10087 + t10376 - 0.8*(t10321 - 1.*t3002*t3227);
  p_output1[90]=-0.8*t10195 - 0.4*t3154*t3227 + 0.4*t3199*t3435;
  p_output1[91]=t3863;
  p_output1[92]=t5659;
  p_output1[93]=t10074;
  p_output1[94]=-1.58228 - 3.2*t10401 - 3.2*t10403;
  p_output1[95]=t10407;
  p_output1[96]=t3935*t3939 + t3962*t5845;
  p_output1[97]=t10247*t4014 + t3939*t4176 + t3962*t8236;
  p_output1[98]=t10269*t4014 + 0.768*t3918*t4235 + t3922*(6.4*t3850*t4235 + 6.4*t3861*t4248) + t3939*t4250 + t3962*t8487;
  p_output1[99]=t4381;
  p_output1[100]=t3935;
  p_output1[101]=t10317;
  p_output1[102]=1.58228 + 3.2*t10401 + 3.2*t10403;
  p_output1[103]=t10428;
  p_output1[104]=t3864;
  p_output1[105]=t5668;
  p_output1[106]=t10081;
  p_output1[107]=t10407;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t3580*t3939 + 0.768*t3962*t3998;
  p_output1[110]=t10433 + t10434 + 0.768*t4014*t4219;
  p_output1[111]=t10433 + t10434 + 0.768*t3922*t4235 + 0.768*t4014*t4273;
  p_output1[112]=t4382;
  p_output1[113]=t9884;
  p_output1[114]=t10319;
  p_output1[115]=t10428;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapRightImpact.hh"

namespace RightImpact
{

void J_dxDiscreteMapRightImpact_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
