/*
 * Automatically Generated from Mathematica.
 * Tue 3 Dec 2019 15:22:20 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4983;
  double t4946;
  double t4947;
  double t4984;
  double t4989;
  double t3271;
  double t4977;
  double t4985;
  double t4986;
  double t4987;
  double t4990;
  double t4991;
  double t4994;
  double t4995;
  double t4996;
  double t5079;
  double t5086;
  double t5087;
  double t5089;
  double t5090;
  double t5138;
  double t5135;
  double t5136;
  double t5139;
  double t5137;
  double t5140;
  double t5141;
  double t5142;
  double t5143;
  double t5144;
  double t5145;
  double t5146;
  double t5147;
  double t5153;
  double t5154;
  double t5155;
  double t5156;
  double t5157;
  double t5178;
  double t5179;
  double t5180;
  double t5175;
  double t5176;
  double t5177;
  double t5020;
  double t5021;
  double t5022;
  double t5182;
  double t5183;
  double t5184;
  double t5130;
  double t5121;
  double t5122;
  double t5123;
  double t5124;
  double t5131;
  double t5192;
  double t5198;
  double t5209;
  double t5210;
  double t5211;
  double t5206;
  double t5207;
  double t5208;
  double t5149;
  double t5150;
  double t5151;
  double t5213;
  double t5214;
  double t5215;
  double t5170;
  double t5166;
  double t5167;
  double t5168;
  double t5169;
  double t5171;
  double t5223;
  double t5229;
  double t5195;
  double t5196;
  double t5191;
  double t5193;
  double t5188;
  double t5189;
  double t5203;
  double t5204;
  double t5226;
  double t5227;
  double t5222;
  double t5224;
  double t5219;
  double t5220;
  double t5234;
  double t5235;
  double t5272;
  double t5273;
  double t5274;
  double t5276;
  double t5277;
  double t5278;
  double t5292;
  double t5293;
  double t5294;
  double t5296;
  double t5297;
  double t5298;
  double t5069;
  double t5118;
  double t5119;
  double t5120;
  double t5092;
  double t5093;
  double t5112;
  double t5116;
  double t5310;
  double t5311;
  double t5312;
  double t5313;
  double t5314;
  double t5181;
  double t5185;
  double t5186;
  double t5187;
  double t5197;
  double t5239;
  double t5240;
  double t5241;
  double t5242;
  double t5243;
  double t5244;
  double t5327;
  double t5328;
  double t5266;
  double t5267;
  double t5268;
  double t5269;
  double t5270;
  double t5271;
  double t5275;
  double t5279;
  double t5280;
  double t5282;
  double t5283;
  double t5284;
  double t5339;
  double t5340;
  double t5341;
  double t5315;
  double t5316;
  double t5317;
  double t5320;
  double t5321;
  double t5322;
  double t5323;
  double t5324;
  double t5325;
  double t5326;
  double t5329;
  double t5332;
  double t5333;
  double t5334;
  double t5335;
  double t5338;
  double t5343;
  double t5344;
  double t5348;
  double t5373;
  double t5374;
  double t5350;
  double t5376;
  double t5377;
  double t5352;
  double t5152;
  double t5163;
  double t5164;
  double t5165;
  double t5158;
  double t5159;
  double t5160;
  double t5161;
  double t5389;
  double t5390;
  double t5391;
  double t5392;
  double t5393;
  double t5212;
  double t5216;
  double t5217;
  double t5218;
  double t5228;
  double t5251;
  double t5252;
  double t5253;
  double t5254;
  double t5255;
  double t5256;
  double t5406;
  double t5407;
  double t5286;
  double t5287;
  double t5288;
  double t5289;
  double t5290;
  double t5291;
  double t5295;
  double t5299;
  double t5300;
  double t5302;
  double t5303;
  double t5304;
  double t5418;
  double t5419;
  double t5420;
  double t5394;
  double t5395;
  double t5396;
  double t5399;
  double t5400;
  double t5401;
  double t5402;
  double t5403;
  double t5404;
  double t5405;
  double t5408;
  double t5411;
  double t5412;
  double t5413;
  double t5414;
  double t5417;
  double t5422;
  double t5423;
  double t5427;
  double t5452;
  double t5453;
  double t5429;
  double t5455;
  double t5456;
  double t5431;
  double t5246;
  double t5248;
  double t5258;
  double t5260;
  double t5468;
  double t5469;
  double t5470;
  double t5471;
  double t5472;
  double t5473;
  double t5474;
  double t5475;
  double t5476;
  double t5478;
  double t5479;
  double t5480;
  double t5481;
  double t5482;
  double t5483;
  double t5484;
  double t5485;
  double t5486;
  double t5487;
  double t5488;
  double t5489;
  double t5490;
  double t5491;
  double t5492;
  double t5493;
  double t5494;
  double t5497;
  double t5498;
  double t5499;
  double t5500;
  double t5503;
  double t5504;
  double t5505;
  double t5506;
  double t5199;
  double t5201;
  double t5202;
  double t5230;
  double t5232;
  double t5233;
  double t5190;
  double t5194;
  double t5200;
  double t5205;
  double t5221;
  double t5225;
  double t5231;
  double t5236;
  double t5237;
  double t5525;
  double t5536;
  double t5537;
  double t5330;
  double t5556;
  double t5342;
  double t5345;
  double t5346;
  double t5349;
  double t5351;
  double t5353;
  double t5566;
  double t5567;
  double t5363;
  double t5364;
  double t5365;
  double t5359;
  double t5360;
  double t5361;
  double t5568;
  double t5571;
  double t5572;
  double t5573;
  double t5574;
  double t5369;
  double t5578;
  double t5375;
  double t5378;
  double t5379;
  double t5580;
  double t5381;
  double t5382;
  double t5383;
  double t5531;
  double t5544;
  double t5545;
  double t5409;
  double t5559;
  double t5421;
  double t5424;
  double t5425;
  double t5428;
  double t5430;
  double t5432;
  double t5599;
  double t5600;
  double t5442;
  double t5443;
  double t5444;
  double t5438;
  double t5439;
  double t5440;
  double t5601;
  double t5604;
  double t5605;
  double t5606;
  double t5607;
  double t5448;
  double t5611;
  double t5454;
  double t5457;
  double t5458;
  double t5613;
  double t5460;
  double t5461;
  double t5462;
  double t5495;
  double t4997;
  double t5117;
  double t5132;
  double t5133;
  double t5134;
  double t5148;
  double t5162;
  double t5172;
  double t5173;
  double t5174;
  double t5632;
  double t5633;
  double t5634;
  double t5635;
  double t5636;
  double t5637;
  double t5638;
  double t5265;
  double t5281;
  double t5285;
  double t5301;
  double t5305;
  double t5306;
  double t5555;
  double t5557;
  double t5558;
  double t5560;
  double t5561;
  double t5562;
  double t5347;
  double t5354;
  double t5355;
  double t5579;
  double t5581;
  double t5582;
  double t5380;
  double t5384;
  double t5385;
  double t5593;
  double t5594;
  double t5595;
  double t5426;
  double t5433;
  double t5434;
  double t5612;
  double t5614;
  double t5615;
  double t5459;
  double t5463;
  double t5464;
  double t5626;
  double t5627;
  double t5628;
  double t5510;
  double t5511;
  double t5512;
  double t5513;
  double t5514;
  double t5515;
  double t5516;
  double t5517;
  double t5307;
  double t5526;
  double t5527;
  double t5528;
  double t5318;
  double t5569;
  double t5362;
  double t5366;
  double t5367;
  double t5586;
  double t5587;
  double t5588;
  double t5520;
  double t5644;
  double t5691;
  double t5692;
  double t5693;
  double t5694;
  double t5521;
  double t5645;
  double t5532;
  double t5533;
  double t5534;
  double t5397;
  double t5602;
  double t5441;
  double t5445;
  double t5446;
  double t5619;
  double t5620;
  double t5621;
  double t5522;
  double t5646;
  double t5717;
  double t5718;
  double t5719;
  double t5720;
  double t5523;
  double t5647;
  t4983 = Cos(var1[3]);
  t4946 = Cos(var1[4]);
  t4947 = Sin(var1[3]);
  t4984 = Sin(var1[4]);
  t4989 = Cos(var1[2]);
  t3271 = Sin(var1[2]);
  t4977 = -1.*t4946*t4947;
  t4985 = -1.*t4983*t4984;
  t4986 = t4977 + t4985;
  t4987 = -1.*t3271*t4986;
  t4990 = t4983*t4946;
  t4991 = -1.*t4947*t4984;
  t4994 = t4990 + t4991;
  t4995 = -1.*t4989*t4994;
  t4996 = t4987 + t4995;
  t5079 = -1.*t4946;
  t5086 = 1. + t5079;
  t5087 = 0.4*t5086;
  t5089 = 0.64*t4946;
  t5090 = t5087 + t5089;
  t5138 = Cos(var1[5]);
  t5135 = Cos(var1[6]);
  t5136 = Sin(var1[5]);
  t5139 = Sin(var1[6]);
  t5137 = -1.*t5135*t5136;
  t5140 = -1.*t5138*t5139;
  t5141 = t5137 + t5140;
  t5142 = -1.*t3271*t5141;
  t5143 = t5138*t5135;
  t5144 = -1.*t5136*t5139;
  t5145 = t5143 + t5144;
  t5146 = -1.*t4989*t5145;
  t5147 = t5142 + t5146;
  t5153 = -1.*t5135;
  t5154 = 1. + t5153;
  t5155 = 0.4*t5154;
  t5156 = 0.64*t5135;
  t5157 = t5155 + t5156;
  t5178 = t4989*t4983;
  t5179 = -1.*t3271*t4947;
  t5180 = t5178 + t5179;
  t5175 = -1.*t4983*t3271;
  t5176 = -1.*t4989*t4947;
  t5177 = t5175 + t5176;
  t5020 = -1.*t4989*t4983;
  t5021 = t3271*t4947;
  t5022 = t5020 + t5021;
  t5182 = t4983*t3271;
  t5183 = t4989*t4947;
  t5184 = t5182 + t5183;
  t5130 = -1.*t3271*t4994;
  t5121 = t4946*t4947;
  t5122 = t4983*t4984;
  t5123 = t5121 + t5122;
  t5124 = -1.*t4989*t5123;
  t5131 = t5124 + t5130;
  t5192 = t4989*t4994;
  t5198 = t3271*t4994;
  t5209 = t4989*t5138;
  t5210 = -1.*t3271*t5136;
  t5211 = t5209 + t5210;
  t5206 = -1.*t5138*t3271;
  t5207 = -1.*t4989*t5136;
  t5208 = t5206 + t5207;
  t5149 = -1.*t4989*t5138;
  t5150 = t3271*t5136;
  t5151 = t5149 + t5150;
  t5213 = t5138*t3271;
  t5214 = t4989*t5136;
  t5215 = t5213 + t5214;
  t5170 = -1.*t3271*t5145;
  t5166 = t5135*t5136;
  t5167 = t5138*t5139;
  t5168 = t5166 + t5167;
  t5169 = -1.*t4989*t5168;
  t5171 = t5169 + t5170;
  t5223 = t4989*t5145;
  t5229 = t3271*t5145;
  t5195 = t3271*t4986;
  t5196 = t5195 + t5192;
  t5191 = -1.*t3271*t5123;
  t5193 = t5191 + t5192;
  t5188 = t4989*t4986;
  t5189 = t5188 + t5130;
  t5203 = t4989*t5123;
  t5204 = t5203 + t5198;
  t5226 = t3271*t5141;
  t5227 = t5226 + t5223;
  t5222 = -1.*t3271*t5168;
  t5224 = t5222 + t5223;
  t5219 = t4989*t5141;
  t5220 = t5219 + t5170;
  t5234 = t4989*t5168;
  t5235 = t5234 + t5229;
  t5272 = t5090*t4947;
  t5273 = 0.24*t4983*t4984;
  t5274 = t5272 + t5273;
  t5276 = t4983*t5090;
  t5277 = -0.24*t4947*t4984;
  t5278 = t5276 + t5277;
  t5292 = t5157*t5136;
  t5293 = 0.24*t5138*t5139;
  t5294 = t5292 + t5293;
  t5296 = t5138*t5157;
  t5297 = -0.24*t5136*t5139;
  t5298 = t5296 + t5297;
  t5069 = 0.748*t5022;
  t5118 = t5090*t4984;
  t5119 = -0.24*t4946*t4984;
  t5120 = t5118 + t5119;
  t5092 = t5090*t4946;
  t5093 = Power(t4984,2);
  t5112 = 0.24*t5093;
  t5116 = t5092 + t5112;
  t5310 = -1.*t4983*t4946;
  t5311 = t4947*t4984;
  t5312 = t5310 + t5311;
  t5313 = t4989*t5312;
  t5314 = t4987 + t5313;
  t5181 = 20.4*t5177*t5180;
  t5185 = 6.8*t5184*t5180;
  t5186 = 20.4*t5177*t5022;
  t5187 = 6.8*t5184*t5022;
  t5197 = -1.*t4989*t4986;
  t5239 = Power(t5177,2);
  t5240 = 13.6*t5239;
  t5241 = 13.6*t5177*t5184;
  t5242 = Power(t5180,2);
  t5243 = 13.6*t5242;
  t5244 = 13.6*t5180*t5022;
  t5327 = t3271*t5312;
  t5328 = t5188 + t5327;
  t5266 = Power(t4983,2);
  t5267 = 0.11*t5266;
  t5268 = Power(t4947,2);
  t5269 = 0.11*t5268;
  t5270 = t5267 + t5269;
  t5271 = 6.8*t5022*t5270;
  t5275 = -1.*t5274*t4994;
  t5279 = -1.*t4986*t5278;
  t5280 = t5275 + t5279;
  t5282 = t5274*t5123;
  t5283 = t4994*t5278;
  t5284 = t5282 + t5283;
  t5339 = -1.*t5090*t4947;
  t5340 = -0.24*t4983*t4984;
  t5341 = t5339 + t5340;
  t5315 = -0.384*var2[4]*t5314;
  t5316 = 3.2*t5120*t5189;
  t5317 = 3.2*t5116*t5314;
  t5320 = 6.4*t5193*t5189;
  t5321 = 3.2*t5196*t5131;
  t5322 = 3.2*t4996*t5204;
  t5323 = 6.4*t5189*t5314;
  t5324 = -1.*t3271*t5312;
  t5325 = t5197 + t5324;
  t5326 = 3.2*t5196*t5325;
  t5329 = 3.2*t4996*t5328;
  t5332 = 6.4*t5196*t5193;
  t5333 = 6.4*t5189*t5204;
  t5334 = 6.4*t5196*t5314;
  t5335 = 6.4*t5189*t5328;
  t5338 = 3.2*t5189*t5280;
  t5343 = t5274*t4994;
  t5344 = t4986*t5278;
  t5348 = 3.2*t5284*t5314;
  t5373 = -0.24*t4946*t4947;
  t5374 = t5373 + t5340;
  t5350 = -1.*t4986*t5274;
  t5376 = 0.24*t4983*t4946;
  t5377 = t5376 + t5277;
  t5352 = -1.*t5278*t5312;
  t5152 = 0.748*t5151;
  t5163 = t5157*t5139;
  t5164 = -0.24*t5135*t5139;
  t5165 = t5163 + t5164;
  t5158 = t5157*t5135;
  t5159 = Power(t5139,2);
  t5160 = 0.24*t5159;
  t5161 = t5158 + t5160;
  t5389 = -1.*t5138*t5135;
  t5390 = t5136*t5139;
  t5391 = t5389 + t5390;
  t5392 = t4989*t5391;
  t5393 = t5142 + t5392;
  t5212 = 20.4*t5208*t5211;
  t5216 = 6.8*t5215*t5211;
  t5217 = 20.4*t5208*t5151;
  t5218 = 6.8*t5215*t5151;
  t5228 = -1.*t4989*t5141;
  t5251 = Power(t5208,2);
  t5252 = 13.6*t5251;
  t5253 = 13.6*t5208*t5215;
  t5254 = Power(t5211,2);
  t5255 = 13.6*t5254;
  t5256 = 13.6*t5211*t5151;
  t5406 = t3271*t5391;
  t5407 = t5219 + t5406;
  t5286 = Power(t5138,2);
  t5287 = 0.11*t5286;
  t5288 = Power(t5136,2);
  t5289 = 0.11*t5288;
  t5290 = t5287 + t5289;
  t5291 = 6.8*t5151*t5290;
  t5295 = -1.*t5294*t5145;
  t5299 = -1.*t5141*t5298;
  t5300 = t5295 + t5299;
  t5302 = t5294*t5168;
  t5303 = t5145*t5298;
  t5304 = t5302 + t5303;
  t5418 = -1.*t5157*t5136;
  t5419 = -0.24*t5138*t5139;
  t5420 = t5418 + t5419;
  t5394 = -0.384*var2[6]*t5393;
  t5395 = 3.2*t5165*t5220;
  t5396 = 3.2*t5161*t5393;
  t5399 = 6.4*t5224*t5220;
  t5400 = 3.2*t5227*t5171;
  t5401 = 3.2*t5147*t5235;
  t5402 = 6.4*t5220*t5393;
  t5403 = -1.*t3271*t5391;
  t5404 = t5228 + t5403;
  t5405 = 3.2*t5227*t5404;
  t5408 = 3.2*t5147*t5407;
  t5411 = 6.4*t5227*t5224;
  t5412 = 6.4*t5220*t5235;
  t5413 = 6.4*t5227*t5393;
  t5414 = 6.4*t5220*t5407;
  t5417 = 3.2*t5220*t5300;
  t5422 = t5294*t5145;
  t5423 = t5141*t5298;
  t5427 = 3.2*t5304*t5393;
  t5452 = -0.24*t5135*t5136;
  t5453 = t5452 + t5419;
  t5429 = -1.*t5141*t5294;
  t5455 = 0.24*t5138*t5135;
  t5456 = t5455 + t5297;
  t5431 = -1.*t5298*t5391;
  t5246 = Power(t5193,2);
  t5248 = Power(t5189,2);
  t5258 = Power(t5224,2);
  t5260 = Power(t5220,2);
  t5468 = 13.6*t5177*t5180;
  t5469 = 13.6*t5184*t5180;
  t5470 = 6.4*t5196*t5189;
  t5471 = 6.4*t5193*t5204;
  t5472 = 13.6*t5208*t5211;
  t5473 = 13.6*t5215*t5211;
  t5474 = 6.4*t5227*t5220;
  t5475 = 6.4*t5224*t5235;
  t5476 = t5468 + t5469 + t5470 + t5471 + t5472 + t5473 + t5474 + t5475;
  t5478 = 6.8*t5239;
  t5479 = 6.8*t5177*t5184;
  t5480 = 6.8*t5242;
  t5481 = 6.8*t5180*t5022;
  t5482 = 3.2*t4996*t5196;
  t5483 = 3.2*t5246;
  t5484 = 3.2*t5248;
  t5485 = 3.2*t5131*t5204;
  t5486 = 6.8*t5251;
  t5487 = 6.8*t5208*t5215;
  t5488 = 6.8*t5254;
  t5489 = 6.8*t5211*t5151;
  t5490 = 3.2*t5147*t5227;
  t5491 = 3.2*t5258;
  t5492 = 3.2*t5260;
  t5493 = 3.2*t5171*t5235;
  t5494 = t5478 + t5479 + t5480 + t5481 + t5482 + t5483 + t5484 + t5485 + t5486 + t5487 + t5488 + t5489 + t5490 + t5491 + t5492 + t5493;
  t5497 = 0.748*t5177;
  t5498 = 3.2*t5120*t5193;
  t5499 = 3.2*t5116*t5189;
  t5500 = t5497 + t5498 + t5499;
  t5503 = 0.748*t5208;
  t5504 = 3.2*t5165*t5224;
  t5505 = 3.2*t5161*t5220;
  t5506 = t5503 + t5504 + t5505;
  t5199 = t5197 + t5198;
  t5201 = t3271*t5123;
  t5202 = t5201 + t4995;
  t5230 = t5228 + t5229;
  t5232 = t3271*t5168;
  t5233 = t5232 + t5146;
  t5190 = 9.6*t4996*t5189;
  t5194 = 9.6*t5193*t5131;
  t5200 = 3.2*t5196*t5199;
  t5205 = 3.2*t5202*t5204;
  t5221 = 9.6*t5147*t5220;
  t5225 = 9.6*t5224*t5171;
  t5231 = 3.2*t5227*t5230;
  t5236 = 3.2*t5233*t5235;
  t5237 = t5181 + t5185 + t5186 + t5187 + t5190 + t5194 + t5200 + t5205 + t5212 + t5216 + t5217 + t5218 + t5221 + t5225 + t5231 + t5236;
  t5525 = 0.748*t5184;
  t5536 = Power(t5022,2);
  t5537 = 13.6*t5536;
  t5330 = t5181 + t5185 + t5186 + t5187 + t5320 + t5321 + t5322 + t5323 + t5326 + t5329;
  t5556 = 6.8*t5184*t5270;
  t5342 = t5341*t4994;
  t5345 = t5123*t5278;
  t5346 = t5342 + t5343 + t5344 + t5345;
  t5349 = -1.*t4986*t5341;
  t5351 = -1.*t4994*t5278;
  t5353 = t5349 + t5350 + t5351 + t5352;
  t5566 = -0.384*var2[4]*t5325;
  t5567 = 3.2*t5120*t4996;
  t5363 = -1.*t5090*t4984;
  t5364 = 0.24*t4946*t4984;
  t5365 = t5363 + t5364;
  t5359 = Power(t4946,2);
  t5360 = -0.24*t5359;
  t5361 = t5092 + t5360;
  t5568 = 3.2*t5116*t5325;
  t5571 = 6.4*t4996*t5193;
  t5572 = 6.4*t5189*t5131;
  t5573 = 6.4*t4996*t5314;
  t5574 = 6.4*t5189*t5325;
  t5369 = t5320 + t5321 + t5322 + t5323 + t5326 + t5329;
  t5578 = 3.2*t4996*t5280;
  t5375 = t5374*t4994;
  t5378 = t5123*t5377;
  t5379 = t5375 + t5343 + t5344 + t5378;
  t5580 = 3.2*t5284*t5325;
  t5381 = -1.*t4986*t5374;
  t5382 = -1.*t4994*t5377;
  t5383 = t5381 + t5350 + t5382 + t5352;
  t5531 = 0.748*t5215;
  t5544 = Power(t5151,2);
  t5545 = 13.6*t5544;
  t5409 = t5212 + t5216 + t5217 + t5218 + t5399 + t5400 + t5401 + t5402 + t5405 + t5408;
  t5559 = 6.8*t5215*t5290;
  t5421 = t5420*t5145;
  t5424 = t5168*t5298;
  t5425 = t5421 + t5422 + t5423 + t5424;
  t5428 = -1.*t5141*t5420;
  t5430 = -1.*t5145*t5298;
  t5432 = t5428 + t5429 + t5430 + t5431;
  t5599 = -0.384*var2[6]*t5404;
  t5600 = 3.2*t5165*t5147;
  t5442 = -1.*t5157*t5139;
  t5443 = 0.24*t5135*t5139;
  t5444 = t5442 + t5443;
  t5438 = Power(t5135,2);
  t5439 = -0.24*t5438;
  t5440 = t5158 + t5439;
  t5601 = 3.2*t5161*t5404;
  t5604 = 6.4*t5147*t5224;
  t5605 = 6.4*t5220*t5171;
  t5606 = 6.4*t5147*t5393;
  t5607 = 6.4*t5220*t5404;
  t5448 = t5399 + t5400 + t5401 + t5402 + t5405 + t5408;
  t5611 = 3.2*t5147*t5300;
  t5454 = t5453*t5145;
  t5457 = t5168*t5456;
  t5458 = t5454 + t5422 + t5423 + t5457;
  t5613 = 3.2*t5304*t5404;
  t5460 = -1.*t5141*t5453;
  t5461 = -1.*t5145*t5456;
  t5462 = t5460 + t5429 + t5461 + t5431;
  t5495 = -0.5*var2[2]*t5494;
  t4997 = -0.384*var2[4]*t4996;
  t5117 = 3.2*t5116*t4996;
  t5132 = 3.2*t5120*t5131;
  t5133 = t5069 + t5117 + t5132;
  t5134 = -0.5*var2[3]*t5133;
  t5148 = -0.384*var2[6]*t5147;
  t5162 = 3.2*t5161*t5147;
  t5172 = 3.2*t5165*t5171;
  t5173 = t5152 + t5162 + t5172;
  t5174 = -0.5*var2[5]*t5173;
  t5632 = 13.6*t5177*t5022;
  t5633 = 6.4*t4996*t5189;
  t5634 = 6.4*t5193*t5131;
  t5635 = 13.6*t5208*t5151;
  t5636 = 6.4*t5147*t5220;
  t5637 = 6.4*t5224*t5171;
  t5638 = t5468 + t5632 + t5633 + t5634 + t5472 + t5635 + t5636 + t5637;
  t5265 = -2.88*t4989;
  t5281 = 3.2*t5131*t5280;
  t5285 = 3.2*t4996*t5284;
  t5301 = 3.2*t5171*t5300;
  t5305 = 3.2*t5147*t5304;
  t5306 = t5265 + t5271 + t5281 + t5285 + t5291 + t5301 + t5305;
  t5555 = 2.88*t3271;
  t5557 = 3.2*t5202*t5280;
  t5558 = 3.2*t5199*t5284;
  t5560 = 3.2*t5233*t5300;
  t5561 = 3.2*t5230*t5304;
  t5562 = t5555 + t5556 + t5557 + t5558 + t5559 + t5560 + t5561;
  t5347 = 3.2*t5189*t5346;
  t5354 = 3.2*t5193*t5353;
  t5355 = t5271 + t5338 + t5347 + t5348 + t5354;
  t5579 = 3.2*t4996*t5346;
  t5581 = 3.2*t5131*t5353;
  t5582 = t5556 + t5578 + t5579 + t5580 + t5581;
  t5380 = 3.2*t5189*t5379;
  t5384 = 3.2*t5193*t5383;
  t5385 = t5338 + t5380 + t5348 + t5384;
  t5593 = 3.2*t4996*t5379;
  t5594 = 3.2*t5131*t5383;
  t5595 = t5578 + t5593 + t5580 + t5594;
  t5426 = 3.2*t5220*t5425;
  t5433 = 3.2*t5224*t5432;
  t5434 = t5291 + t5417 + t5426 + t5427 + t5433;
  t5612 = 3.2*t5147*t5425;
  t5614 = 3.2*t5171*t5432;
  t5615 = t5559 + t5611 + t5612 + t5613 + t5614;
  t5459 = 3.2*t5220*t5458;
  t5463 = 3.2*t5224*t5462;
  t5464 = t5417 + t5459 + t5427 + t5463;
  t5626 = 3.2*t5147*t5458;
  t5627 = 3.2*t5171*t5462;
  t5628 = t5611 + t5626 + t5613 + t5627;
  t5510 = -2.88*t3271;
  t5511 = 6.8*t5177*t5270;
  t5512 = 3.2*t5193*t5280;
  t5513 = 3.2*t5189*t5284;
  t5514 = 6.8*t5208*t5290;
  t5515 = 3.2*t5224*t5300;
  t5516 = 3.2*t5220*t5304;
  t5517 = t5510 + t5511 + t5512 + t5513 + t5514 + t5515 + t5516;
  t5307 = -0.5*var2[2]*t5306;
  t5526 = 3.2*t5120*t5202;
  t5527 = 3.2*t5116*t5199;
  t5528 = t5525 + t5526 + t5527;
  t5318 = t5069 + t5316 + t5317;
  t5569 = t5525 + t5567 + t5568;
  t5362 = 3.2*t5361*t5193;
  t5366 = 3.2*t5365*t5189;
  t5367 = t5362 + t5316 + t5366 + t5317;
  t5586 = 3.2*t5365*t4996;
  t5587 = 3.2*t5361*t5131;
  t5588 = t5567 + t5586 + t5587 + t5568;
  t5520 = -0.5*var2[2]*t5500;
  t5644 = -0.5*var2[2]*t5133;
  t5691 = -0.384*var2[0]*t5314;
  t5692 = -0.384*var2[1]*t5325;
  t5693 = t5691 + t5692;
  t5694 = var2[2]*t5693;
  t5521 = -0.384*var2[2]*t5189;
  t5645 = -0.384*var2[2]*t4996;
  t5532 = 3.2*t5165*t5233;
  t5533 = 3.2*t5161*t5230;
  t5534 = t5531 + t5532 + t5533;
  t5397 = t5152 + t5395 + t5396;
  t5602 = t5531 + t5600 + t5601;
  t5441 = 3.2*t5440*t5224;
  t5445 = 3.2*t5444*t5220;
  t5446 = t5441 + t5395 + t5445 + t5396;
  t5619 = 3.2*t5444*t5147;
  t5620 = 3.2*t5440*t5171;
  t5621 = t5600 + t5619 + t5620 + t5601;
  t5522 = -0.5*var2[2]*t5506;
  t5646 = -0.5*var2[2]*t5173;
  t5717 = -0.384*var2[0]*t5393;
  t5718 = -0.384*var2[1]*t5404;
  t5719 = t5717 + t5718;
  t5720 = var2[2]*t5719;
  t5523 = -0.384*var2[2]*t5220;
  t5647 = -0.384*var2[2]*t5147;
  p_output1[0]=(t4997 + t5134 + t5148 + t5174 + t5307 - 0.5*(6.4*t4996*t5196 + 6.4*t5131*t5204 + 6.4*t5147*t5227 + 6.4*t5171*t5235 + t5240 + t5241 + t5243 + t5244 + 6.4*t5246 + 6.4*t5248 + t5252 + t5253 + t5255 + t5256 + 6.4*t5258 + 6.4*t5260)*var2[0] - 0.5*t5237*var2[1])*var2[2];
  p_output1[1]=var2[2]*(t5315 - 0.5*(t5240 + t5241 + t5243 + t5244 + t5332 + t5333 + t5334 + t5335)*var2[0] - 0.5*t5330*var2[1] - 0.5*t5355*var2[2] - 0.5*t5318*var2[3]);
  p_output1[2]=var2[2]*(t5315 - 0.5*(t5332 + t5333 + t5334 + t5335)*var2[0] - 0.5*t5369*var2[1] - 0.5*t5385*var2[2] - 0.5*t5367*var2[3]);
  p_output1[3]=var2[2]*(t5394 - 0.5*(t5252 + t5253 + t5255 + t5256 + t5411 + t5412 + t5413 + t5414)*var2[0] - 0.5*t5409*var2[1] - 0.5*t5434*var2[2] - 0.5*t5397*var2[5]);
  p_output1[4]=var2[2]*(t5394 - 0.5*(t5411 + t5412 + t5413 + t5414)*var2[0] - 0.5*t5448*var2[1] - 0.5*t5464*var2[2] - 0.5*t5446*var2[5]);
  p_output1[5]=-0.5*t5476*var2[2];
  p_output1[6]=t5495;
  p_output1[7]=-0.5*t5476*var2[0] - 0.5*t5494*var2[1] - 1.*t5517*var2[2] - 0.5*t5500*var2[3] - 0.384*t5189*var2[4] - 0.5*t5506*var2[5] - 0.384*t5220*var2[6];
  p_output1[8]=t5520;
  p_output1[9]=t5521;
  p_output1[10]=t5522;
  p_output1[11]=t5523;
  p_output1[12]=var2[2]*(-0.5*t5237*var2[0] - 0.5*(6.4*Power(t4996,2) + 6.4*Power(t5131,2) + 6.4*Power(t5147,2) + 6.4*Power(t5171,2) + 6.4*t5189*t5199 + 6.4*t5193*t5202 + 6.4*t5220*t5230 + 6.4*t5224*t5233 + t5240 + t5241 + t5244 + t5252 + t5253 + t5256 + t5537 + t5545)*var2[1] - 0.5*t5562*var2[2] - 0.5*t5528*var2[3] - 0.384*t5199*var2[4] - 0.5*t5534*var2[5] - 0.384*t5230*var2[6]);
  p_output1[13]=var2[2]*(t5566 - 0.5*t5330*var2[0] - 0.5*(t5240 + t5241 + t5244 + t5537 + t5571 + t5572 + t5573 + t5574)*var2[1] - 0.5*t5582*var2[2] - 0.5*t5569*var2[3]);
  p_output1[14]=var2[2]*(t5566 - 0.5*t5369*var2[0] - 0.5*(t5571 + t5572 + t5573 + t5574)*var2[1] - 0.5*t5595*var2[2] - 0.5*t5588*var2[3]);
  p_output1[15]=var2[2]*(t5599 - 0.5*t5409*var2[0] - 0.5*(t5252 + t5253 + t5256 + t5545 + t5604 + t5605 + t5606 + t5607)*var2[1] - 0.5*t5615*var2[2] - 0.5*t5602*var2[5]);
  p_output1[16]=var2[2]*(t5599 - 0.5*t5448*var2[0] - 0.5*(t5604 + t5605 + t5606 + t5607)*var2[1] - 0.5*t5628*var2[2] - 0.5*t5621*var2[5]);
  p_output1[17]=t5495;
  p_output1[18]=-0.5*t5638*var2[2];
  p_output1[19]=t4997 + t5134 + t5148 + t5174 - 0.5*t5494*var2[0] - 0.5*t5638*var2[1] - 1.*t5306*var2[2];
  p_output1[20]=t5644;
  p_output1[21]=t5645;
  p_output1[22]=t5646;
  p_output1[23]=t5647;
  p_output1[24]=(-0.5*t5306*var2[0] - 0.5*t5562*var2[1])*var2[2];
  p_output1[25]=(-0.5*t5355*var2[0] - 0.5*t5582*var2[1])*var2[2];
  p_output1[26]=(-0.5*t5385*var2[0] - 0.5*t5595*var2[1])*var2[2];
  p_output1[27]=(-0.5*t5434*var2[0] - 0.5*t5615*var2[1])*var2[2];
  p_output1[28]=(-0.5*t5464*var2[0] - 0.5*t5628*var2[1])*var2[2];
  p_output1[29]=-0.5*t5517*var2[2];
  p_output1[30]=t5307;
  p_output1[31]=-0.5*t5517*var2[0] - 0.5*t5306*var2[1];
  p_output1[32]=(-0.5*t5133*var2[0] - 0.5*t5528*var2[1])*var2[2];
  p_output1[33]=(-0.5*t5318*var2[0] - 0.5*t5569*var2[1])*var2[2];
  p_output1[34]=(-0.5*t5367*var2[0] - 0.5*t5588*var2[1])*var2[2];
  p_output1[35]=t5520;
  p_output1[36]=t5644;
  p_output1[37]=-0.5*t5500*var2[0] - 0.5*t5133*var2[1];
  p_output1[38]=(-0.384*t4996*var2[0] - 0.384*t5199*var2[1])*var2[2];
  p_output1[39]=t5694;
  p_output1[40]=t5694;
  p_output1[41]=t5521;
  p_output1[42]=t5645;
  p_output1[43]=-0.384*t5189*var2[0] - 0.384*t4996*var2[1];
  p_output1[44]=(-0.5*t5173*var2[0] - 0.5*t5534*var2[1])*var2[2];
  p_output1[45]=(-0.5*t5397*var2[0] - 0.5*t5602*var2[1])*var2[2];
  p_output1[46]=(-0.5*t5446*var2[0] - 0.5*t5621*var2[1])*var2[2];
  p_output1[47]=t5522;
  p_output1[48]=t5646;
  p_output1[49]=-0.5*t5506*var2[0] - 0.5*t5173*var2[1];
  p_output1[50]=(-0.384*t5147*var2[0] - 0.384*t5230*var2[1])*var2[2];
  p_output1[51]=t5720;
  p_output1[52]=t5720;
  p_output1[53]=t5523;
  p_output1[54]=t5647;
  p_output1[55]=-0.384*t5220*var2[0] - 0.384*t5147*var2[1];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 56, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec3_five_link_walker.hh"

namespace RightStance
{

void J_Ce2_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
