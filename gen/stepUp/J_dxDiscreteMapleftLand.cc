/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 21:09:06 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t4857;
  double t3338;
  double t4865;
  double t4868;
  double t4938;
  double t4943;
  double t5043;
  double t5050;
  double t5058;
  double t11084;
  double t11120;
  double t11136;
  double t11138;
  double t11159;
  double t11160;
  double t11169;
  double t4907;
  double t4908;
  double t4910;
  double t4866;
  double t4874;
  double t4885;
  double t4939;
  double t4949;
  double t4954;
  double t5042;
  double t5072;
  double t5074;
  double t8354;
  double t8355;
  double t8568;
  double t11048;
  double t11049;
  double t11063;
  double t11129;
  double t11130;
  double t11131;
  double t11111;
  double t11123;
  double t11126;
  double t11137;
  double t11139;
  double t11149;
  double t11153;
  double t11173;
  double t11179;
  double t11185;
  double t11186;
  double t11187;
  double t11192;
  double t11193;
  double t11198;
  double t11270;
  double t11271;
  double t11272;
  double t11273;
  double t11274;
  double t11275;
  double t11278;
  double t11279;
  double t11281;
  double t11282;
  double t11283;
  double t11299;
  double t11300;
  double t11301;
  double t11302;
  double t11303;
  double t11304;
  double t11305;
  double t11306;
  double t11308;
  double t11309;
  double t11310;
  double t11207;
  double t11208;
  double t11209;
  double t11202;
  double t11203;
  double t11204;
  double t11325;
  double t11326;
  double t11327;
  double t11211;
  double t11212;
  double t11320;
  double t11321;
  double t11322;
  double t11323;
  double t11242;
  double t11246;
  double t11253;
  double t11222;
  double t11223;
  double t11226;
  double t11337;
  double t11338;
  double t11339;
  double t11259;
  double t11260;
  double t11332;
  double t11333;
  double t11334;
  double t11335;
  double t4911;
  double t11134;
  double t11264;
  double t11265;
  double t11266;
  double t11267;
  double t11268;
  double t11280;
  double t11284;
  double t11285;
  double t11287;
  double t11288;
  double t11289;
  double t11291;
  double t11292;
  double t11293;
  double t11294;
  double t11297;
  double t11307;
  double t11311;
  double t11312;
  double t11314;
  double t11315;
  double t11316;
  double t11343;
  double t11344;
  double t11346;
  double t11347;
  double t11348;
  double t11429;
  double t11430;
  double t11431;
  double t11432;
  double t11433;
  double t11363;
  double t11364;
  double t11365;
  double t11366;
  double t11375;
  double t11376;
  double t11377;
  double t11378;
  double t11379;
  double t11380;
  double t11381;
  double t11382;
  double t11383;
  double t11384;
  double t11385;
  double t11417;
  double t11418;
  double t11420;
  double t11452;
  double t11453;
  double t11454;
  double t11434;
  double t11435;
  double t11436;
  double t11439;
  double t11440;
  double t11443;
  double t11444;
  double t11445;
  double t11446;
  double t11447;
  double t11448;
  double t11451;
  double t11456;
  double t11457;
  double t11461;
  double t11485;
  double t11486;
  double t11463;
  double t11488;
  double t11489;
  double t11465;
  double t11353;
  double t11354;
  double t11356;
  double t11357;
  double t11358;
  double t11500;
  double t11501;
  double t11502;
  double t11503;
  double t11504;
  double t11369;
  double t11370;
  double t11396;
  double t11397;
  double t11398;
  double t11399;
  double t11400;
  double t11401;
  double t11402;
  double t11403;
  double t11404;
  double t11423;
  double t11523;
  double t11524;
  double t11525;
  double t11505;
  double t11506;
  double t11507;
  double t11510;
  double t11511;
  double t11514;
  double t11515;
  double t11516;
  double t11517;
  double t11518;
  double t11519;
  double t11522;
  double t11527;
  double t11528;
  double t11532;
  double t11556;
  double t11557;
  double t11534;
  double t11559;
  double t11560;
  double t11536;
  double t3816;
  double t4860;
  double t4892;
  double t5075;
  double t11079;
  double t11127;
  double t11180;
  double t11199;
  double t11205;
  double t11206;
  double t11210;
  double t11213;
  double t11231;
  double t11235;
  double t11258;
  double t11261;
  double t11262;
  double t4832;
  double t4862;
  double t4919;
  double t11389;
  double t11391;
  double t11135;
  double t11408;
  double t11410;
  double t11386;
  double t11387;
  double t11393;
  double t11394;
  double t11405;
  double t11406;
  double t11412;
  double t11413;
  double t11388;
  double t11390;
  double t11392;
  double t11395;
  double t11407;
  double t11409;
  double t11411;
  double t11414;
  double t11415;
  double t11263;
  double t11633;
  double t11644;
  double t11449;
  double t11653;
  double t11455;
  double t11458;
  double t11459;
  double t11462;
  double t11464;
  double t11466;
  double t11662;
  double t11475;
  double t11476;
  double t11477;
  double t11663;
  double t11471;
  double t11472;
  double t11473;
  double t11664;
  double t11667;
  double t11668;
  double t11483;
  double t11672;
  double t11487;
  double t11490;
  double t11491;
  double t11674;
  double t11493;
  double t11494;
  double t11495;
  double t11639;
  double t11647;
  double t11520;
  double t11656;
  double t11526;
  double t11529;
  double t11530;
  double t11533;
  double t11535;
  double t11537;
  double t11691;
  double t11546;
  double t11547;
  double t11548;
  double t11692;
  double t11542;
  double t11543;
  double t11544;
  double t11693;
  double t11696;
  double t11697;
  double t11554;
  double t11701;
  double t11558;
  double t11561;
  double t11562;
  double t11703;
  double t11564;
  double t11565;
  double t11566;
  double t11580;
  double t11581;
  double t11582;
  double t11583;
  double t11584;
  double t11585;
  double t11586;
  double t11587;
  double t11588;
  double t11571;
  double t11572;
  double t11419;
  double t11421;
  double t11422;
  double t11424;
  double t11425;
  double t11426;
  double t11349;
  double t11350;
  double t11351;
  double t11359;
  double t11360;
  double t11361;
  double t11269;
  double t11286;
  double t11290;
  double t11298;
  double t11313;
  double t11317;
  double t11318;
  double t11614;
  double t11615;
  double t11616;
  double t11617;
  double t11618;
  double t11619;
  double t11620;
  double t11621;
  double t11654;
  double t11655;
  double t11657;
  double t11658;
  double t11659;
  double t11673;
  double t11675;
  double t11676;
  double t11460;
  double t11467;
  double t11468;
  double t11686;
  double t11687;
  double t11688;
  double t11492;
  double t11496;
  double t11497;
  double t11748;
  double t11749;
  double t11750;
  double t11751;
  double t11752;
  double t11753;
  double t11754;
  double t11755;
  double t11756;
  double t11757;
  double t11758;
  double t11759;
  double t11760;
  double t11761;
  double t11762;
  double t11763;
  double t11702;
  double t11704;
  double t11705;
  double t11531;
  double t11538;
  double t11539;
  double t11715;
  double t11716;
  double t11717;
  double t11563;
  double t11567;
  double t11568;
  double t11589;
  double t11590;
  double t11591;
  double t11592;
  double t11593;
  double t11594;
  double t11595;
  double t11596;
  double t11723;
  double t11725;
  double t11727;
  double t11729;
  double t11731;
  double t11733;
  double t11807;
  double t11319;
  double t11324;
  double t11328;
  double t11329;
  double t11622;
  double t11623;
  double t11624;
  double t11625;
  double t11736;
  double t11737;
  double t11738;
  double t11739;
  double t11634;
  double t11635;
  double t11636;
  double t11665;
  double t11437;
  double t11768;
  double t11769;
  double t11770;
  double t11679;
  double t11680;
  double t11681;
  double t11474;
  double t11478;
  double t11479;
  double t11780;
  double t11781;
  double t11782;
  double t11783;
  double t11784;
  double t11597;
  double t11598;
  double t11599;
  double t11600;
  double t11840;
  double t11841;
  double t11842;
  double t11843;
  double t11862;
  double t11864;
  double t11330;
  double t11626;
  double t11740;
  double t11741;
  double t11867;
  double t11868;
  double t11894;
  double t11895;
  double t11601;
  double t11721;
  double t11844;
  double t11845;
  double t11888;
  double t11889;
  double t11331;
  double t11336;
  double t11340;
  double t11341;
  double t11627;
  double t11628;
  double t11629;
  double t11630;
  double t11742;
  double t11743;
  double t11744;
  double t11745;
  double t11640;
  double t11641;
  double t11642;
  double t11694;
  double t11508;
  double t11794;
  double t11795;
  double t11796;
  double t11806;
  double t11808;
  double t11809;
  double t11810;
  double t11811;
  double t11812;
  double t11813;
  double t11814;
  double t11815;
  double t11816;
  double t11817;
  double t11818;
  double t11819;
  double t11708;
  double t11709;
  double t11710;
  double t11545;
  double t11549;
  double t11550;
  double t11820;
  double t11821;
  double t11822;
  double t11823;
  double t11824;
  double t11602;
  double t11603;
  double t11604;
  double t11605;
  double t11846;
  double t11847;
  double t11848;
  double t11849;
  double t11900;
  double t11902;
  double t11852;
  double t11853;
  double t11854;
  double t11855;
  double t11856;
  double t11857;
  double t11858;
  double t11859;
  double t11860;
  double t11861;
  double t11342;
  double t11631;
  double t11746;
  double t11747;
  double t11905;
  double t11906;
  double t11932;
  double t11933;
  double t11606;
  double t11722;
  double t11850;
  double t11851;
  double t11926;
  double t11927;
  double t11937;
  t4857 = Sin(var2[2]);
  t3338 = Cos(var2[2]);
  t4865 = Cos(var2[3]);
  t4868 = Sin(var2[3]);
  t4938 = Cos(var2[4]);
  t4943 = Sin(var2[4]);
  t5043 = t4865*t4938;
  t5050 = -1.*t4868*t4943;
  t5058 = t5043 + t5050;
  t11084 = Cos(var2[5]);
  t11120 = Sin(var2[5]);
  t11136 = Cos(var2[6]);
  t11138 = Sin(var2[6]);
  t11159 = t11084*t11136;
  t11160 = -1.*t11120*t11138;
  t11169 = t11159 + t11160;
  t4907 = t3338*t4865;
  t4908 = -1.*t4857*t4868;
  t4910 = t4907 + t4908;
  t4866 = t4865*t4857;
  t4874 = t3338*t4868;
  t4885 = t4866 + t4874;
  t4939 = -1.*t4938*t4868;
  t4949 = -1.*t4865*t4943;
  t4954 = t4939 + t4949;
  t5042 = t4857*t4954;
  t5072 = t3338*t5058;
  t5074 = t5042 + t5072;
  t8354 = t4938*t4868;
  t8355 = t4865*t4943;
  t8568 = t8354 + t8355;
  t11048 = t3338*t8568;
  t11049 = t4857*t5058;
  t11063 = t11048 + t11049;
  t11129 = t3338*t11084;
  t11130 = -1.*t4857*t11120;
  t11131 = t11129 + t11130;
  t11111 = t11084*t4857;
  t11123 = t3338*t11120;
  t11126 = t11111 + t11123;
  t11137 = -1.*t11136*t11120;
  t11139 = -1.*t11084*t11138;
  t11149 = t11137 + t11139;
  t11153 = t4857*t11149;
  t11173 = t3338*t11169;
  t11179 = t11153 + t11173;
  t11185 = t11136*t11120;
  t11186 = t11084*t11138;
  t11187 = t11185 + t11186;
  t11192 = t3338*t11187;
  t11193 = t4857*t11169;
  t11198 = t11192 + t11193;
  t11270 = -1.*t4938;
  t11271 = 1. + t11270;
  t11272 = 0.4*t11271;
  t11273 = 0.64*t4938;
  t11274 = t11272 + t11273;
  t11275 = t11274*t4868;
  t11278 = 0.24*t4865*t4943;
  t11279 = t11275 + t11278;
  t11281 = t4865*t11274;
  t11282 = -0.24*t4868*t4943;
  t11283 = t11281 + t11282;
  t11299 = -1.*t11136;
  t11300 = 1. + t11299;
  t11301 = 0.4*t11300;
  t11302 = 0.64*t11136;
  t11303 = t11301 + t11302;
  t11304 = t11303*t11120;
  t11305 = 0.24*t11084*t11138;
  t11306 = t11304 + t11305;
  t11308 = t11084*t11303;
  t11309 = -0.24*t11120*t11138;
  t11310 = t11308 + t11309;
  t11207 = t3338*t4954;
  t11208 = -1.*t4857*t5058;
  t11209 = t11207 + t11208;
  t11202 = -1.*t4865*t4857;
  t11203 = -1.*t3338*t4868;
  t11204 = t11202 + t11203;
  t11325 = t11274*t4943;
  t11326 = -0.24*t4938*t4943;
  t11327 = t11325 + t11326;
  t11211 = -1.*t4857*t8568;
  t11212 = t11211 + t5072;
  t11320 = t11274*t4938;
  t11321 = Power(t4943,2);
  t11322 = 0.24*t11321;
  t11323 = t11320 + t11322;
  t11242 = t3338*t11149;
  t11246 = -1.*t4857*t11169;
  t11253 = t11242 + t11246;
  t11222 = -1.*t11084*t4857;
  t11223 = -1.*t3338*t11120;
  t11226 = t11222 + t11223;
  t11337 = t11303*t11138;
  t11338 = -0.24*t11136*t11138;
  t11339 = t11337 + t11338;
  t11259 = -1.*t4857*t11187;
  t11260 = t11259 + t11173;
  t11332 = t11303*t11136;
  t11333 = Power(t11138,2);
  t11334 = 0.24*t11333;
  t11335 = t11332 + t11334;
  t4911 = Power(t4910,2);
  t11134 = Power(t11131,2);
  t11264 = Power(t4865,2);
  t11265 = 0.11*t11264;
  t11266 = Power(t4868,2);
  t11267 = 0.11*t11266;
  t11268 = t11265 + t11267;
  t11280 = -1.*t11279*t5058;
  t11284 = -1.*t4954*t11283;
  t11285 = t11280 + t11284;
  t11287 = t11279*t8568;
  t11288 = t5058*t11283;
  t11289 = t11287 + t11288;
  t11291 = Power(t11084,2);
  t11292 = 0.11*t11291;
  t11293 = Power(t11120,2);
  t11294 = 0.11*t11293;
  t11297 = t11292 + t11294;
  t11307 = -1.*t11306*t11169;
  t11311 = -1.*t11149*t11310;
  t11312 = t11307 + t11311;
  t11314 = t11306*t11187;
  t11315 = t11169*t11310;
  t11316 = t11314 + t11315;
  t11343 = -1.*var1[4];
  t11344 = var3[4] + t11343;
  t11346 = -1.*var1[3];
  t11347 = var3[3] + t11346;
  t11348 = 0.748*t11204;
  t11429 = -1.*t4865*t4938;
  t11430 = t4868*t4943;
  t11431 = t11429 + t11430;
  t11432 = t4857*t11431;
  t11433 = t11207 + t11432;
  t11363 = -1.*var1[0];
  t11364 = var3[0] + t11363;
  t11365 = 13.6*t11204*t4910;
  t11366 = 13.6*t4885*t4910;
  t11375 = -1.*var1[1];
  t11376 = var3[1] + t11375;
  t11377 = Power(t11204,2);
  t11378 = 6.8*t11377;
  t11379 = 6.8*t11204*t4885;
  t11380 = 6.8*t4911;
  t11381 = -1.*t3338*t4865;
  t11382 = t4857*t4868;
  t11383 = t11381 + t11382;
  t11384 = 6.8*t4910*t11383;
  t11385 = -1.*t4857*t4954;
  t11417 = -1.*var1[2];
  t11418 = var3[2] + t11417;
  t11420 = 6.8*t11204*t11268;
  t11452 = -1.*t11274*t4868;
  t11453 = -0.24*t4865*t4943;
  t11454 = t11452 + t11453;
  t11434 = 0.768*t11344*t11433;
  t11435 = 3.2*t11327*t5074;
  t11436 = 3.2*t11323*t11433;
  t11439 = 6.4*t5074*t11063;
  t11440 = 6.4*t5074*t11433;
  t11443 = 3.2*t5074*t11212;
  t11444 = 3.2*t11209*t11063;
  t11445 = t3338*t11431;
  t11446 = t11385 + t11445;
  t11447 = 3.2*t5074*t11446;
  t11448 = 3.2*t11209*t11433;
  t11451 = 3.2*t5074*t11285;
  t11456 = t11279*t5058;
  t11457 = t4954*t11283;
  t11461 = 3.2*t11289*t11433;
  t11485 = -0.24*t4938*t4868;
  t11486 = t11485 + t11453;
  t11463 = -1.*t4954*t11279;
  t11488 = 0.24*t4865*t4938;
  t11489 = t11488 + t11282;
  t11465 = -1.*t11283*t11431;
  t11353 = -1.*var1[6];
  t11354 = var3[6] + t11353;
  t11356 = -1.*var1[5];
  t11357 = var3[5] + t11356;
  t11358 = 0.748*t11226;
  t11500 = -1.*t11084*t11136;
  t11501 = t11120*t11138;
  t11502 = t11500 + t11501;
  t11503 = t4857*t11502;
  t11504 = t11242 + t11503;
  t11369 = 13.6*t11226*t11131;
  t11370 = 13.6*t11126*t11131;
  t11396 = Power(t11226,2);
  t11397 = 6.8*t11396;
  t11398 = 6.8*t11226*t11126;
  t11399 = 6.8*t11134;
  t11400 = -1.*t3338*t11084;
  t11401 = t4857*t11120;
  t11402 = t11400 + t11401;
  t11403 = 6.8*t11131*t11402;
  t11404 = -1.*t4857*t11149;
  t11423 = 6.8*t11226*t11297;
  t11523 = -1.*t11303*t11120;
  t11524 = -0.24*t11084*t11138;
  t11525 = t11523 + t11524;
  t11505 = 0.768*t11354*t11504;
  t11506 = 3.2*t11339*t11179;
  t11507 = 3.2*t11335*t11504;
  t11510 = 6.4*t11179*t11198;
  t11511 = 6.4*t11179*t11504;
  t11514 = 3.2*t11179*t11260;
  t11515 = 3.2*t11253*t11198;
  t11516 = t3338*t11502;
  t11517 = t11404 + t11516;
  t11518 = 3.2*t11179*t11517;
  t11519 = 3.2*t11253*t11504;
  t11522 = 3.2*t11179*t11312;
  t11527 = t11306*t11169;
  t11528 = t11149*t11310;
  t11532 = 3.2*t11316*t11504;
  t11556 = -0.24*t11136*t11120;
  t11557 = t11556 + t11524;
  t11534 = -1.*t11149*t11306;
  t11559 = 0.24*t11084*t11136;
  t11560 = t11559 + t11309;
  t11536 = -1.*t11310*t11502;
  t3816 = Power(t3338,2);
  t4860 = Power(t4857,2);
  t4892 = Power(t4885,2);
  t5075 = Power(t5074,2);
  t11079 = Power(t11063,2);
  t11127 = Power(t11126,2);
  t11180 = Power(t11179,2);
  t11199 = Power(t11198,2);
  t11205 = -6.8*t11204*t4910;
  t11206 = -6.8*t4885*t4910;
  t11210 = -3.2*t5074*t11209;
  t11213 = -3.2*t11212*t11063;
  t11231 = -6.8*t11226*t11131;
  t11235 = -6.8*t11126*t11131;
  t11258 = -3.2*t11179*t11253;
  t11261 = -3.2*t11260*t11198;
  t11262 = t11205 + t11206 + t11210 + t11213 + t11231 + t11235 + t11258 + t11261;
  t4832 = -12.*t3816;
  t4862 = -12.*t4860;
  t4919 = -6.8*t4911;
  t11389 = Power(t11212,2);
  t11391 = Power(t11209,2);
  t11135 = -6.8*t11134;
  t11408 = Power(t11260,2);
  t11410 = Power(t11253,2);
  t11386 = -1.*t3338*t5058;
  t11387 = t11385 + t11386;
  t11393 = -1.*t3338*t8568;
  t11394 = t11393 + t11208;
  t11405 = -1.*t3338*t11169;
  t11406 = t11404 + t11405;
  t11412 = -1.*t3338*t11187;
  t11413 = t11412 + t11246;
  t11388 = 3.2*t11387*t5074;
  t11390 = 3.2*t11389;
  t11392 = 3.2*t11391;
  t11395 = 3.2*t11394*t11063;
  t11407 = 3.2*t11406*t11179;
  t11409 = 3.2*t11408;
  t11411 = 3.2*t11410;
  t11414 = 3.2*t11413*t11198;
  t11415 = t11378 + t11379 + t11380 + t11384 + t11388 + t11390 + t11392 + t11395 + t11397 + t11398 + t11399 + t11403 + t11407 + t11409 + t11411 + t11414;
  t11263 = -2.88*t3338;
  t11633 = 0.748*t11383;
  t11644 = 13.6*t11204*t11383;
  t11449 = t11378 + t11379 + t11380 + t11384 + t11443 + t11444 + t11447 + t11448;
  t11653 = 6.8*t11383*t11268;
  t11455 = t11454*t5058;
  t11458 = t8568*t11283;
  t11459 = t11455 + t11456 + t11457 + t11458;
  t11462 = -1.*t4954*t11454;
  t11464 = -1.*t5058*t11283;
  t11466 = t11462 + t11463 + t11464 + t11465;
  t11662 = 0.768*t11344*t11446;
  t11475 = Power(t4938,2);
  t11476 = -0.24*t11475;
  t11477 = t11320 + t11476;
  t11663 = 3.2*t11327*t11209;
  t11471 = -1.*t11274*t4943;
  t11472 = 0.24*t4938*t4943;
  t11473 = t11471 + t11472;
  t11664 = 3.2*t11323*t11446;
  t11667 = 6.4*t11212*t11209;
  t11668 = 6.4*t11209*t11446;
  t11483 = t11443 + t11444 + t11447 + t11448;
  t11672 = 3.2*t11209*t11285;
  t11487 = t11486*t5058;
  t11490 = t8568*t11489;
  t11491 = t11487 + t11456 + t11457 + t11490;
  t11674 = 3.2*t11289*t11446;
  t11493 = -1.*t4954*t11486;
  t11494 = -1.*t5058*t11489;
  t11495 = t11493 + t11463 + t11494 + t11465;
  t11639 = 0.748*t11402;
  t11647 = 13.6*t11226*t11402;
  t11520 = t11397 + t11398 + t11399 + t11403 + t11514 + t11515 + t11518 + t11519;
  t11656 = 6.8*t11402*t11297;
  t11526 = t11525*t11169;
  t11529 = t11187*t11310;
  t11530 = t11526 + t11527 + t11528 + t11529;
  t11533 = -1.*t11149*t11525;
  t11535 = -1.*t11169*t11310;
  t11537 = t11533 + t11534 + t11535 + t11536;
  t11691 = 0.768*t11354*t11517;
  t11546 = Power(t11136,2);
  t11547 = -0.24*t11546;
  t11548 = t11332 + t11547;
  t11692 = 3.2*t11339*t11253;
  t11542 = -1.*t11303*t11138;
  t11543 = 0.24*t11136*t11138;
  t11544 = t11542 + t11543;
  t11693 = 3.2*t11335*t11517;
  t11696 = 6.4*t11260*t11253;
  t11697 = 6.4*t11253*t11517;
  t11554 = t11514 + t11515 + t11518 + t11519;
  t11701 = 3.2*t11253*t11312;
  t11558 = t11557*t11169;
  t11561 = t11187*t11560;
  t11562 = t11558 + t11527 + t11528 + t11561;
  t11703 = 3.2*t11316*t11517;
  t11564 = -1.*t11149*t11557;
  t11565 = -1.*t11169*t11560;
  t11566 = t11564 + t11534 + t11565 + t11536;
  t11580 = 6.8*t11204*t4910;
  t11581 = 6.8*t4885*t4910;
  t11582 = 3.2*t5074*t11209;
  t11583 = 3.2*t11212*t11063;
  t11584 = 6.8*t11226*t11131;
  t11585 = 6.8*t11126*t11131;
  t11586 = 3.2*t11179*t11253;
  t11587 = 3.2*t11260*t11198;
  t11588 = t11580 + t11581 + t11582 + t11583 + t11584 + t11585 + t11586 + t11587;
  t11571 = 12.*t3816;
  t11572 = 12.*t4860;
  t11419 = -2.88*t4857;
  t11421 = 3.2*t11212*t11285;
  t11422 = 3.2*t11209*t11289;
  t11424 = 3.2*t11260*t11312;
  t11425 = 3.2*t11253*t11316;
  t11426 = t11419 + t11420 + t11421 + t11422 + t11423 + t11424 + t11425;
  t11349 = 3.2*t11327*t11212;
  t11350 = 3.2*t11323*t11209;
  t11351 = t11348 + t11349 + t11350;
  t11359 = 3.2*t11339*t11260;
  t11360 = 3.2*t11335*t11253;
  t11361 = t11358 + t11359 + t11360;
  t11269 = -6.8*t4910*t11268;
  t11286 = -3.2*t11063*t11285;
  t11290 = -3.2*t5074*t11289;
  t11298 = -6.8*t11131*t11297;
  t11313 = -3.2*t11198*t11312;
  t11317 = -3.2*t11179*t11316;
  t11318 = t11263 + t11269 + t11286 + t11290 + t11298 + t11313 + t11317;
  t11614 = 2.88*t4857;
  t11615 = -6.8*t11204*t11268;
  t11616 = -3.2*t11212*t11285;
  t11617 = -3.2*t11209*t11289;
  t11618 = -6.8*t11226*t11297;
  t11619 = -3.2*t11260*t11312;
  t11620 = -3.2*t11253*t11316;
  t11621 = t11614 + t11615 + t11616 + t11617 + t11618 + t11619 + t11620;
  t11654 = 3.2*t11394*t11285;
  t11655 = 3.2*t11387*t11289;
  t11657 = 3.2*t11413*t11312;
  t11658 = 3.2*t11406*t11316;
  t11659 = t11263 + t11653 + t11654 + t11655 + t11656 + t11657 + t11658;
  t11673 = 3.2*t11209*t11459;
  t11675 = 3.2*t11212*t11466;
  t11676 = t11653 + t11672 + t11673 + t11674 + t11675;
  t11460 = 3.2*t5074*t11459;
  t11467 = 3.2*t11063*t11466;
  t11468 = t11420 + t11451 + t11460 + t11461 + t11467;
  t11686 = 3.2*t11209*t11491;
  t11687 = 3.2*t11212*t11495;
  t11688 = t11672 + t11686 + t11674 + t11687;
  t11492 = 3.2*t5074*t11491;
  t11496 = 3.2*t11063*t11495;
  t11497 = t11451 + t11492 + t11461 + t11496;
  t11748 = 0.4*t11300*t11402;
  t11749 = -0.4*t11126*t11138;
  t11750 = t11136*t11402;
  t11751 = t11126*t11138;
  t11752 = t11750 + t11751;
  t11753 = 0.8*t11752;
  t11754 = t11748 + t11749 + t11753;
  t11755 = -1.*var4[2]*t11754;
  t11756 = 0.4*t11300*t11226;
  t11757 = -0.4*t11402*t11138;
  t11758 = t11136*t11226;
  t11759 = t11402*t11138;
  t11760 = t11758 + t11759;
  t11761 = 0.8*t11760;
  t11762 = t11756 + t11757 + t11761;
  t11763 = -1.*var4[0]*t11762;
  t11702 = 3.2*t11253*t11530;
  t11704 = 3.2*t11260*t11537;
  t11705 = t11656 + t11701 + t11702 + t11703 + t11704;
  t11531 = 3.2*t11179*t11530;
  t11538 = 3.2*t11198*t11537;
  t11539 = t11423 + t11522 + t11531 + t11532 + t11538;
  t11715 = 3.2*t11253*t11562;
  t11716 = 3.2*t11260*t11566;
  t11717 = t11701 + t11715 + t11703 + t11716;
  t11563 = 3.2*t11179*t11562;
  t11567 = 3.2*t11198*t11566;
  t11568 = t11522 + t11563 + t11532 + t11567;
  t11589 = 2.88*t3338;
  t11590 = 6.8*t4910*t11268;
  t11591 = 3.2*t11063*t11285;
  t11592 = 3.2*t5074*t11289;
  t11593 = 6.8*t11131*t11297;
  t11594 = 3.2*t11198*t11312;
  t11595 = 3.2*t11179*t11316;
  t11596 = t11589 + t11590 + t11591 + t11592 + t11593 + t11594 + t11595;
  t11723 = Power(t11268,2);
  t11725 = Power(t11285,2);
  t11727 = Power(t11289,2);
  t11729 = Power(t11297,2);
  t11731 = Power(t11312,2);
  t11733 = Power(t11316,2);
  t11807 = 0.4*t11226*t11138;
  t11319 = -0.748*t4910;
  t11324 = -3.2*t11323*t5074;
  t11328 = -3.2*t11327*t11063;
  t11329 = t11319 + t11324 + t11328;
  t11622 = -0.748*t11204;
  t11623 = -3.2*t11327*t11212;
  t11624 = -3.2*t11323*t11209;
  t11625 = t11622 + t11623 + t11624;
  t11736 = -0.748*t11268;
  t11737 = -3.2*t11327*t11285;
  t11738 = -3.2*t11323*t11289;
  t11739 = -0.67 + t11736 + t11737 + t11738;
  t11634 = 3.2*t11323*t11387;
  t11635 = 3.2*t11327*t11394;
  t11636 = t11633 + t11634 + t11635;
  t11665 = t11633 + t11663 + t11664;
  t11437 = t11348 + t11435 + t11436;
  t11768 = 3.2*t11323*t11459;
  t11769 = 3.2*t11327*t11466;
  t11770 = t11768 + t11769;
  t11679 = 3.2*t11477*t11212;
  t11680 = 3.2*t11473*t11209;
  t11681 = t11679 + t11663 + t11680 + t11664;
  t11474 = 3.2*t11473*t5074;
  t11478 = 3.2*t11477*t11063;
  t11479 = t11435 + t11474 + t11478 + t11436;
  t11780 = 3.2*t11477*t11285;
  t11781 = 3.2*t11473*t11289;
  t11782 = 3.2*t11323*t11491;
  t11783 = 3.2*t11327*t11495;
  t11784 = t11780 + t11781 + t11782 + t11783;
  t11597 = 0.748*t4910;
  t11598 = 3.2*t11323*t5074;
  t11599 = 3.2*t11327*t11063;
  t11600 = t11597 + t11598 + t11599;
  t11840 = 0.748*t11268;
  t11841 = 3.2*t11327*t11285;
  t11842 = 3.2*t11323*t11289;
  t11843 = 0.67 + t11840 + t11841 + t11842;
  t11862 = Power(t11327,2);
  t11864 = Power(t11323,2);
  t11330 = -0.768*t5074;
  t11626 = -0.768*t11209;
  t11740 = -0.768*t11289;
  t11741 = -0.2 + t11740;
  t11867 = -0.768*t11323;
  t11868 = -0.2 + t11867;
  t11894 = 0.768*t11376*t11446;
  t11895 = 0.768*t11364*t11433;
  t11601 = 0.768*t5074;
  t11721 = 0.768*t11209;
  t11844 = 0.768*t11289;
  t11845 = 0.2 + t11844;
  t11888 = 0.768*t11323;
  t11889 = 0.2 + t11888;
  t11331 = -0.748*t11131;
  t11336 = -3.2*t11335*t11179;
  t11340 = -3.2*t11339*t11198;
  t11341 = t11331 + t11336 + t11340;
  t11627 = -0.748*t11226;
  t11628 = -3.2*t11339*t11260;
  t11629 = -3.2*t11335*t11253;
  t11630 = t11627 + t11628 + t11629;
  t11742 = -0.748*t11297;
  t11743 = -3.2*t11339*t11312;
  t11744 = -3.2*t11335*t11316;
  t11745 = -0.67 + t11742 + t11743 + t11744;
  t11640 = 3.2*t11335*t11406;
  t11641 = 3.2*t11339*t11413;
  t11642 = t11639 + t11640 + t11641;
  t11694 = t11639 + t11692 + t11693;
  t11508 = t11358 + t11506 + t11507;
  t11794 = 3.2*t11335*t11530;
  t11795 = 3.2*t11339*t11537;
  t11796 = t11794 + t11795;
  t11806 = -0.4*t11136*t11402;
  t11808 = -1.*t11226*t11138;
  t11809 = t11750 + t11808;
  t11810 = 0.8*t11809;
  t11811 = t11806 + t11807 + t11810;
  t11812 = -1.*var4[2]*t11811;
  t11813 = -0.4*t11136*t11226;
  t11814 = 0.4*t11131*t11138;
  t11815 = -1.*t11131*t11138;
  t11816 = t11758 + t11815;
  t11817 = 0.8*t11816;
  t11818 = t11813 + t11814 + t11817;
  t11819 = -1.*var4[0]*t11818;
  t11708 = 3.2*t11548*t11260;
  t11709 = 3.2*t11544*t11253;
  t11710 = t11708 + t11692 + t11709 + t11693;
  t11545 = 3.2*t11544*t11179;
  t11549 = 3.2*t11548*t11198;
  t11550 = t11506 + t11545 + t11549 + t11507;
  t11820 = 3.2*t11548*t11312;
  t11821 = 3.2*t11544*t11316;
  t11822 = 3.2*t11335*t11562;
  t11823 = 3.2*t11339*t11566;
  t11824 = t11820 + t11821 + t11822 + t11823;
  t11602 = 0.748*t11131;
  t11603 = 3.2*t11335*t11179;
  t11604 = 3.2*t11339*t11198;
  t11605 = t11602 + t11603 + t11604;
  t11846 = 0.748*t11297;
  t11847 = 3.2*t11339*t11312;
  t11848 = 3.2*t11335*t11316;
  t11849 = 0.67 + t11846 + t11847 + t11848;
  t11900 = Power(t11339,2);
  t11902 = Power(t11335,2);
  t11852 = -0.4*t11300*t11131;
  t11853 = t11136*t11131;
  t11854 = t11226*t11138;
  t11855 = t11853 + t11854;
  t11856 = -0.8*t11855;
  t11857 = t11852 + t11807 + t11856;
  t11858 = -0.4*t11300*t11226;
  t11859 = 0.4*t11402*t11138;
  t11860 = -0.8*t11760;
  t11861 = t11858 + t11859 + t11860;
  t11342 = -0.768*t11179;
  t11631 = -0.768*t11253;
  t11746 = -0.768*t11316;
  t11747 = -0.2 + t11746;
  t11905 = -0.768*t11335;
  t11906 = -0.2 + t11905;
  t11932 = 0.768*t11376*t11517;
  t11933 = 0.768*t11364*t11504;
  t11606 = 0.768*t11179;
  t11722 = 0.768*t11253;
  t11850 = 0.768*t11316;
  t11851 = 0.2 + t11850;
  t11926 = 0.768*t11335;
  t11927 = 0.2 + t11926;
  t11937 = 0.4*t11136*t11131;
  p_output1[0]=-3.2*t11079 - 6.8*t11127 + t11135 - 3.2*t11180 - 3.2*t11199 + t4832 + t4862 - 6.8*t4892 + t4919 - 3.2*t5075;
  p_output1[1]=t11262;
  p_output1[2]=t11318;
  p_output1[3]=t11329;
  p_output1[4]=t11330;
  p_output1[5]=t11341;
  p_output1[6]=t11342;
  p_output1[7]=0.768*t11209*t11344 + t11347*t11351 + 0.768*t11253*t11354 + t11357*t11361 + t11376*t11415 + t11418*t11426 + t11364*(6.4*t11063*t11212 + 6.4*t11179*t11253 + 6.4*t11198*t11260 + t11365 + t11366 + t11369 + t11370 + 6.4*t11209*t5074);
  p_output1[8]=t11434 + t11347*t11437 + t11364*(t11365 + t11366 + t11439 + t11440) + t11376*t11449 + t11418*t11468;
  p_output1[9]=t11434 + t11364*(t11439 + t11440) + t11347*t11479 + t11376*t11483 + t11418*t11497;
  p_output1[10]=t11505 + t11357*t11508 + t11364*(t11369 + t11370 + t11510 + t11511) + t11376*t11520 + t11418*t11539;
  p_output1[11]=t11505 + t11364*(t11510 + t11511) + t11357*t11550 + t11376*t11554 + t11418*t11568;
  p_output1[12]=3.2*t11079 + 6.8*t11127 + 3.2*t11180 + 3.2*t11199 + t11380 + t11399 + t11571 + t11572 + 6.8*t4892 + 3.2*t5075;
  p_output1[13]=t11588;
  p_output1[14]=t11596;
  p_output1[15]=t11600;
  p_output1[16]=t11601;
  p_output1[17]=t11605;
  p_output1[18]=t11606;
  p_output1[19]=-1.;
  p_output1[20]=t11262;
  p_output1[21]=t11135 - 6.8*t11377 - 3.2*t11389 - 3.2*t11391 - 6.8*t11396 - 3.2*t11408 - 3.2*t11410 + t4832 + t4862 + t4919;
  p_output1[22]=t11621;
  p_output1[23]=t11625;
  p_output1[24]=t11626;
  p_output1[25]=t11630;
  p_output1[26]=t11631;
  p_output1[27]=0.768*t11344*t11387 + 0.768*t11354*t11406 + t11364*t11415 + t11347*t11636 + t11357*t11642 + t11376*(t11365 + t11369 + 6.4*t11209*t11387 + 6.4*t11212*t11394 + 6.4*t11253*t11406 + 6.4*t11260*t11413 + t11644 + t11647) + t11418*t11659;
  p_output1[28]=t11364*t11449 + t11662 + t11347*t11665 + t11376*(t11365 + t11644 + t11667 + t11668) + t11418*t11676;
  p_output1[29]=t11364*t11483 + t11662 + t11376*(t11667 + t11668) + t11347*t11681 + t11418*t11688;
  p_output1[30]=t11364*t11520 + t11691 + t11357*t11694 + t11376*(t11369 + t11647 + t11696 + t11697) + t11418*t11705;
  p_output1[31]=t11364*t11554 + t11691 + t11376*(t11696 + t11697) + t11357*t11710 + t11418*t11717;
  p_output1[32]=t11588;
  p_output1[33]=t11378 + t11380 + t11390 + t11392 + t11397 + t11399 + t11409 + t11411 + t11571 + t11572;
  p_output1[34]=t11426;
  p_output1[35]=t11351;
  p_output1[36]=t11721;
  p_output1[37]=t11361;
  p_output1[38]=t11722;
  p_output1[39]=-1.;
  p_output1[40]=t11318;
  p_output1[41]=t11621;
  p_output1[42]=-3.3612 - 6.8*t11723 - 3.2*t11725 - 3.2*t11727 - 6.8*t11729 - 3.2*t11731 - 3.2*t11733;
  p_output1[43]=t11739;
  p_output1[44]=t11741;
  p_output1[45]=t11745;
  p_output1[46]=t11747;
  p_output1[47]=t11364*t11426 + t11376*t11659 + t11755 + t11763;
  p_output1[48]=0.768*t11344*t11459 + t11418*(6.4*t11289*t11459 + 6.4*t11285*t11466) + t11364*t11468 + t11376*t11676 + t11347*t11770;
  p_output1[49]=0.768*t11344*t11491 + t11418*(6.4*t11289*t11491 + 6.4*t11285*t11495) + t11364*t11497 + t11376*t11688 + t11347*t11784;
  p_output1[50]=0.768*t11354*t11530 + t11418*(6.4*t11316*t11530 + 6.4*t11312*t11537) + t11364*t11539 + t11376*t11705 + t11755 + t11763 + t11357*t11796;
  p_output1[51]=0.768*t11354*t11562 + t11418*(6.4*t11316*t11562 + 6.4*t11312*t11566) + t11364*t11568 + t11376*t11717 + t11812 + t11819 + t11357*t11824;
  p_output1[52]=t11596;
  p_output1[53]=t11426;
  p_output1[54]=3.3612 + 6.8*t11723 + 3.2*t11725 + 3.2*t11727 + 6.8*t11729 + 3.2*t11731 + 3.2*t11733;
  p_output1[55]=t11843;
  p_output1[56]=t11845;
  p_output1[57]=t11849;
  p_output1[58]=t11851;
  p_output1[59]=t11857;
  p_output1[60]=t11861;
  p_output1[61]=t11329;
  p_output1[62]=t11625;
  p_output1[63]=t11739;
  p_output1[64]=-1.58228 - 3.2*t11862 - 3.2*t11864;
  p_output1[65]=t11868;
  p_output1[66]=t11351*t11364 + t11376*t11636;
  p_output1[67]=t11364*t11437 + t11376*t11665 + t11418*t11770;
  p_output1[68]=0.768*t11344*t11473 + t11347*(6.4*t11323*t11473 + 6.4*t11327*t11477) + t11364*t11479 + t11376*t11681 + t11418*t11784;
  p_output1[69]=t11600;
  p_output1[70]=t11351;
  p_output1[71]=t11843;
  p_output1[72]=1.58228 + 3.2*t11862 + 3.2*t11864;
  p_output1[73]=t11889;
  p_output1[74]=t11330;
  p_output1[75]=t11626;
  p_output1[76]=t11741;
  p_output1[77]=t11868;
  p_output1[78]=-1.2143199999999998;
  p_output1[79]=0.768*t11209*t11364 + 0.768*t11376*t11387;
  p_output1[80]=0.768*t11418*t11459 + t11894 + t11895;
  p_output1[81]=0.768*t11347*t11473 + 0.768*t11418*t11491 + t11894 + t11895;
  p_output1[82]=t11601;
  p_output1[83]=t11721;
  p_output1[84]=t11845;
  p_output1[85]=t11889;
  p_output1[86]=1.2143199999999998;
  p_output1[87]=t11341;
  p_output1[88]=t11630;
  p_output1[89]=t11745;
  p_output1[90]=-1.58228 - 3.2*t11900 - 3.2*t11902;
  p_output1[91]=t11906;
  p_output1[92]=t11361*t11364 + t11376*t11642 + t11755 + t11763;
  p_output1[93]=t11364*t11508 + t11376*t11694 + t11755 + t11763 + t11418*t11796;
  p_output1[94]=0.768*t11354*t11544 + t11357*(6.4*t11335*t11544 + 6.4*t11339*t11548) + t11364*t11550 + t11376*t11710 + t11812 + t11819 + t11418*t11824;
  p_output1[95]=t11605;
  p_output1[96]=t11361;
  p_output1[97]=t11849;
  p_output1[98]=1.58228 + 3.2*t11900 + 3.2*t11902;
  p_output1[99]=t11927;
  p_output1[100]=t11857;
  p_output1[101]=t11861;
  p_output1[102]=t11342;
  p_output1[103]=t11631;
  p_output1[104]=t11747;
  p_output1[105]=t11906;
  p_output1[106]=-1.2143199999999998;
  p_output1[107]=0.768*t11253*t11364 + 0.768*t11376*t11406 + t11812 + t11819;
  p_output1[108]=0.768*t11418*t11530 + t11812 + t11819 + t11932 + t11933;
  p_output1[109]=0.768*t11357*t11544 + 0.768*t11418*t11562 + t11932 + t11933 - 1.*(0.4*t11126*t11136 + t11814 + 0.8*(-1.*t11126*t11136 + t11815))*var4[0] - 1.*(t11807 + 0.8*(-1.*t11131*t11136 + t11808) + t11937)*var4[2];
  p_output1[110]=t11606;
  p_output1[111]=t11722;
  p_output1[112]=t11851;
  p_output1[113]=t11927;
  p_output1[114]=1.2143199999999998;
  p_output1[115]=t11749 - 0.8*(-1.*t11126*t11138 + t11853) + t11937;
  p_output1[116]=-0.4*t11131*t11138 + 0.4*t11136*t11226 - 0.8*t11816;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapleftLand.hh"

namespace leftLand
{

void J_dxDiscreteMapleftLand_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
