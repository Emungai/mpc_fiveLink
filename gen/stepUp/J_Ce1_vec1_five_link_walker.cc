/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:39:18 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2774;
  double t2756;
  double t2761;
  double t2775;
  double t2754;
  double t2795;
  double t2796;
  double t2801;
  double t2811;
  double t2814;
  double t2771;
  double t2778;
  double t2781;
  double t2818;
  double t2821;
  double t2827;
  double t2787;
  double t2815;
  double t2836;
  double t2838;
  double t2839;
  double t2851;
  double t2853;
  double t2854;
  double t2913;
  double t2919;
  double t2920;
  double t2947;
  double t2949;
  double t2954;
  double t2828;
  double t2832;
  double t2833;
  double t2840;
  double t2842;
  double t2843;
  double t2847;
  double t2848;
  double t2855;
  double t2857;
  double t2858;
  double t2859;
  double t2866;
  double t2886;
  double t2929;
  double t2933;
  double t2939;
  double t2940;
  double t2944;
  double t2945;
  double t2955;
  double t2958;
  double t2959;
  double t2962;
  double t2966;
  double t2967;
  double t3007;
  double t3015;
  double t3016;
  double t3018;
  double t3020;
  double t3038;
  double t3043;
  double t3044;
  double t3070;
  double t3072;
  double t3071;
  double t3075;
  double t3078;
  double t3087;
  double t3092;
  double t3093;
  double t3097;
  double t3100;
  double t3101;
  double t3102;
  double t3130;
  double t3096;
  double t3098;
  double t3103;
  double t3104;
  double t3125;
  double t3132;
  double t3146;
  double t3148;
  double t3149;
  double t3086;
  double t3166;
  double t3167;
  double t3170;
  double t3025;
  double t3026;
  double t3029;
  double t3030;
  double t3033;
  double t3037;
  double t3045;
  double t3046;
  double t3057;
  double t3058;
  double t3068;
  double t3069;
  double t3161;
  double t3162;
  double t3171;
  double t3172;
  double t3178;
  double t3179;
  double t3183;
  double t3184;
  double t2972;
  double t3200;
  double t3201;
  double t3207;
  double t3208;
  double t3212;
  double t3213;
  double t3214;
  double t3215;
  double t2901;
  double t3219;
  double t3220;
  double t3190;
  double t3235;
  double t3236;
  double t3237;
  double t3238;
  double t3239;
  double t3245;
  double t3246;
  double t3247;
  double t3185;
  double t3248;
  double t3249;
  double t3261;
  double t3262;
  double t3265;
  double t3271;
  double t3276;
  double t3277;
  double t3282;
  double t3283;
  double t3274;
  double t3275;
  double t3278;
  double t3279;
  double t3280;
  double t3272;
  double t3263;
  double t3286;
  double t3284;
  double t3000;
  double t3001;
  double t2974;
  double t2975;
  double t3306;
  double t3307;
  double t3308;
  double t3309;
  double t3310;
  double t3311;
  double t3312;
  double t3313;
  double t3314;
  double t3317;
  double t3318;
  double t3319;
  double t3320;
  double t3094;
  double t3095;
  double t3143;
  double t3145;
  double t3339;
  double t3333;
  double t3334;
  double t3335;
  double t3336;
  double t3346;
  double t3347;
  double t3348;
  double t3349;
  double t3350;
  double t3351;
  double t3352;
  double t3353;
  double t3321;
  double t3363;
  double t3366;
  double t3367;
  double t3368;
  double t3369;
  double t3370;
  double t3315;
  double t3371;
  double t3372;
  double t3356;
  double t3382;
  double t3383;
  double t3384;
  double t3385;
  double t3386;
  double t3387;
  double t3354;
  double t3388;
  double t3389;
  double t3398;
  double t3399;
  double t3400;
  double t3401;
  double t3404;
  double t3405;
  double t3406;
  double t3407;
  double t2987;
  double t2998;
  double t3113;
  double t3137;
  double t3414;
  double t3415;
  double t3416;
  double t3417;
  double t3424;
  double t3425;
  double t3426;
  double t3427;
  double t3410;
  double t3411;
  double t3412;
  double t3413;
  double t3418;
  double t3419;
  double t3420;
  double t3421;
  double t3422;
  double t3408;
  double t3402;
  double t3430;
  double t3428;
  double t3444;
  double t3445;
  double t3446;
  double t3447;
  double t3448;
  double t3449;
  double t3450;
  double t3451;
  double t3453;
  double t3454;
  double t3455;
  double t3459;
  double t3460;
  double t3461;
  double t3452;
  double t3456;
  double t3457;
  double t3458;
  double t3463;
  double t3464;
  double t3468;
  double t3469;
  double t3470;
  double t3471;
  double t3480;
  double t3481;
  double t3473;
  double t3483;
  double t3484;
  double t3475;
  double t3438;
  double t3439;
  double t3440;
  double t3441;
  double t3442;
  double t3443;
  double t3503;
  double t3504;
  double t3505;
  double t3506;
  double t3507;
  double t3508;
  double t3509;
  double t3510;
  double t3512;
  double t3513;
  double t3514;
  double t3497;
  double t3498;
  double t3499;
  double t3500;
  double t3501;
  double t3502;
  double t3511;
  double t3515;
  double t3516;
  double t3518;
  double t3519;
  double t3520;
  double t3525;
  double t3526;
  double t3527;
  double t3524;
  double t3529;
  double t3530;
  double t3534;
  double t3543;
  double t3544;
  double t3536;
  double t3546;
  double t3547;
  double t3538;
  double t3462;
  double t3465;
  double t3466;
  double t3467;
  double t3472;
  double t3474;
  double t3476;
  double t3477;
  double t3478;
  double t3566;
  double t3567;
  double t3568;
  double t3560;
  double t3561;
  double t3482;
  double t3485;
  double t3486;
  double t3565;
  double t3571;
  double t3488;
  double t3489;
  double t3490;
  double t3576;
  double t3589;
  double t3590;
  double t3580;
  double t3487;
  double t3491;
  double t3492;
  double t3585;
  double t3586;
  double t3587;
  double t3588;
  double t3591;
  double t3592;
  double t3593;
  double t3594;
  double t3595;
  double t3596;
  double t3597;
  double t3598;
  double t3599;
  double t3600;
  double t3601;
  double t3602;
  double t3603;
  double t3604;
  double t3605;
  double t3528;
  double t3531;
  double t3532;
  double t3533;
  double t3535;
  double t3537;
  double t3539;
  double t3540;
  double t3541;
  double t3632;
  double t3633;
  double t3634;
  double t3626;
  double t3627;
  double t3545;
  double t3548;
  double t3549;
  double t3631;
  double t3637;
  double t3551;
  double t3552;
  double t3553;
  double t3642;
  double t3655;
  double t3656;
  double t3646;
  double t3550;
  double t3554;
  double t3555;
  double t3651;
  double t3652;
  double t3653;
  double t3654;
  double t3657;
  double t3658;
  double t3659;
  double t3660;
  double t3661;
  double t3662;
  double t3663;
  double t3664;
  double t3665;
  double t3666;
  double t3667;
  double t3668;
  double t3669;
  double t3670;
  double t3671;
  double t3692;
  double t3694;
  double t3691;
  double t3705;
  double t3710;
  double t3712;
  double t3702;
  double t3703;
  double t3704;
  double t3706;
  double t3707;
  double t3708;
  double t3693;
  double t3695;
  double t3696;
  double t3698;
  double t3699;
  double t3700;
  double t3711;
  double t3713;
  double t3714;
  double t3716;
  double t3717;
  double t3718;
  double t3726;
  double t3732;
  double t3733;
  double t3734;
  double t3727;
  double t3728;
  double t3729;
  double t3730;
  double t3738;
  double t3739;
  double t3740;
  double t3742;
  double t3743;
  double t3744;
  double t3755;
  double t3756;
  double t3746;
  double t3747;
  double t3748;
  double t3745;
  double t3749;
  double t3750;
  double t3759;
  double t3760;
  double t3761;
  double t3778;
  double t3783;
  double t3784;
  double t3779;
  double t3780;
  double t3781;
  double t3785;
  double t3787;
  double t3788;
  double t3789;
  double t3800;
  double t3801;
  double t3802;
  double t3803;
  double t3804;
  double t3810;
  double t3811;
  double t3817;
  double t3818;
  double t3819;
  double t3812;
  double t3813;
  double t3814;
  double t3815;
  double t3823;
  double t3824;
  double t3825;
  double t3827;
  double t3828;
  double t3829;
  double t3840;
  double t3841;
  double t3831;
  double t3832;
  double t3833;
  double t3830;
  double t3834;
  double t3835;
  double t3844;
  double t3845;
  double t3846;
  double t3863;
  double t3868;
  double t3869;
  double t3864;
  double t3865;
  double t3866;
  double t3870;
  double t3872;
  double t3873;
  double t3874;
  double t3885;
  double t3886;
  double t3887;
  double t3888;
  double t3889;
  double t3895;
  t2774 = Cos(var1[3]);
  t2756 = Cos(var1[4]);
  t2761 = Sin(var1[3]);
  t2775 = Sin(var1[4]);
  t2754 = Sin(var1[2]);
  t2795 = Cos(var1[2]);
  t2796 = t2774*t2756;
  t2801 = -1.*t2761*t2775;
  t2811 = t2796 + t2801;
  t2814 = t2795*t2811;
  t2771 = -1.*t2756*t2761;
  t2778 = -1.*t2774*t2775;
  t2781 = t2771 + t2778;
  t2818 = t2756*t2761;
  t2821 = t2774*t2775;
  t2827 = t2818 + t2821;
  t2787 = t2754*t2781;
  t2815 = t2787 + t2814;
  t2836 = t2795*t2781;
  t2838 = -1.*t2754*t2811;
  t2839 = t2836 + t2838;
  t2851 = -1.*t2774*t2756;
  t2853 = t2761*t2775;
  t2854 = t2851 + t2853;
  t2913 = -1.*t2774*t2754;
  t2919 = -1.*t2795*t2761;
  t2920 = t2913 + t2919;
  t2947 = t2795*t2774;
  t2949 = -1.*t2754*t2761;
  t2954 = t2947 + t2949;
  t2828 = -1.*t2754*t2827;
  t2832 = t2828 + t2814;
  t2833 = 6.4*t2815*t2832;
  t2840 = t2795*t2827;
  t2842 = t2754*t2811;
  t2843 = t2840 + t2842;
  t2847 = 6.4*t2839*t2843;
  t2848 = -1.*t2754*t2781;
  t2855 = t2795*t2854;
  t2857 = t2848 + t2855;
  t2858 = 6.4*t2815*t2857;
  t2859 = t2754*t2854;
  t2866 = t2836 + t2859;
  t2886 = 6.4*t2839*t2866;
  t2929 = Power(t2920,2);
  t2933 = 13.6*t2929;
  t2939 = t2774*t2754;
  t2940 = t2795*t2761;
  t2944 = t2939 + t2940;
  t2945 = 13.6*t2920*t2944;
  t2955 = Power(t2954,2);
  t2958 = 13.6*t2955;
  t2959 = -1.*t2795*t2774;
  t2962 = t2754*t2761;
  t2966 = t2959 + t2962;
  t2967 = 13.6*t2954*t2966;
  t3007 = Cos(var1[5]);
  t3015 = -1.*t3007*t2754;
  t3016 = Sin(var1[5]);
  t3018 = -1.*t2795*t3016;
  t3020 = t3015 + t3018;
  t3038 = t2795*t3007;
  t3043 = -1.*t2754*t3016;
  t3044 = t3038 + t3043;
  t3070 = Cos(var1[6]);
  t3072 = Sin(var1[6]);
  t3071 = -1.*t3070*t3016;
  t3075 = -1.*t3007*t3072;
  t3078 = t3071 + t3075;
  t3087 = t3007*t3070;
  t3092 = -1.*t3016*t3072;
  t3093 = t3087 + t3092;
  t3097 = t2795*t3093;
  t3100 = t3070*t3016;
  t3101 = t3007*t3072;
  t3102 = t3100 + t3101;
  t3130 = -1.*t2754*t3093;
  t3096 = t2754*t3078;
  t3098 = t3096 + t3097;
  t3103 = -1.*t2754*t3102;
  t3104 = t3103 + t3097;
  t3125 = t2795*t3078;
  t3132 = t3125 + t3130;
  t3146 = t2795*t3102;
  t3148 = t2754*t3093;
  t3149 = t3146 + t3148;
  t3086 = -1.*t2754*t3078;
  t3166 = -1.*t3007*t3070;
  t3167 = t3016*t3072;
  t3170 = t3166 + t3167;
  t3025 = Power(t3020,2);
  t3026 = 13.6*t3025;
  t3029 = t3007*t2754;
  t3030 = t2795*t3016;
  t3033 = t3029 + t3030;
  t3037 = 13.6*t3020*t3033;
  t3045 = Power(t3044,2);
  t3046 = 13.6*t3045;
  t3057 = -1.*t2795*t3007;
  t3058 = t2754*t3016;
  t3068 = t3057 + t3058;
  t3069 = 13.6*t3044*t3068;
  t3161 = 6.4*t3098*t3104;
  t3162 = 6.4*t3132*t3149;
  t3171 = t2795*t3170;
  t3172 = t3086 + t3171;
  t3178 = 6.4*t3098*t3172;
  t3179 = t2754*t3170;
  t3183 = t3125 + t3179;
  t3184 = 6.4*t3132*t3183;
  t2972 = t2933 + t2945 + t2958 + t2967 + t2833 + t2847 + t2858 + t2886;
  t3200 = Power(t2815,2);
  t3201 = 6.4*t3200;
  t3207 = t2754*t2827;
  t3208 = t3207 + t2855;
  t3212 = 6.4*t2815*t3208;
  t3213 = 6.4*t2843*t2866;
  t3214 = Power(t2866,2);
  t3215 = 6.4*t3214;
  t2901 = t2833 + t2847 + t2858 + t2886;
  t3219 = t3201 + t3212 + t3213 + t3215;
  t3220 = -0.5*var2[4]*t3219;
  t3190 = t3026 + t3037 + t3046 + t3069 + t3161 + t3162 + t3178 + t3184;
  t3235 = Power(t3098,2);
  t3236 = 6.4*t3235;
  t3237 = t2754*t3102;
  t3238 = t3237 + t3171;
  t3239 = 6.4*t3098*t3238;
  t3245 = 6.4*t3149*t3183;
  t3246 = Power(t3183,2);
  t3247 = 6.4*t3246;
  t3185 = t3161 + t3162 + t3178 + t3184;
  t3248 = t3236 + t3239 + t3245 + t3247;
  t3249 = -0.5*var2[6]*t3248;
  t3261 = 6.4*t2815*t2843;
  t3262 = 6.4*t2815*t2866;
  t3265 = 13.6*t2920*t2954;
  t3271 = 13.6*t2944*t2954;
  t3276 = 13.6*t3020*t3044;
  t3277 = 13.6*t3033*t3044;
  t3282 = 6.4*t3098*t3149;
  t3283 = 6.4*t3098*t3183;
  t3274 = 6.4*t2815*t2839;
  t3275 = 6.4*t2832*t2843;
  t3278 = 6.4*t3098*t3132;
  t3279 = 6.4*t3104*t3149;
  t3280 = t3265 + t3271 + t3274 + t3275 + t3276 + t3277 + t3278 + t3279;
  t3272 = t3265 + t3271 + t3261 + t3262;
  t3263 = t3261 + t3262;
  t3286 = t3276 + t3277 + t3282 + t3283;
  t3284 = t3282 + t3283;
  t3000 = -1.*t2795*t2827;
  t3001 = t3000 + t2838;
  t2974 = -1.*t2795*t2811;
  t2975 = t2848 + t2974;
  t3306 = 6.4*t2832*t2839;
  t3307 = 3.2*t2815*t3001;
  t3308 = 3.2*t2975*t2843;
  t3309 = 6.4*t2839*t2857;
  t3310 = -1.*t2795*t2781;
  t3311 = -1.*t2754*t2854;
  t3312 = t3310 + t3311;
  t3313 = 3.2*t2815*t3312;
  t3314 = 3.2*t2975*t2866;
  t3317 = 20.4*t2920*t2954;
  t3318 = 6.8*t2944*t2954;
  t3319 = 20.4*t2920*t2966;
  t3320 = 6.8*t2944*t2966;
  t3094 = -1.*t2795*t3093;
  t3095 = t3086 + t3094;
  t3143 = -1.*t2795*t3102;
  t3145 = t3143 + t3130;
  t3339 = -1.*t2795*t3078;
  t3333 = 20.4*t3020*t3044;
  t3334 = 6.8*t3033*t3044;
  t3335 = 20.4*t3020*t3068;
  t3336 = 6.8*t3033*t3068;
  t3346 = 6.4*t3104*t3132;
  t3347 = 3.2*t3098*t3145;
  t3348 = 3.2*t3095*t3149;
  t3349 = 6.4*t3132*t3172;
  t3350 = -1.*t2754*t3170;
  t3351 = t3339 + t3350;
  t3352 = 3.2*t3098*t3351;
  t3353 = 3.2*t3095*t3183;
  t3321 = t3317 + t3318 + t3319 + t3320 + t3306 + t3307 + t3308 + t3309 + t3313 + t3314;
  t3363 = 3.2*t2843*t2857;
  t3366 = 3.2*t2839*t3208;
  t3367 = t2840 + t3311;
  t3368 = 3.2*t2815*t3367;
  t3369 = 3.2*t2832*t2866;
  t3370 = 6.4*t2857*t2866;
  t3315 = t3306 + t3307 + t3308 + t3309 + t3313 + t3314;
  t3371 = t3274 + t3363 + t3366 + t3368 + t3369 + t3370;
  t3372 = -0.5*var2[4]*t3371;
  t3356 = t3333 + t3334 + t3335 + t3336 + t3346 + t3347 + t3348 + t3349 + t3352 + t3353;
  t3382 = 3.2*t3149*t3172;
  t3383 = 3.2*t3132*t3238;
  t3384 = t3146 + t3350;
  t3385 = 3.2*t3098*t3384;
  t3386 = 3.2*t3104*t3183;
  t3387 = 6.4*t3172*t3183;
  t3354 = t3346 + t3347 + t3348 + t3349 + t3352 + t3353;
  t3388 = t3278 + t3382 + t3383 + t3385 + t3386 + t3387;
  t3389 = -0.5*var2[6]*t3388;
  t3398 = 3.2*t2815*t2832;
  t3399 = 3.2*t2839*t2843;
  t3400 = 3.2*t2815*t2857;
  t3401 = 3.2*t2839*t2866;
  t3404 = 6.8*t2929;
  t3405 = 6.8*t2920*t2944;
  t3406 = 6.8*t2955;
  t3407 = 6.8*t2954*t2966;
  t2987 = Power(t2832,2);
  t2998 = Power(t2839,2);
  t3113 = Power(t3104,2);
  t3137 = Power(t3132,2);
  t3414 = 6.8*t3025;
  t3415 = 6.8*t3020*t3033;
  t3416 = 6.8*t3045;
  t3417 = 6.8*t3044*t3068;
  t3424 = 3.2*t3098*t3104;
  t3425 = 3.2*t3132*t3149;
  t3426 = 3.2*t3098*t3172;
  t3427 = 3.2*t3132*t3183;
  t3410 = 3.2*t2975*t2815;
  t3411 = 3.2*t2987;
  t3412 = 3.2*t2998;
  t3413 = 3.2*t3001*t2843;
  t3418 = 3.2*t3095*t3098;
  t3419 = 3.2*t3113;
  t3420 = 3.2*t3137;
  t3421 = 3.2*t3145*t3149;
  t3422 = t3404 + t3405 + t3406 + t3407 + t3410 + t3411 + t3412 + t3413 + t3414 + t3415 + t3416 + t3417 + t3418 + t3419 + t3420 + t3421;
  t3408 = t3404 + t3405 + t3406 + t3407 + t3398 + t3399 + t3400 + t3401;
  t3402 = t3398 + t3399 + t3400 + t3401;
  t3430 = t3414 + t3415 + t3416 + t3417 + t3424 + t3425 + t3426 + t3427;
  t3428 = t3424 + t3425 + t3426 + t3427;
  t3444 = -1.*t2756;
  t3445 = 1. + t3444;
  t3446 = 0.4*t3445;
  t3447 = 0.64*t2756;
  t3448 = t3446 + t3447;
  t3449 = t3448*t2761;
  t3450 = 0.24*t2774*t2775;
  t3451 = t3449 + t3450;
  t3453 = t2774*t3448;
  t3454 = -0.24*t2761*t2775;
  t3455 = t3453 + t3454;
  t3459 = -1.*t3448*t2761;
  t3460 = -0.24*t2774*t2775;
  t3461 = t3459 + t3460;
  t3452 = -1.*t3451*t2811;
  t3456 = -1.*t2781*t3455;
  t3457 = t3452 + t3456;
  t3458 = 3.2*t2839*t3457;
  t3463 = t3451*t2811;
  t3464 = t2781*t3455;
  t3468 = t3451*t2827;
  t3469 = t2811*t3455;
  t3470 = t3468 + t3469;
  t3471 = 3.2*t3470*t2857;
  t3480 = -0.24*t2756*t2761;
  t3481 = t3480 + t3460;
  t3473 = -1.*t2781*t3451;
  t3483 = 0.24*t2774*t2756;
  t3484 = t3483 + t3454;
  t3475 = -1.*t3455*t2854;
  t3438 = Power(t2774,2);
  t3439 = 0.11*t3438;
  t3440 = Power(t2761,2);
  t3441 = 0.11*t3440;
  t3442 = t3439 + t3441;
  t3443 = 6.8*t2966*t3442;
  t3503 = -1.*t3070;
  t3504 = 1. + t3503;
  t3505 = 0.4*t3504;
  t3506 = 0.64*t3070;
  t3507 = t3505 + t3506;
  t3508 = t3507*t3016;
  t3509 = 0.24*t3007*t3072;
  t3510 = t3508 + t3509;
  t3512 = t3007*t3507;
  t3513 = -0.24*t3016*t3072;
  t3514 = t3512 + t3513;
  t3497 = Power(t3007,2);
  t3498 = 0.11*t3497;
  t3499 = Power(t3016,2);
  t3500 = 0.11*t3499;
  t3501 = t3498 + t3500;
  t3502 = 6.8*t3068*t3501;
  t3511 = -1.*t3510*t3093;
  t3515 = -1.*t3078*t3514;
  t3516 = t3511 + t3515;
  t3518 = t3510*t3102;
  t3519 = t3093*t3514;
  t3520 = t3518 + t3519;
  t3525 = -1.*t3507*t3016;
  t3526 = -0.24*t3007*t3072;
  t3527 = t3525 + t3526;
  t3524 = 3.2*t3132*t3516;
  t3529 = t3510*t3093;
  t3530 = t3078*t3514;
  t3534 = 3.2*t3520*t3172;
  t3543 = -0.24*t3070*t3016;
  t3544 = t3543 + t3526;
  t3536 = -1.*t3078*t3510;
  t3546 = 0.24*t3007*t3070;
  t3547 = t3546 + t3513;
  t3538 = -1.*t3514*t3170;
  t3462 = t3461*t2811;
  t3465 = t2827*t3455;
  t3466 = t3462 + t3463 + t3464 + t3465;
  t3467 = 3.2*t2839*t3466;
  t3472 = -1.*t2781*t3461;
  t3474 = -1.*t2811*t3455;
  t3476 = t3472 + t3473 + t3474 + t3475;
  t3477 = 3.2*t2832*t3476;
  t3478 = t3443 + t3458 + t3467 + t3471 + t3477;
  t3566 = -1.*t2774*t3448;
  t3567 = 0.24*t2761*t2775;
  t3568 = t3566 + t3567;
  t3560 = 3.2*t3470*t3208;
  t3561 = 3.2*t3457*t2866;
  t3482 = t3481*t2811;
  t3485 = t2827*t3484;
  t3486 = t3482 + t3463 + t3464 + t3485;
  t3565 = -1.*t2827*t3455;
  t3571 = -1.*t3451*t2854;
  t3488 = -1.*t2781*t3481;
  t3489 = -1.*t2811*t3484;
  t3490 = t3488 + t3473 + t3489 + t3475;
  t3576 = t2781*t3451;
  t3589 = -0.24*t2774*t2756;
  t3590 = t3589 + t3567;
  t3580 = t3455*t2854;
  t3487 = 3.2*t2839*t3486;
  t3491 = 3.2*t2832*t3490;
  t3492 = t3458 + t3487 + t3471 + t3491;
  t3585 = 3.2*t3466*t2866;
  t3586 = 3.2*t3486*t2866;
  t3587 = -1.*t3481*t2811;
  t3588 = -1.*t2781*t3484;
  t3591 = -1.*t2781*t3590;
  t3592 = -1.*t3461*t2854;
  t3593 = -1.*t3481*t2854;
  t3594 = t3587 + t3456 + t3565 + t3588 + t3591 + t3592 + t3593 + t3571;
  t3595 = 3.2*t2843*t3594;
  t3596 = 3.2*t2815*t3476;
  t3597 = 3.2*t2815*t3490;
  t3598 = t2781*t3461;
  t3599 = t2781*t3481;
  t3600 = t3481*t2827;
  t3601 = t2811*t3484;
  t3602 = t2811*t3590;
  t3603 = t3598 + t3599 + t3576 + t3600 + t3469 + t3601 + t3602 + t3580;
  t3604 = 3.2*t2815*t3603;
  t3605 = t3560 + t3561 + t3585 + t3586 + t3595 + t3596 + t3597 + t3604;
  t3528 = t3527*t3093;
  t3531 = t3102*t3514;
  t3532 = t3528 + t3529 + t3530 + t3531;
  t3533 = 3.2*t3132*t3532;
  t3535 = -1.*t3078*t3527;
  t3537 = -1.*t3093*t3514;
  t3539 = t3535 + t3536 + t3537 + t3538;
  t3540 = 3.2*t3104*t3539;
  t3541 = t3502 + t3524 + t3533 + t3534 + t3540;
  t3632 = -1.*t3007*t3507;
  t3633 = 0.24*t3016*t3072;
  t3634 = t3632 + t3633;
  t3626 = 3.2*t3520*t3238;
  t3627 = 3.2*t3516*t3183;
  t3545 = t3544*t3093;
  t3548 = t3102*t3547;
  t3549 = t3545 + t3529 + t3530 + t3548;
  t3631 = -1.*t3102*t3514;
  t3637 = -1.*t3510*t3170;
  t3551 = -1.*t3078*t3544;
  t3552 = -1.*t3093*t3547;
  t3553 = t3551 + t3536 + t3552 + t3538;
  t3642 = t3078*t3510;
  t3655 = -0.24*t3007*t3070;
  t3656 = t3655 + t3633;
  t3646 = t3514*t3170;
  t3550 = 3.2*t3132*t3549;
  t3554 = 3.2*t3104*t3553;
  t3555 = t3524 + t3550 + t3534 + t3554;
  t3651 = 3.2*t3532*t3183;
  t3652 = 3.2*t3549*t3183;
  t3653 = -1.*t3544*t3093;
  t3654 = -1.*t3078*t3547;
  t3657 = -1.*t3078*t3656;
  t3658 = -1.*t3527*t3170;
  t3659 = -1.*t3544*t3170;
  t3660 = t3653 + t3515 + t3631 + t3654 + t3657 + t3658 + t3659 + t3637;
  t3661 = 3.2*t3149*t3660;
  t3662 = 3.2*t3098*t3539;
  t3663 = 3.2*t3098*t3553;
  t3664 = t3078*t3527;
  t3665 = t3078*t3544;
  t3666 = t3544*t3102;
  t3667 = t3093*t3547;
  t3668 = t3093*t3656;
  t3669 = t3664 + t3665 + t3642 + t3666 + t3519 + t3667 + t3668 + t3646;
  t3670 = 3.2*t3098*t3669;
  t3671 = t3626 + t3627 + t3651 + t3652 + t3661 + t3662 + t3663 + t3670;
  t3692 = 3.2*t2815*t3457;
  t3694 = 3.2*t3470*t2866;
  t3691 = 6.8*t2920*t3442;
  t3705 = 6.8*t3020*t3501;
  t3710 = 3.2*t3098*t3516;
  t3712 = 3.2*t3520*t3183;
  t3702 = -2.88*t2754;
  t3703 = 3.2*t2832*t3457;
  t3704 = 3.2*t2839*t3470;
  t3706 = 3.2*t3104*t3516;
  t3707 = 3.2*t3132*t3520;
  t3708 = t3702 + t3691 + t3703 + t3704 + t3705 + t3706 + t3707;
  t3693 = 3.2*t2815*t3466;
  t3695 = 3.2*t2843*t3476;
  t3696 = t3691 + t3692 + t3693 + t3694 + t3695;
  t3698 = 3.2*t2815*t3486;
  t3699 = 3.2*t2843*t3490;
  t3700 = t3692 + t3698 + t3694 + t3699;
  t3711 = 3.2*t3098*t3532;
  t3713 = 3.2*t3149*t3539;
  t3714 = t3705 + t3710 + t3711 + t3712 + t3713;
  t3716 = 3.2*t3098*t3549;
  t3717 = 3.2*t3149*t3553;
  t3718 = t3710 + t3716 + t3712 + t3717;
  t3726 = 0.748*t2966;
  t3732 = t3448*t2775;
  t3733 = -0.24*t2756*t2775;
  t3734 = t3732 + t3733;
  t3727 = t3448*t2756;
  t3728 = Power(t2775,2);
  t3729 = 0.24*t3728;
  t3730 = t3727 + t3729;
  t3738 = 3.2*t3734*t2839;
  t3739 = 3.2*t3730*t2857;
  t3740 = t3726 + t3738 + t3739;
  t3742 = Power(t2756,2);
  t3743 = -0.24*t3742;
  t3744 = t3727 + t3743;
  t3755 = 3.2*t3730*t3208;
  t3756 = 3.2*t3734*t2866;
  t3746 = -1.*t3448*t2775;
  t3747 = 0.24*t2756*t2775;
  t3748 = t3746 + t3747;
  t3745 = 3.2*t3744*t2832;
  t3749 = 3.2*t3748*t2839;
  t3750 = t3745 + t3738 + t3749 + t3739;
  t3759 = 3.2*t3744*t2815;
  t3760 = 3.2*t3748*t2866;
  t3761 = t3759 + t3755 + t3756 + t3760;
  t3778 = 0.748*t2920;
  t3783 = 3.2*t3734*t2815;
  t3784 = 3.2*t3730*t2866;
  t3779 = 3.2*t3734*t2832;
  t3780 = 3.2*t3730*t2839;
  t3781 = t3778 + t3779 + t3780;
  t3785 = t3778 + t3783 + t3784;
  t3787 = 3.2*t3748*t2815;
  t3788 = 3.2*t3744*t2843;
  t3789 = t3783 + t3787 + t3788 + t3784;
  t3800 = -0.384*var2[2]*t2857;
  t3801 = -0.384*var2[3]*t3208;
  t3802 = -0.384*var2[4]*t3208;
  t3803 = t3800 + t3801 + t3802;
  t3804 = var2[0]*t3803;
  t3810 = -0.384*var2[0]*t2866;
  t3811 = 0.748*t3068;
  t3817 = t3507*t3072;
  t3818 = -0.24*t3070*t3072;
  t3819 = t3817 + t3818;
  t3812 = t3507*t3070;
  t3813 = Power(t3072,2);
  t3814 = 0.24*t3813;
  t3815 = t3812 + t3814;
  t3823 = 3.2*t3819*t3132;
  t3824 = 3.2*t3815*t3172;
  t3825 = t3811 + t3823 + t3824;
  t3827 = Power(t3070,2);
  t3828 = -0.24*t3827;
  t3829 = t3812 + t3828;
  t3840 = 3.2*t3815*t3238;
  t3841 = 3.2*t3819*t3183;
  t3831 = -1.*t3507*t3072;
  t3832 = 0.24*t3070*t3072;
  t3833 = t3831 + t3832;
  t3830 = 3.2*t3829*t3104;
  t3834 = 3.2*t3833*t3132;
  t3835 = t3830 + t3823 + t3834 + t3824;
  t3844 = 3.2*t3829*t3098;
  t3845 = 3.2*t3833*t3183;
  t3846 = t3844 + t3840 + t3841 + t3845;
  t3863 = 0.748*t3020;
  t3868 = 3.2*t3819*t3098;
  t3869 = 3.2*t3815*t3183;
  t3864 = 3.2*t3819*t3104;
  t3865 = 3.2*t3815*t3132;
  t3866 = t3863 + t3864 + t3865;
  t3870 = t3863 + t3868 + t3869;
  t3872 = 3.2*t3833*t3098;
  t3873 = 3.2*t3829*t3149;
  t3874 = t3868 + t3872 + t3873 + t3869;
  t3885 = -0.384*var2[2]*t3172;
  t3886 = -0.384*var2[5]*t3238;
  t3887 = -0.384*var2[6]*t3238;
  t3888 = t3885 + t3886 + t3887;
  t3889 = var2[0]*t3888;
  t3895 = -0.384*var2[0]*t3183;
  p_output1[0]=var2[0]*(-0.5*(t2933 + t2945 + t2958 + t2967 + 6.4*t2815*t2975 + 6.4*t2987 + 6.4*t2998 + 6.4*t2843*t3001 + t3026 + t3037 + t3046 + t3069 + 6.4*t3095*t3098 + 6.4*t3113 + 6.4*t3137 + 6.4*t3145*t3149)*var2[2] - 0.5*t2972*var2[3] - 0.5*t2901*var2[4] - 0.5*t3190*var2[5] - 0.5*t3185*var2[6]);
  p_output1[1]=var2[0]*(t3220 - 0.5*t2972*var2[2] - 0.5*(t2933 + t2945 + t2958 + t2967 + t3201 + t3212 + t3213 + t3215)*var2[3]);
  p_output1[2]=var2[0]*(t3220 - 0.5*t2901*var2[2] - 0.5*t3219*var2[3]);
  p_output1[3]=var2[0]*(t3249 - 0.5*t3190*var2[2] - 0.5*(t3026 + t3037 + t3046 + t3069 + t3236 + t3239 + t3245 + t3247)*var2[5]);
  p_output1[4]=var2[0]*(t3249 - 0.5*t3185*var2[2] - 0.5*t3248*var2[5]);
  p_output1[5]=-0.5*t3280*var2[2] - 0.5*t3272*var2[3] - 0.5*t3263*var2[4] - 0.5*t3286*var2[5] - 0.5*t3284*var2[6];
  p_output1[6]=-0.5*t3280*var2[0];
  p_output1[7]=-0.5*t3272*var2[0];
  p_output1[8]=-0.5*t3263*var2[0];
  p_output1[9]=-0.5*t3286*var2[0];
  p_output1[10]=-0.5*t3284*var2[0];
  p_output1[11]=var2[0]*(-0.5*(9.6*t2839*t2975 + 9.6*t2832*t3001 + 9.6*t3095*t3132 + 9.6*t3104*t3145 + 3.2*t2843*(t2974 + t3207) + 3.2*t3149*(t3094 + t3237) + 3.2*t2815*(t2842 + t3310) + t3317 + t3318 + t3319 + t3320 + t3333 + t3334 + t3335 + t3336 + 3.2*t3098*(t3148 + t3339))*var2[2] - 0.5*t3321*var2[3] - 0.5*t3315*var2[4] - 0.5*t3356*var2[5] - 0.5*t3354*var2[6]);
  p_output1[12]=var2[0]*(t3372 - 0.5*t3321*var2[2] - 0.5*(t3274 + t3317 + t3318 + t3319 + t3320 + t3363 + t3366 + t3368 + t3369 + t3370)*var2[3]);
  p_output1[13]=var2[0]*(t3372 - 0.5*t3315*var2[2] - 0.5*t3371*var2[3]);
  p_output1[14]=var2[0]*(t3389 - 0.5*t3356*var2[2] - 0.5*(t3278 + t3333 + t3334 + t3335 + t3336 + t3382 + t3383 + t3385 + t3386 + t3387)*var2[5]);
  p_output1[15]=var2[0]*(t3389 - 0.5*t3354*var2[2] - 0.5*t3388*var2[5]);
  p_output1[16]=-0.5*t3422*var2[2] - 0.5*t3408*var2[3] - 0.5*t3402*var2[4] - 0.5*t3430*var2[5] - 0.5*t3428*var2[6];
  p_output1[17]=-0.5*t3422*var2[0];
  p_output1[18]=-0.5*t3408*var2[0];
  p_output1[19]=-0.5*t3402*var2[0];
  p_output1[20]=-0.5*t3430*var2[0];
  p_output1[21]=-0.5*t3428*var2[0];
  p_output1[22]=var2[0]*(-0.5*(-2.88*t2795 + t3443 + 3.2*t3001*t3457 + 3.2*t2975*t3470 + t3502 + 3.2*t3145*t3516 + 3.2*t3095*t3520)*var2[2] - 0.5*t3478*var2[3] - 0.5*t3492*var2[4] - 0.5*t3541*var2[5] - 0.5*t3555*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t3478*var2[2] - 0.5*(t3443 + 6.4*t2866*t3466 + 6.4*t2815*t3476 + t3560 + t3561 + 3.2*t2843*(-2.*t2781*t3455 - 1.*t2811*t3461 - 2.*t2854*t3461 + t3565 - 1.*t2781*t3568 + t3571) + 3.2*t2815*(2.*t2811*t3455 + 2.*t2781*t3461 + t2827*t3461 + t2811*t3568 + t3576 + t3580))*var2[3] - 0.5*t3605*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t3492*var2[2] - 0.5*t3605*var2[3] - 0.5*(6.4*t2866*t3486 + 6.4*t2815*t3490 + t3560 + t3561 + 3.2*t2843*(-2.*t2854*t3481 - 2.*t2781*t3484 + t3565 + t3571 + t3587 + t3591) + 3.2*t2815*(2.*t2781*t3481 + 2.*t2811*t3484 + t3576 + t3580 + t3600 + t3602))*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t3541*var2[2] - 0.5*(t3502 + 6.4*t3183*t3532 + 6.4*t3098*t3539 + t3626 + t3627 + 3.2*t3149*(-2.*t3078*t3514 - 1.*t3093*t3527 - 2.*t3170*t3527 + t3631 - 1.*t3078*t3634 + t3637) + 3.2*t3098*(2.*t3093*t3514 + 2.*t3078*t3527 + t3102*t3527 + t3093*t3634 + t3642 + t3646))*var2[5] - 0.5*t3671*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t3555*var2[2] - 0.5*t3671*var2[5] - 0.5*(6.4*t3183*t3549 + 6.4*t3098*t3553 + t3626 + t3627 + 3.2*t3149*(-2.*t3170*t3544 - 2.*t3078*t3547 + t3631 + t3637 + t3653 + t3657) + 3.2*t3098*(2.*t3078*t3544 + 2.*t3093*t3547 + t3642 + t3646 + t3666 + t3668))*var2[6]);
  p_output1[27]=-0.5*t3708*var2[2] - 0.5*t3696*var2[3] - 0.5*t3700*var2[4] - 0.5*t3714*var2[5] - 0.5*t3718*var2[6];
  p_output1[28]=-0.5*t3708*var2[0];
  p_output1[29]=-0.5*t3696*var2[0];
  p_output1[30]=-0.5*t3700*var2[0];
  p_output1[31]=-0.5*t3714*var2[0];
  p_output1[32]=-0.5*t3718*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t3726 + 3.2*t2975*t3730 + 3.2*t3001*t3734)*var2[2] - 0.5*t3740*var2[3] - 0.5*t3750*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t3740*var2[2] - 0.5*(t3726 + t3755 + t3756)*var2[3] - 0.5*t3761*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t3750*var2[2] - 0.5*t3761*var2[3] - 0.5*(3.2*t2815*(-1.*t2756*t3448 + 0.24*t3742) + 6.4*t2815*t3744 + 3.2*t2843*t3748 + 6.4*t2866*t3748 + t3755 + t3756)*var2[4]);
  p_output1[36]=-0.5*t3781*var2[2] - 0.5*t3785*var2[3] - 0.5*t3789*var2[4];
  p_output1[37]=-0.5*t3781*var2[0];
  p_output1[38]=-0.5*t3785*var2[0];
  p_output1[39]=-0.5*t3789*var2[0];
  p_output1[40]=var2[0]*(-0.384*t2975*var2[2] - 0.384*t2857*var2[3] - 0.384*t2857*var2[4]);
  p_output1[41]=t3804;
  p_output1[42]=t3804;
  p_output1[43]=-0.384*t2839*var2[2] - 0.384*t2866*var2[3] - 0.384*t2866*var2[4];
  p_output1[44]=-0.384*t2839*var2[0];
  p_output1[45]=t3810;
  p_output1[46]=t3810;
  p_output1[47]=var2[0]*(-0.5*(t3811 + 3.2*t3095*t3815 + 3.2*t3145*t3819)*var2[2] - 0.5*t3825*var2[5] - 0.5*t3835*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t3825*var2[2] - 0.5*(t3811 + t3840 + t3841)*var2[5] - 0.5*t3846*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t3835*var2[2] - 0.5*t3846*var2[5] - 0.5*(3.2*t3098*(-1.*t3070*t3507 + 0.24*t3827) + 6.4*t3098*t3829 + 3.2*t3149*t3833 + 6.4*t3183*t3833 + t3840 + t3841)*var2[6]);
  p_output1[50]=-0.5*t3866*var2[2] - 0.5*t3870*var2[5] - 0.5*t3874*var2[6];
  p_output1[51]=-0.5*t3866*var2[0];
  p_output1[52]=-0.5*t3870*var2[0];
  p_output1[53]=-0.5*t3874*var2[0];
  p_output1[54]=var2[0]*(-0.384*t3095*var2[2] - 0.384*t3172*var2[5] - 0.384*t3172*var2[6]);
  p_output1[55]=t3889;
  p_output1[56]=t3889;
  p_output1[57]=-0.384*t3132*var2[2] - 0.384*t3183*var2[5] - 0.384*t3183*var2[6];
  p_output1[58]=-0.384*t3132*var2[0];
  p_output1[59]=t3895;
  p_output1[60]=t3895;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
