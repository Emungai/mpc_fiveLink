/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:20:15 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2737;
  double t2719;
  double t2724;
  double t2738;
  double t2717;
  double t2758;
  double t2759;
  double t2764;
  double t2774;
  double t2777;
  double t2734;
  double t2741;
  double t2744;
  double t2781;
  double t2784;
  double t2790;
  double t2750;
  double t2778;
  double t2799;
  double t2801;
  double t2802;
  double t2814;
  double t2816;
  double t2817;
  double t2876;
  double t2882;
  double t2883;
  double t2910;
  double t2912;
  double t2917;
  double t2791;
  double t2795;
  double t2796;
  double t2803;
  double t2805;
  double t2806;
  double t2810;
  double t2811;
  double t2818;
  double t2820;
  double t2821;
  double t2822;
  double t2829;
  double t2849;
  double t2892;
  double t2896;
  double t2902;
  double t2903;
  double t2907;
  double t2908;
  double t2918;
  double t2921;
  double t2922;
  double t2925;
  double t2929;
  double t2930;
  double t2970;
  double t2978;
  double t2979;
  double t2981;
  double t2983;
  double t3001;
  double t3006;
  double t3007;
  double t3033;
  double t3035;
  double t3034;
  double t3038;
  double t3041;
  double t3050;
  double t3055;
  double t3056;
  double t3060;
  double t3063;
  double t3064;
  double t3065;
  double t3093;
  double t3059;
  double t3061;
  double t3066;
  double t3067;
  double t3088;
  double t3095;
  double t3109;
  double t3111;
  double t3112;
  double t3049;
  double t3129;
  double t3130;
  double t3133;
  double t2988;
  double t2989;
  double t2992;
  double t2993;
  double t2996;
  double t3000;
  double t3008;
  double t3009;
  double t3020;
  double t3021;
  double t3031;
  double t3032;
  double t3124;
  double t3125;
  double t3134;
  double t3135;
  double t3141;
  double t3142;
  double t3146;
  double t3147;
  double t2935;
  double t3163;
  double t3164;
  double t3170;
  double t3171;
  double t3175;
  double t3176;
  double t3177;
  double t3178;
  double t2864;
  double t3182;
  double t3183;
  double t3153;
  double t3198;
  double t3199;
  double t3200;
  double t3201;
  double t3202;
  double t3208;
  double t3209;
  double t3210;
  double t3148;
  double t3211;
  double t3212;
  double t3224;
  double t3225;
  double t3228;
  double t3234;
  double t3239;
  double t3240;
  double t3245;
  double t3246;
  double t3237;
  double t3238;
  double t3241;
  double t3242;
  double t3243;
  double t3235;
  double t3226;
  double t3249;
  double t3247;
  double t2963;
  double t2964;
  double t2937;
  double t2938;
  double t3269;
  double t3270;
  double t3271;
  double t3272;
  double t3273;
  double t3274;
  double t3275;
  double t3276;
  double t3277;
  double t3280;
  double t3281;
  double t3282;
  double t3283;
  double t3057;
  double t3058;
  double t3106;
  double t3108;
  double t3302;
  double t3296;
  double t3297;
  double t3298;
  double t3299;
  double t3309;
  double t3310;
  double t3311;
  double t3312;
  double t3313;
  double t3314;
  double t3315;
  double t3316;
  double t3284;
  double t3326;
  double t3329;
  double t3330;
  double t3331;
  double t3332;
  double t3333;
  double t3278;
  double t3334;
  double t3335;
  double t3319;
  double t3345;
  double t3346;
  double t3347;
  double t3348;
  double t3349;
  double t3350;
  double t3317;
  double t3351;
  double t3352;
  double t3361;
  double t3362;
  double t3363;
  double t3364;
  double t3367;
  double t3368;
  double t3369;
  double t3370;
  double t2950;
  double t2961;
  double t3076;
  double t3100;
  double t3377;
  double t3378;
  double t3379;
  double t3380;
  double t3387;
  double t3388;
  double t3389;
  double t3390;
  double t3373;
  double t3374;
  double t3375;
  double t3376;
  double t3381;
  double t3382;
  double t3383;
  double t3384;
  double t3385;
  double t3371;
  double t3365;
  double t3393;
  double t3391;
  double t3407;
  double t3408;
  double t3409;
  double t3410;
  double t3411;
  double t3412;
  double t3413;
  double t3414;
  double t3416;
  double t3417;
  double t3418;
  double t3422;
  double t3423;
  double t3424;
  double t3415;
  double t3419;
  double t3420;
  double t3421;
  double t3426;
  double t3427;
  double t3431;
  double t3432;
  double t3433;
  double t3434;
  double t3443;
  double t3444;
  double t3436;
  double t3446;
  double t3447;
  double t3438;
  double t3401;
  double t3402;
  double t3403;
  double t3404;
  double t3405;
  double t3406;
  double t3466;
  double t3467;
  double t3468;
  double t3469;
  double t3470;
  double t3471;
  double t3472;
  double t3473;
  double t3475;
  double t3476;
  double t3477;
  double t3460;
  double t3461;
  double t3462;
  double t3463;
  double t3464;
  double t3465;
  double t3474;
  double t3478;
  double t3479;
  double t3481;
  double t3482;
  double t3483;
  double t3488;
  double t3489;
  double t3490;
  double t3487;
  double t3492;
  double t3493;
  double t3497;
  double t3506;
  double t3507;
  double t3499;
  double t3509;
  double t3510;
  double t3501;
  double t3425;
  double t3428;
  double t3429;
  double t3430;
  double t3435;
  double t3437;
  double t3439;
  double t3440;
  double t3441;
  double t3529;
  double t3530;
  double t3531;
  double t3523;
  double t3524;
  double t3445;
  double t3448;
  double t3449;
  double t3528;
  double t3534;
  double t3451;
  double t3452;
  double t3453;
  double t3539;
  double t3552;
  double t3553;
  double t3543;
  double t3450;
  double t3454;
  double t3455;
  double t3548;
  double t3549;
  double t3550;
  double t3551;
  double t3554;
  double t3555;
  double t3556;
  double t3557;
  double t3558;
  double t3559;
  double t3560;
  double t3561;
  double t3562;
  double t3563;
  double t3564;
  double t3565;
  double t3566;
  double t3567;
  double t3568;
  double t3491;
  double t3494;
  double t3495;
  double t3496;
  double t3498;
  double t3500;
  double t3502;
  double t3503;
  double t3504;
  double t3595;
  double t3596;
  double t3597;
  double t3589;
  double t3590;
  double t3508;
  double t3511;
  double t3512;
  double t3594;
  double t3600;
  double t3514;
  double t3515;
  double t3516;
  double t3605;
  double t3618;
  double t3619;
  double t3609;
  double t3513;
  double t3517;
  double t3518;
  double t3614;
  double t3615;
  double t3616;
  double t3617;
  double t3620;
  double t3621;
  double t3622;
  double t3623;
  double t3624;
  double t3625;
  double t3626;
  double t3627;
  double t3628;
  double t3629;
  double t3630;
  double t3631;
  double t3632;
  double t3633;
  double t3634;
  double t3655;
  double t3657;
  double t3654;
  double t3668;
  double t3673;
  double t3675;
  double t3665;
  double t3666;
  double t3667;
  double t3669;
  double t3670;
  double t3671;
  double t3656;
  double t3658;
  double t3659;
  double t3661;
  double t3662;
  double t3663;
  double t3674;
  double t3676;
  double t3677;
  double t3679;
  double t3680;
  double t3681;
  double t3689;
  double t3695;
  double t3696;
  double t3697;
  double t3690;
  double t3691;
  double t3692;
  double t3693;
  double t3701;
  double t3702;
  double t3703;
  double t3705;
  double t3706;
  double t3707;
  double t3718;
  double t3719;
  double t3709;
  double t3710;
  double t3711;
  double t3708;
  double t3712;
  double t3713;
  double t3722;
  double t3723;
  double t3724;
  double t3741;
  double t3746;
  double t3747;
  double t3742;
  double t3743;
  double t3744;
  double t3748;
  double t3750;
  double t3751;
  double t3752;
  double t3763;
  double t3764;
  double t3765;
  double t3766;
  double t3767;
  double t3773;
  double t3774;
  double t3780;
  double t3781;
  double t3782;
  double t3775;
  double t3776;
  double t3777;
  double t3778;
  double t3786;
  double t3787;
  double t3788;
  double t3790;
  double t3791;
  double t3792;
  double t3803;
  double t3804;
  double t3794;
  double t3795;
  double t3796;
  double t3793;
  double t3797;
  double t3798;
  double t3807;
  double t3808;
  double t3809;
  double t3826;
  double t3831;
  double t3832;
  double t3827;
  double t3828;
  double t3829;
  double t3833;
  double t3835;
  double t3836;
  double t3837;
  double t3848;
  double t3849;
  double t3850;
  double t3851;
  double t3852;
  double t3858;
  t2737 = Cos(var1[3]);
  t2719 = Cos(var1[4]);
  t2724 = Sin(var1[3]);
  t2738 = Sin(var1[4]);
  t2717 = Sin(var1[2]);
  t2758 = Cos(var1[2]);
  t2759 = t2737*t2719;
  t2764 = -1.*t2724*t2738;
  t2774 = t2759 + t2764;
  t2777 = t2758*t2774;
  t2734 = -1.*t2719*t2724;
  t2741 = -1.*t2737*t2738;
  t2744 = t2734 + t2741;
  t2781 = t2719*t2724;
  t2784 = t2737*t2738;
  t2790 = t2781 + t2784;
  t2750 = t2717*t2744;
  t2778 = t2750 + t2777;
  t2799 = t2758*t2744;
  t2801 = -1.*t2717*t2774;
  t2802 = t2799 + t2801;
  t2814 = -1.*t2737*t2719;
  t2816 = t2724*t2738;
  t2817 = t2814 + t2816;
  t2876 = -1.*t2737*t2717;
  t2882 = -1.*t2758*t2724;
  t2883 = t2876 + t2882;
  t2910 = t2758*t2737;
  t2912 = -1.*t2717*t2724;
  t2917 = t2910 + t2912;
  t2791 = -1.*t2717*t2790;
  t2795 = t2791 + t2777;
  t2796 = 6.4*t2778*t2795;
  t2803 = t2758*t2790;
  t2805 = t2717*t2774;
  t2806 = t2803 + t2805;
  t2810 = 6.4*t2802*t2806;
  t2811 = -1.*t2717*t2744;
  t2818 = t2758*t2817;
  t2820 = t2811 + t2818;
  t2821 = 6.4*t2778*t2820;
  t2822 = t2717*t2817;
  t2829 = t2799 + t2822;
  t2849 = 6.4*t2802*t2829;
  t2892 = Power(t2883,2);
  t2896 = 13.6*t2892;
  t2902 = t2737*t2717;
  t2903 = t2758*t2724;
  t2907 = t2902 + t2903;
  t2908 = 13.6*t2883*t2907;
  t2918 = Power(t2917,2);
  t2921 = 13.6*t2918;
  t2922 = -1.*t2758*t2737;
  t2925 = t2717*t2724;
  t2929 = t2922 + t2925;
  t2930 = 13.6*t2917*t2929;
  t2970 = Cos(var1[5]);
  t2978 = -1.*t2970*t2717;
  t2979 = Sin(var1[5]);
  t2981 = -1.*t2758*t2979;
  t2983 = t2978 + t2981;
  t3001 = t2758*t2970;
  t3006 = -1.*t2717*t2979;
  t3007 = t3001 + t3006;
  t3033 = Cos(var1[6]);
  t3035 = Sin(var1[6]);
  t3034 = -1.*t3033*t2979;
  t3038 = -1.*t2970*t3035;
  t3041 = t3034 + t3038;
  t3050 = t2970*t3033;
  t3055 = -1.*t2979*t3035;
  t3056 = t3050 + t3055;
  t3060 = t2758*t3056;
  t3063 = t3033*t2979;
  t3064 = t2970*t3035;
  t3065 = t3063 + t3064;
  t3093 = -1.*t2717*t3056;
  t3059 = t2717*t3041;
  t3061 = t3059 + t3060;
  t3066 = -1.*t2717*t3065;
  t3067 = t3066 + t3060;
  t3088 = t2758*t3041;
  t3095 = t3088 + t3093;
  t3109 = t2758*t3065;
  t3111 = t2717*t3056;
  t3112 = t3109 + t3111;
  t3049 = -1.*t2717*t3041;
  t3129 = -1.*t2970*t3033;
  t3130 = t2979*t3035;
  t3133 = t3129 + t3130;
  t2988 = Power(t2983,2);
  t2989 = 13.6*t2988;
  t2992 = t2970*t2717;
  t2993 = t2758*t2979;
  t2996 = t2992 + t2993;
  t3000 = 13.6*t2983*t2996;
  t3008 = Power(t3007,2);
  t3009 = 13.6*t3008;
  t3020 = -1.*t2758*t2970;
  t3021 = t2717*t2979;
  t3031 = t3020 + t3021;
  t3032 = 13.6*t3007*t3031;
  t3124 = 6.4*t3061*t3067;
  t3125 = 6.4*t3095*t3112;
  t3134 = t2758*t3133;
  t3135 = t3049 + t3134;
  t3141 = 6.4*t3061*t3135;
  t3142 = t2717*t3133;
  t3146 = t3088 + t3142;
  t3147 = 6.4*t3095*t3146;
  t2935 = t2896 + t2908 + t2921 + t2930 + t2796 + t2810 + t2821 + t2849;
  t3163 = Power(t2778,2);
  t3164 = 6.4*t3163;
  t3170 = t2717*t2790;
  t3171 = t3170 + t2818;
  t3175 = 6.4*t2778*t3171;
  t3176 = 6.4*t2806*t2829;
  t3177 = Power(t2829,2);
  t3178 = 6.4*t3177;
  t2864 = t2796 + t2810 + t2821 + t2849;
  t3182 = t3164 + t3175 + t3176 + t3178;
  t3183 = -0.5*var2[4]*t3182;
  t3153 = t2989 + t3000 + t3009 + t3032 + t3124 + t3125 + t3141 + t3147;
  t3198 = Power(t3061,2);
  t3199 = 6.4*t3198;
  t3200 = t2717*t3065;
  t3201 = t3200 + t3134;
  t3202 = 6.4*t3061*t3201;
  t3208 = 6.4*t3112*t3146;
  t3209 = Power(t3146,2);
  t3210 = 6.4*t3209;
  t3148 = t3124 + t3125 + t3141 + t3147;
  t3211 = t3199 + t3202 + t3208 + t3210;
  t3212 = -0.5*var2[6]*t3211;
  t3224 = 6.4*t2778*t2806;
  t3225 = 6.4*t2778*t2829;
  t3228 = 13.6*t2883*t2917;
  t3234 = 13.6*t2907*t2917;
  t3239 = 13.6*t2983*t3007;
  t3240 = 13.6*t2996*t3007;
  t3245 = 6.4*t3061*t3112;
  t3246 = 6.4*t3061*t3146;
  t3237 = 6.4*t2778*t2802;
  t3238 = 6.4*t2795*t2806;
  t3241 = 6.4*t3061*t3095;
  t3242 = 6.4*t3067*t3112;
  t3243 = t3228 + t3234 + t3237 + t3238 + t3239 + t3240 + t3241 + t3242;
  t3235 = t3228 + t3234 + t3224 + t3225;
  t3226 = t3224 + t3225;
  t3249 = t3239 + t3240 + t3245 + t3246;
  t3247 = t3245 + t3246;
  t2963 = -1.*t2758*t2790;
  t2964 = t2963 + t2801;
  t2937 = -1.*t2758*t2774;
  t2938 = t2811 + t2937;
  t3269 = 6.4*t2795*t2802;
  t3270 = 3.2*t2778*t2964;
  t3271 = 3.2*t2938*t2806;
  t3272 = 6.4*t2802*t2820;
  t3273 = -1.*t2758*t2744;
  t3274 = -1.*t2717*t2817;
  t3275 = t3273 + t3274;
  t3276 = 3.2*t2778*t3275;
  t3277 = 3.2*t2938*t2829;
  t3280 = 20.4*t2883*t2917;
  t3281 = 6.8*t2907*t2917;
  t3282 = 20.4*t2883*t2929;
  t3283 = 6.8*t2907*t2929;
  t3057 = -1.*t2758*t3056;
  t3058 = t3049 + t3057;
  t3106 = -1.*t2758*t3065;
  t3108 = t3106 + t3093;
  t3302 = -1.*t2758*t3041;
  t3296 = 20.4*t2983*t3007;
  t3297 = 6.8*t2996*t3007;
  t3298 = 20.4*t2983*t3031;
  t3299 = 6.8*t2996*t3031;
  t3309 = 6.4*t3067*t3095;
  t3310 = 3.2*t3061*t3108;
  t3311 = 3.2*t3058*t3112;
  t3312 = 6.4*t3095*t3135;
  t3313 = -1.*t2717*t3133;
  t3314 = t3302 + t3313;
  t3315 = 3.2*t3061*t3314;
  t3316 = 3.2*t3058*t3146;
  t3284 = t3280 + t3281 + t3282 + t3283 + t3269 + t3270 + t3271 + t3272 + t3276 + t3277;
  t3326 = 3.2*t2806*t2820;
  t3329 = 3.2*t2802*t3171;
  t3330 = t2803 + t3274;
  t3331 = 3.2*t2778*t3330;
  t3332 = 3.2*t2795*t2829;
  t3333 = 6.4*t2820*t2829;
  t3278 = t3269 + t3270 + t3271 + t3272 + t3276 + t3277;
  t3334 = t3237 + t3326 + t3329 + t3331 + t3332 + t3333;
  t3335 = -0.5*var2[4]*t3334;
  t3319 = t3296 + t3297 + t3298 + t3299 + t3309 + t3310 + t3311 + t3312 + t3315 + t3316;
  t3345 = 3.2*t3112*t3135;
  t3346 = 3.2*t3095*t3201;
  t3347 = t3109 + t3313;
  t3348 = 3.2*t3061*t3347;
  t3349 = 3.2*t3067*t3146;
  t3350 = 6.4*t3135*t3146;
  t3317 = t3309 + t3310 + t3311 + t3312 + t3315 + t3316;
  t3351 = t3241 + t3345 + t3346 + t3348 + t3349 + t3350;
  t3352 = -0.5*var2[6]*t3351;
  t3361 = 3.2*t2778*t2795;
  t3362 = 3.2*t2802*t2806;
  t3363 = 3.2*t2778*t2820;
  t3364 = 3.2*t2802*t2829;
  t3367 = 6.8*t2892;
  t3368 = 6.8*t2883*t2907;
  t3369 = 6.8*t2918;
  t3370 = 6.8*t2917*t2929;
  t2950 = Power(t2795,2);
  t2961 = Power(t2802,2);
  t3076 = Power(t3067,2);
  t3100 = Power(t3095,2);
  t3377 = 6.8*t2988;
  t3378 = 6.8*t2983*t2996;
  t3379 = 6.8*t3008;
  t3380 = 6.8*t3007*t3031;
  t3387 = 3.2*t3061*t3067;
  t3388 = 3.2*t3095*t3112;
  t3389 = 3.2*t3061*t3135;
  t3390 = 3.2*t3095*t3146;
  t3373 = 3.2*t2938*t2778;
  t3374 = 3.2*t2950;
  t3375 = 3.2*t2961;
  t3376 = 3.2*t2964*t2806;
  t3381 = 3.2*t3058*t3061;
  t3382 = 3.2*t3076;
  t3383 = 3.2*t3100;
  t3384 = 3.2*t3108*t3112;
  t3385 = t3367 + t3368 + t3369 + t3370 + t3373 + t3374 + t3375 + t3376 + t3377 + t3378 + t3379 + t3380 + t3381 + t3382 + t3383 + t3384;
  t3371 = t3367 + t3368 + t3369 + t3370 + t3361 + t3362 + t3363 + t3364;
  t3365 = t3361 + t3362 + t3363 + t3364;
  t3393 = t3377 + t3378 + t3379 + t3380 + t3387 + t3388 + t3389 + t3390;
  t3391 = t3387 + t3388 + t3389 + t3390;
  t3407 = -1.*t2719;
  t3408 = 1. + t3407;
  t3409 = 0.4*t3408;
  t3410 = 0.64*t2719;
  t3411 = t3409 + t3410;
  t3412 = t3411*t2724;
  t3413 = 0.24*t2737*t2738;
  t3414 = t3412 + t3413;
  t3416 = t2737*t3411;
  t3417 = -0.24*t2724*t2738;
  t3418 = t3416 + t3417;
  t3422 = -1.*t3411*t2724;
  t3423 = -0.24*t2737*t2738;
  t3424 = t3422 + t3423;
  t3415 = -1.*t3414*t2774;
  t3419 = -1.*t2744*t3418;
  t3420 = t3415 + t3419;
  t3421 = 3.2*t2802*t3420;
  t3426 = t3414*t2774;
  t3427 = t2744*t3418;
  t3431 = t3414*t2790;
  t3432 = t2774*t3418;
  t3433 = t3431 + t3432;
  t3434 = 3.2*t3433*t2820;
  t3443 = -0.24*t2719*t2724;
  t3444 = t3443 + t3423;
  t3436 = -1.*t2744*t3414;
  t3446 = 0.24*t2737*t2719;
  t3447 = t3446 + t3417;
  t3438 = -1.*t3418*t2817;
  t3401 = Power(t2737,2);
  t3402 = 0.11*t3401;
  t3403 = Power(t2724,2);
  t3404 = 0.11*t3403;
  t3405 = t3402 + t3404;
  t3406 = 6.8*t2929*t3405;
  t3466 = -1.*t3033;
  t3467 = 1. + t3466;
  t3468 = 0.4*t3467;
  t3469 = 0.64*t3033;
  t3470 = t3468 + t3469;
  t3471 = t3470*t2979;
  t3472 = 0.24*t2970*t3035;
  t3473 = t3471 + t3472;
  t3475 = t2970*t3470;
  t3476 = -0.24*t2979*t3035;
  t3477 = t3475 + t3476;
  t3460 = Power(t2970,2);
  t3461 = 0.11*t3460;
  t3462 = Power(t2979,2);
  t3463 = 0.11*t3462;
  t3464 = t3461 + t3463;
  t3465 = 6.8*t3031*t3464;
  t3474 = -1.*t3473*t3056;
  t3478 = -1.*t3041*t3477;
  t3479 = t3474 + t3478;
  t3481 = t3473*t3065;
  t3482 = t3056*t3477;
  t3483 = t3481 + t3482;
  t3488 = -1.*t3470*t2979;
  t3489 = -0.24*t2970*t3035;
  t3490 = t3488 + t3489;
  t3487 = 3.2*t3095*t3479;
  t3492 = t3473*t3056;
  t3493 = t3041*t3477;
  t3497 = 3.2*t3483*t3135;
  t3506 = -0.24*t3033*t2979;
  t3507 = t3506 + t3489;
  t3499 = -1.*t3041*t3473;
  t3509 = 0.24*t2970*t3033;
  t3510 = t3509 + t3476;
  t3501 = -1.*t3477*t3133;
  t3425 = t3424*t2774;
  t3428 = t2790*t3418;
  t3429 = t3425 + t3426 + t3427 + t3428;
  t3430 = 3.2*t2802*t3429;
  t3435 = -1.*t2744*t3424;
  t3437 = -1.*t2774*t3418;
  t3439 = t3435 + t3436 + t3437 + t3438;
  t3440 = 3.2*t2795*t3439;
  t3441 = t3406 + t3421 + t3430 + t3434 + t3440;
  t3529 = -1.*t2737*t3411;
  t3530 = 0.24*t2724*t2738;
  t3531 = t3529 + t3530;
  t3523 = 3.2*t3433*t3171;
  t3524 = 3.2*t3420*t2829;
  t3445 = t3444*t2774;
  t3448 = t2790*t3447;
  t3449 = t3445 + t3426 + t3427 + t3448;
  t3528 = -1.*t2790*t3418;
  t3534 = -1.*t3414*t2817;
  t3451 = -1.*t2744*t3444;
  t3452 = -1.*t2774*t3447;
  t3453 = t3451 + t3436 + t3452 + t3438;
  t3539 = t2744*t3414;
  t3552 = -0.24*t2737*t2719;
  t3553 = t3552 + t3530;
  t3543 = t3418*t2817;
  t3450 = 3.2*t2802*t3449;
  t3454 = 3.2*t2795*t3453;
  t3455 = t3421 + t3450 + t3434 + t3454;
  t3548 = 3.2*t3429*t2829;
  t3549 = 3.2*t3449*t2829;
  t3550 = -1.*t3444*t2774;
  t3551 = -1.*t2744*t3447;
  t3554 = -1.*t2744*t3553;
  t3555 = -1.*t3424*t2817;
  t3556 = -1.*t3444*t2817;
  t3557 = t3550 + t3419 + t3528 + t3551 + t3554 + t3555 + t3556 + t3534;
  t3558 = 3.2*t2806*t3557;
  t3559 = 3.2*t2778*t3439;
  t3560 = 3.2*t2778*t3453;
  t3561 = t2744*t3424;
  t3562 = t2744*t3444;
  t3563 = t3444*t2790;
  t3564 = t2774*t3447;
  t3565 = t2774*t3553;
  t3566 = t3561 + t3562 + t3539 + t3563 + t3432 + t3564 + t3565 + t3543;
  t3567 = 3.2*t2778*t3566;
  t3568 = t3523 + t3524 + t3548 + t3549 + t3558 + t3559 + t3560 + t3567;
  t3491 = t3490*t3056;
  t3494 = t3065*t3477;
  t3495 = t3491 + t3492 + t3493 + t3494;
  t3496 = 3.2*t3095*t3495;
  t3498 = -1.*t3041*t3490;
  t3500 = -1.*t3056*t3477;
  t3502 = t3498 + t3499 + t3500 + t3501;
  t3503 = 3.2*t3067*t3502;
  t3504 = t3465 + t3487 + t3496 + t3497 + t3503;
  t3595 = -1.*t2970*t3470;
  t3596 = 0.24*t2979*t3035;
  t3597 = t3595 + t3596;
  t3589 = 3.2*t3483*t3201;
  t3590 = 3.2*t3479*t3146;
  t3508 = t3507*t3056;
  t3511 = t3065*t3510;
  t3512 = t3508 + t3492 + t3493 + t3511;
  t3594 = -1.*t3065*t3477;
  t3600 = -1.*t3473*t3133;
  t3514 = -1.*t3041*t3507;
  t3515 = -1.*t3056*t3510;
  t3516 = t3514 + t3499 + t3515 + t3501;
  t3605 = t3041*t3473;
  t3618 = -0.24*t2970*t3033;
  t3619 = t3618 + t3596;
  t3609 = t3477*t3133;
  t3513 = 3.2*t3095*t3512;
  t3517 = 3.2*t3067*t3516;
  t3518 = t3487 + t3513 + t3497 + t3517;
  t3614 = 3.2*t3495*t3146;
  t3615 = 3.2*t3512*t3146;
  t3616 = -1.*t3507*t3056;
  t3617 = -1.*t3041*t3510;
  t3620 = -1.*t3041*t3619;
  t3621 = -1.*t3490*t3133;
  t3622 = -1.*t3507*t3133;
  t3623 = t3616 + t3478 + t3594 + t3617 + t3620 + t3621 + t3622 + t3600;
  t3624 = 3.2*t3112*t3623;
  t3625 = 3.2*t3061*t3502;
  t3626 = 3.2*t3061*t3516;
  t3627 = t3041*t3490;
  t3628 = t3041*t3507;
  t3629 = t3507*t3065;
  t3630 = t3056*t3510;
  t3631 = t3056*t3619;
  t3632 = t3627 + t3628 + t3605 + t3629 + t3482 + t3630 + t3631 + t3609;
  t3633 = 3.2*t3061*t3632;
  t3634 = t3589 + t3590 + t3614 + t3615 + t3624 + t3625 + t3626 + t3633;
  t3655 = 3.2*t2778*t3420;
  t3657 = 3.2*t3433*t2829;
  t3654 = 6.8*t2883*t3405;
  t3668 = 6.8*t2983*t3464;
  t3673 = 3.2*t3061*t3479;
  t3675 = 3.2*t3483*t3146;
  t3665 = -2.88*t2717;
  t3666 = 3.2*t2795*t3420;
  t3667 = 3.2*t2802*t3433;
  t3669 = 3.2*t3067*t3479;
  t3670 = 3.2*t3095*t3483;
  t3671 = t3665 + t3654 + t3666 + t3667 + t3668 + t3669 + t3670;
  t3656 = 3.2*t2778*t3429;
  t3658 = 3.2*t2806*t3439;
  t3659 = t3654 + t3655 + t3656 + t3657 + t3658;
  t3661 = 3.2*t2778*t3449;
  t3662 = 3.2*t2806*t3453;
  t3663 = t3655 + t3661 + t3657 + t3662;
  t3674 = 3.2*t3061*t3495;
  t3676 = 3.2*t3112*t3502;
  t3677 = t3668 + t3673 + t3674 + t3675 + t3676;
  t3679 = 3.2*t3061*t3512;
  t3680 = 3.2*t3112*t3516;
  t3681 = t3673 + t3679 + t3675 + t3680;
  t3689 = 0.748*t2929;
  t3695 = t3411*t2738;
  t3696 = -0.24*t2719*t2738;
  t3697 = t3695 + t3696;
  t3690 = t3411*t2719;
  t3691 = Power(t2738,2);
  t3692 = 0.24*t3691;
  t3693 = t3690 + t3692;
  t3701 = 3.2*t3697*t2802;
  t3702 = 3.2*t3693*t2820;
  t3703 = t3689 + t3701 + t3702;
  t3705 = Power(t2719,2);
  t3706 = -0.24*t3705;
  t3707 = t3690 + t3706;
  t3718 = 3.2*t3693*t3171;
  t3719 = 3.2*t3697*t2829;
  t3709 = -1.*t3411*t2738;
  t3710 = 0.24*t2719*t2738;
  t3711 = t3709 + t3710;
  t3708 = 3.2*t3707*t2795;
  t3712 = 3.2*t3711*t2802;
  t3713 = t3708 + t3701 + t3712 + t3702;
  t3722 = 3.2*t3707*t2778;
  t3723 = 3.2*t3711*t2829;
  t3724 = t3722 + t3718 + t3719 + t3723;
  t3741 = 0.748*t2883;
  t3746 = 3.2*t3697*t2778;
  t3747 = 3.2*t3693*t2829;
  t3742 = 3.2*t3697*t2795;
  t3743 = 3.2*t3693*t2802;
  t3744 = t3741 + t3742 + t3743;
  t3748 = t3741 + t3746 + t3747;
  t3750 = 3.2*t3711*t2778;
  t3751 = 3.2*t3707*t2806;
  t3752 = t3746 + t3750 + t3751 + t3747;
  t3763 = -0.384*var2[2]*t2820;
  t3764 = -0.384*var2[3]*t3171;
  t3765 = -0.384*var2[4]*t3171;
  t3766 = t3763 + t3764 + t3765;
  t3767 = var2[0]*t3766;
  t3773 = -0.384*var2[0]*t2829;
  t3774 = 0.748*t3031;
  t3780 = t3470*t3035;
  t3781 = -0.24*t3033*t3035;
  t3782 = t3780 + t3781;
  t3775 = t3470*t3033;
  t3776 = Power(t3035,2);
  t3777 = 0.24*t3776;
  t3778 = t3775 + t3777;
  t3786 = 3.2*t3782*t3095;
  t3787 = 3.2*t3778*t3135;
  t3788 = t3774 + t3786 + t3787;
  t3790 = Power(t3033,2);
  t3791 = -0.24*t3790;
  t3792 = t3775 + t3791;
  t3803 = 3.2*t3778*t3201;
  t3804 = 3.2*t3782*t3146;
  t3794 = -1.*t3470*t3035;
  t3795 = 0.24*t3033*t3035;
  t3796 = t3794 + t3795;
  t3793 = 3.2*t3792*t3067;
  t3797 = 3.2*t3796*t3095;
  t3798 = t3793 + t3786 + t3797 + t3787;
  t3807 = 3.2*t3792*t3061;
  t3808 = 3.2*t3796*t3146;
  t3809 = t3807 + t3803 + t3804 + t3808;
  t3826 = 0.748*t2983;
  t3831 = 3.2*t3782*t3061;
  t3832 = 3.2*t3778*t3146;
  t3827 = 3.2*t3782*t3067;
  t3828 = 3.2*t3778*t3095;
  t3829 = t3826 + t3827 + t3828;
  t3833 = t3826 + t3831 + t3832;
  t3835 = 3.2*t3796*t3061;
  t3836 = 3.2*t3792*t3112;
  t3837 = t3831 + t3835 + t3836 + t3832;
  t3848 = -0.384*var2[2]*t3135;
  t3849 = -0.384*var2[5]*t3201;
  t3850 = -0.384*var2[6]*t3201;
  t3851 = t3848 + t3849 + t3850;
  t3852 = var2[0]*t3851;
  t3858 = -0.384*var2[0]*t3146;
  p_output1[0]=var2[0]*(-0.5*(t2896 + t2908 + t2921 + t2930 + 6.4*t2778*t2938 + 6.4*t2950 + 6.4*t2961 + 6.4*t2806*t2964 + t2989 + t3000 + t3009 + t3032 + 6.4*t3058*t3061 + 6.4*t3076 + 6.4*t3100 + 6.4*t3108*t3112)*var2[2] - 0.5*t2935*var2[3] - 0.5*t2864*var2[4] - 0.5*t3153*var2[5] - 0.5*t3148*var2[6]);
  p_output1[1]=var2[0]*(t3183 - 0.5*t2935*var2[2] - 0.5*(t2896 + t2908 + t2921 + t2930 + t3164 + t3175 + t3176 + t3178)*var2[3]);
  p_output1[2]=var2[0]*(t3183 - 0.5*t2864*var2[2] - 0.5*t3182*var2[3]);
  p_output1[3]=var2[0]*(t3212 - 0.5*t3153*var2[2] - 0.5*(t2989 + t3000 + t3009 + t3032 + t3199 + t3202 + t3208 + t3210)*var2[5]);
  p_output1[4]=var2[0]*(t3212 - 0.5*t3148*var2[2] - 0.5*t3211*var2[5]);
  p_output1[5]=-0.5*t3243*var2[2] - 0.5*t3235*var2[3] - 0.5*t3226*var2[4] - 0.5*t3249*var2[5] - 0.5*t3247*var2[6];
  p_output1[6]=-0.5*t3243*var2[0];
  p_output1[7]=-0.5*t3235*var2[0];
  p_output1[8]=-0.5*t3226*var2[0];
  p_output1[9]=-0.5*t3249*var2[0];
  p_output1[10]=-0.5*t3247*var2[0];
  p_output1[11]=var2[0]*(-0.5*(9.6*t2802*t2938 + 9.6*t2795*t2964 + 9.6*t3058*t3095 + 9.6*t3067*t3108 + 3.2*t2806*(t2937 + t3170) + 3.2*t3112*(t3057 + t3200) + 3.2*t2778*(t2805 + t3273) + t3280 + t3281 + t3282 + t3283 + t3296 + t3297 + t3298 + t3299 + 3.2*t3061*(t3111 + t3302))*var2[2] - 0.5*t3284*var2[3] - 0.5*t3278*var2[4] - 0.5*t3319*var2[5] - 0.5*t3317*var2[6]);
  p_output1[12]=var2[0]*(t3335 - 0.5*t3284*var2[2] - 0.5*(t3237 + t3280 + t3281 + t3282 + t3283 + t3326 + t3329 + t3331 + t3332 + t3333)*var2[3]);
  p_output1[13]=var2[0]*(t3335 - 0.5*t3278*var2[2] - 0.5*t3334*var2[3]);
  p_output1[14]=var2[0]*(t3352 - 0.5*t3319*var2[2] - 0.5*(t3241 + t3296 + t3297 + t3298 + t3299 + t3345 + t3346 + t3348 + t3349 + t3350)*var2[5]);
  p_output1[15]=var2[0]*(t3352 - 0.5*t3317*var2[2] - 0.5*t3351*var2[5]);
  p_output1[16]=-0.5*t3385*var2[2] - 0.5*t3371*var2[3] - 0.5*t3365*var2[4] - 0.5*t3393*var2[5] - 0.5*t3391*var2[6];
  p_output1[17]=-0.5*t3385*var2[0];
  p_output1[18]=-0.5*t3371*var2[0];
  p_output1[19]=-0.5*t3365*var2[0];
  p_output1[20]=-0.5*t3393*var2[0];
  p_output1[21]=-0.5*t3391*var2[0];
  p_output1[22]=var2[0]*(-0.5*(-2.88*t2758 + t3406 + 3.2*t2964*t3420 + 3.2*t2938*t3433 + t3465 + 3.2*t3108*t3479 + 3.2*t3058*t3483)*var2[2] - 0.5*t3441*var2[3] - 0.5*t3455*var2[4] - 0.5*t3504*var2[5] - 0.5*t3518*var2[6]);
  p_output1[23]=var2[0]*(-0.5*t3441*var2[2] - 0.5*(t3406 + 6.4*t2829*t3429 + 6.4*t2778*t3439 + t3523 + t3524 + 3.2*t2806*(-2.*t2744*t3418 - 1.*t2774*t3424 - 2.*t2817*t3424 + t3528 - 1.*t2744*t3531 + t3534) + 3.2*t2778*(2.*t2774*t3418 + 2.*t2744*t3424 + t2790*t3424 + t2774*t3531 + t3539 + t3543))*var2[3] - 0.5*t3568*var2[4]);
  p_output1[24]=var2[0]*(-0.5*t3455*var2[2] - 0.5*t3568*var2[3] - 0.5*(6.4*t2829*t3449 + 6.4*t2778*t3453 + t3523 + t3524 + 3.2*t2806*(-2.*t2817*t3444 - 2.*t2744*t3447 + t3528 + t3534 + t3550 + t3554) + 3.2*t2778*(2.*t2744*t3444 + 2.*t2774*t3447 + t3539 + t3543 + t3563 + t3565))*var2[4]);
  p_output1[25]=var2[0]*(-0.5*t3504*var2[2] - 0.5*(t3465 + 6.4*t3146*t3495 + 6.4*t3061*t3502 + t3589 + t3590 + 3.2*t3112*(-2.*t3041*t3477 - 1.*t3056*t3490 - 2.*t3133*t3490 + t3594 - 1.*t3041*t3597 + t3600) + 3.2*t3061*(2.*t3056*t3477 + 2.*t3041*t3490 + t3065*t3490 + t3056*t3597 + t3605 + t3609))*var2[5] - 0.5*t3634*var2[6]);
  p_output1[26]=var2[0]*(-0.5*t3518*var2[2] - 0.5*t3634*var2[5] - 0.5*(6.4*t3146*t3512 + 6.4*t3061*t3516 + t3589 + t3590 + 3.2*t3112*(-2.*t3133*t3507 - 2.*t3041*t3510 + t3594 + t3600 + t3616 + t3620) + 3.2*t3061*(2.*t3041*t3507 + 2.*t3056*t3510 + t3605 + t3609 + t3629 + t3631))*var2[6]);
  p_output1[27]=-0.5*t3671*var2[2] - 0.5*t3659*var2[3] - 0.5*t3663*var2[4] - 0.5*t3677*var2[5] - 0.5*t3681*var2[6];
  p_output1[28]=-0.5*t3671*var2[0];
  p_output1[29]=-0.5*t3659*var2[0];
  p_output1[30]=-0.5*t3663*var2[0];
  p_output1[31]=-0.5*t3677*var2[0];
  p_output1[32]=-0.5*t3681*var2[0];
  p_output1[33]=var2[0]*(-0.5*(t3689 + 3.2*t2938*t3693 + 3.2*t2964*t3697)*var2[2] - 0.5*t3703*var2[3] - 0.5*t3713*var2[4]);
  p_output1[34]=var2[0]*(-0.5*t3703*var2[2] - 0.5*(t3689 + t3718 + t3719)*var2[3] - 0.5*t3724*var2[4]);
  p_output1[35]=var2[0]*(-0.5*t3713*var2[2] - 0.5*t3724*var2[3] - 0.5*(3.2*t2778*(-1.*t2719*t3411 + 0.24*t3705) + 6.4*t2778*t3707 + 3.2*t2806*t3711 + 6.4*t2829*t3711 + t3718 + t3719)*var2[4]);
  p_output1[36]=-0.5*t3744*var2[2] - 0.5*t3748*var2[3] - 0.5*t3752*var2[4];
  p_output1[37]=-0.5*t3744*var2[0];
  p_output1[38]=-0.5*t3748*var2[0];
  p_output1[39]=-0.5*t3752*var2[0];
  p_output1[40]=var2[0]*(-0.384*t2938*var2[2] - 0.384*t2820*var2[3] - 0.384*t2820*var2[4]);
  p_output1[41]=t3767;
  p_output1[42]=t3767;
  p_output1[43]=-0.384*t2802*var2[2] - 0.384*t2829*var2[3] - 0.384*t2829*var2[4];
  p_output1[44]=-0.384*t2802*var2[0];
  p_output1[45]=t3773;
  p_output1[46]=t3773;
  p_output1[47]=var2[0]*(-0.5*(t3774 + 3.2*t3058*t3778 + 3.2*t3108*t3782)*var2[2] - 0.5*t3788*var2[5] - 0.5*t3798*var2[6]);
  p_output1[48]=var2[0]*(-0.5*t3788*var2[2] - 0.5*(t3774 + t3803 + t3804)*var2[5] - 0.5*t3809*var2[6]);
  p_output1[49]=var2[0]*(-0.5*t3798*var2[2] - 0.5*t3809*var2[5] - 0.5*(3.2*t3061*(-1.*t3033*t3470 + 0.24*t3790) + 6.4*t3061*t3792 + 3.2*t3112*t3796 + 6.4*t3146*t3796 + t3803 + t3804)*var2[6]);
  p_output1[50]=-0.5*t3829*var2[2] - 0.5*t3833*var2[5] - 0.5*t3837*var2[6];
  p_output1[51]=-0.5*t3829*var2[0];
  p_output1[52]=-0.5*t3833*var2[0];
  p_output1[53]=-0.5*t3837*var2[0];
  p_output1[54]=var2[0]*(-0.384*t3058*var2[2] - 0.384*t3135*var2[5] - 0.384*t3135*var2[6]);
  p_output1[55]=t3852;
  p_output1[56]=t3852;
  p_output1[57]=-0.384*t3095*var2[2] - 0.384*t3146*var2[5] - 0.384*t3146*var2[6];
  p_output1[58]=-0.384*t3095*var2[0];
  p_output1[59]=t3858;
  p_output1[60]=t3858;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec1_five_link_walker.hh"

namespace LeftStance
{

void J_Ce1_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
