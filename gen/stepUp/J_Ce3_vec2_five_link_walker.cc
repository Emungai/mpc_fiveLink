/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:21:07 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t134;
  double t120;
  double t130;
  double t146;
  double t162;
  double t98;
  double t171;
  double t173;
  double t174;
  double t216;
  double t219;
  double t220;
  double t222;
  double t223;
  double t133;
  double t150;
  double t152;
  double t161;
  double t176;
  double t178;
  double t321;
  double t302;
  double t303;
  double t324;
  double t337;
  double t338;
  double t339;
  double t358;
  double t361;
  double t362;
  double t363;
  double t365;
  double t316;
  double t329;
  double t331;
  double t332;
  double t340;
  double t341;
  double t411;
  double t418;
  double t419;
  double t187;
  double t202;
  double t210;
  double t429;
  double t431;
  double t432;
  double t275;
  double t260;
  double t270;
  double t271;
  double t273;
  double t276;
  double t481;
  double t489;
  double t492;
  double t493;
  double t352;
  double t353;
  double t355;
  double t506;
  double t507;
  double t509;
  double t387;
  double t371;
  double t384;
  double t385;
  double t386;
  double t388;
  double t546;
  double t423;
  double t424;
  double t427;
  double t437;
  double t439;
  double t485;
  double t486;
  double t460;
  double t477;
  double t478;
  double t480;
  double t482;
  double t499;
  double t504;
  double t505;
  double t518;
  double t523;
  double t573;
  double t574;
  double t539;
  double t540;
  double t541;
  double t545;
  double t547;
  double t6778;
  double t6788;
  double t6790;
  double t6795;
  double t6802;
  double t6804;
  double t7013;
  double t7018;
  double t7019;
  double t7028;
  double t7032;
  double t7033;
  double t215;
  double t224;
  double t230;
  double t240;
  double t288;
  double t292;
  double t294;
  double t295;
  double t7074;
  double t7081;
  double t7082;
  double t7089;
  double t7090;
  double t420;
  double t421;
  double t422;
  double t433;
  double t434;
  double t436;
  double t2920;
  double t2924;
  double t3074;
  double t3085;
  double t4336;
  double t4337;
  double t4750;
  double t4757;
  double t7105;
  double t7106;
  double t6765;
  double t6770;
  double t6771;
  double t6773;
  double t6776;
  double t6777;
  double t6792;
  double t6806;
  double t6807;
  double t6809;
  double t6810;
  double t6826;
  double t7172;
  double t7173;
  double t7174;
  double t7093;
  double t7094;
  double t7095;
  double t7103;
  double t7104;
  double t7108;
  double t7109;
  double t7113;
  double t7114;
  double t7115;
  double t7116;
  double t7117;
  double t7154;
  double t7157;
  double t7158;
  double t7171;
  double t7177;
  double t7178;
  double t7182;
  double t7214;
  double t7219;
  double t7184;
  double t7227;
  double t7228;
  double t7186;
  double t357;
  double t368;
  double t369;
  double t370;
  double t390;
  double t391;
  double t392;
  double t406;
  double t7254;
  double t7255;
  double t7256;
  double t7258;
  double t7259;
  double t494;
  double t495;
  double t498;
  double t510;
  double t514;
  double t516;
  double t6456;
  double t6457;
  double t6458;
  double t6620;
  double t6689;
  double t6691;
  double t6718;
  double t6730;
  double t7310;
  double t7316;
  double t6846;
  double t6850;
  double t6851;
  double t6852;
  double t6853;
  double t6854;
  double t7024;
  double t7034;
  double t7052;
  double t7062;
  double t7063;
  double t7064;
  double t7333;
  double t7334;
  double t7335;
  double t7260;
  double t7261;
  double t7262;
  double t7303;
  double t7304;
  double t7317;
  double t7318;
  double t7322;
  double t7323;
  double t7324;
  double t7325;
  double t7326;
  double t7327;
  double t7328;
  double t7329;
  double t7332;
  double t7337;
  double t7338;
  double t7342;
  double t7374;
  double t7375;
  double t7344;
  double t7377;
  double t7378;
  double t7349;
  double t7390;
  double t7391;
  double t7392;
  double t7393;
  double t7394;
  double t7395;
  double t7396;
  double t7397;
  double t7398;
  double t7399;
  double t7400;
  double t7401;
  double t7402;
  double t7403;
  double t7404;
  double t7405;
  double t7406;
  double t7407;
  double t7408;
  double t7409;
  double t7410;
  double t7411;
  double t7412;
  double t7437;
  double t7438;
  double t7439;
  double t7440;
  double t7441;
  double t7442;
  double t7443;
  double t7444;
  double t7415;
  double t7416;
  double t7417;
  double t7418;
  double t7421;
  double t7422;
  double t7423;
  double t7424;
  double t7100;
  double t7101;
  double t7110;
  double t7112;
  double t7164;
  double t7170;
  double t7176;
  double t7179;
  double t7180;
  double t7181;
  double t7183;
  double t7185;
  double t7187;
  double t7188;
  double t7189;
  double t7190;
  double t7191;
  double t7192;
  double t7452;
  double t7480;
  double t7481;
  double t7482;
  double t7453;
  double t7197;
  double t7198;
  double t7202;
  double t7454;
  double t7193;
  double t7194;
  double t7195;
  double t7455;
  double t7458;
  double t7459;
  double t7460;
  double t7461;
  double t7462;
  double t7465;
  double t7466;
  double t7467;
  double t7468;
  double t7469;
  double t7470;
  double t7471;
  double t7474;
  double t7220;
  double t7235;
  double t7236;
  double t7476;
  double t7479;
  double t7485;
  double t7240;
  double t7241;
  double t7246;
  double t7490;
  double t7513;
  double t7514;
  double t7494;
  double t7426;
  double t7427;
  double t7533;
  double t7534;
  double t7535;
  double t7536;
  double t7537;
  double t7547;
  double t7548;
  double t7549;
  double t7550;
  double t7551;
  double t7540;
  double t7541;
  double t7542;
  double t7196;
  double t7203;
  double t7204;
  double t7206;
  double t7210;
  double t7211;
  double t7212;
  double t7213;
  double t7239;
  double t7247;
  double t7249;
  double t7250;
  double t7251;
  double t7252;
  double t7501;
  double t7502;
  double t7503;
  double t7504;
  double t7505;
  double t7506;
  double t7507;
  double t7508;
  double t7509;
  double t7510;
  double t7511;
  double t7512;
  double t7515;
  double t7516;
  double t7517;
  double t7518;
  double t7519;
  double t7520;
  double t7521;
  double t7522;
  double t7523;
  double t7524;
  double t7525;
  double t7526;
  double t7527;
  double t7528;
  double t7529;
  double t7530;
  double t7531;
  double t7532;
  double t7539;
  double t7580;
  double t7589;
  double t7590;
  double t7591;
  double t7582;
  double t7583;
  double t7584;
  double t7556;
  double t7263;
  double t7300;
  double t7319;
  double t7320;
  double t7330;
  double t7331;
  double t7336;
  double t7339;
  double t7340;
  double t7341;
  double t7343;
  double t7348;
  double t7350;
  double t7352;
  double t7356;
  double t7357;
  double t7358;
  double t7359;
  double t7596;
  double t7624;
  double t7625;
  double t7626;
  double t7597;
  double t7364;
  double t7365;
  double t7366;
  double t7598;
  double t7360;
  double t7361;
  double t7362;
  double t7599;
  double t7602;
  double t7603;
  double t7604;
  double t7605;
  double t7606;
  double t7609;
  double t7610;
  double t7611;
  double t7612;
  double t7613;
  double t7614;
  double t7615;
  double t7618;
  double t7376;
  double t7379;
  double t7380;
  double t7620;
  double t7623;
  double t7629;
  double t7382;
  double t7383;
  double t7384;
  double t7634;
  double t7657;
  double t7658;
  double t7638;
  double t7430;
  double t7431;
  double t7677;
  double t7678;
  double t7679;
  double t7680;
  double t7681;
  double t7691;
  double t7692;
  double t7693;
  double t7694;
  double t7695;
  double t7684;
  double t7685;
  double t7686;
  double t7363;
  double t7367;
  double t7368;
  double t7369;
  double t7370;
  double t7371;
  double t7372;
  double t7373;
  double t7381;
  double t7385;
  double t7386;
  double t7387;
  double t7388;
  double t7389;
  double t7645;
  double t7646;
  double t7647;
  double t7648;
  double t7649;
  double t7650;
  double t7651;
  double t7652;
  double t7653;
  double t7654;
  double t7655;
  double t7656;
  double t7659;
  double t7660;
  double t7661;
  double t7662;
  double t7663;
  double t7664;
  double t7665;
  double t7666;
  double t7667;
  double t7668;
  double t7669;
  double t7670;
  double t7671;
  double t7672;
  double t7673;
  double t7674;
  double t7675;
  double t7676;
  double t7683;
  double t7724;
  double t7733;
  double t7734;
  double t7735;
  double t7726;
  double t7727;
  double t7728;
  double t7700;
  t134 = Cos(var1[3]);
  t120 = Cos(var1[4]);
  t130 = Sin(var1[3]);
  t146 = Sin(var1[4]);
  t162 = Sin(var1[2]);
  t98 = Cos(var1[2]);
  t171 = t134*t120;
  t173 = -1.*t130*t146;
  t174 = t171 + t173;
  t216 = -1.*t120;
  t219 = 1. + t216;
  t220 = 0.4*t219;
  t222 = 0.64*t120;
  t223 = t220 + t222;
  t133 = -1.*t120*t130;
  t150 = -1.*t134*t146;
  t152 = t133 + t150;
  t161 = -1.*t98*t152;
  t176 = t162*t174;
  t178 = t161 + t176;
  t321 = Cos(var1[5]);
  t302 = Cos(var1[6]);
  t303 = Sin(var1[5]);
  t324 = Sin(var1[6]);
  t337 = t321*t302;
  t338 = -1.*t303*t324;
  t339 = t337 + t338;
  t358 = -1.*t302;
  t361 = 1. + t358;
  t362 = 0.4*t361;
  t363 = 0.64*t302;
  t365 = t362 + t363;
  t316 = -1.*t302*t303;
  t329 = -1.*t321*t324;
  t331 = t316 + t329;
  t332 = -1.*t98*t331;
  t340 = t162*t339;
  t341 = t332 + t340;
  t411 = -1.*t134*t162;
  t418 = -1.*t98*t130;
  t419 = t411 + t418;
  t187 = t134*t162;
  t202 = t98*t130;
  t210 = t187 + t202;
  t429 = -1.*t98*t134;
  t431 = t162*t130;
  t432 = t429 + t431;
  t275 = -1.*t98*t174;
  t260 = t120*t130;
  t270 = t134*t146;
  t271 = t260 + t270;
  t273 = t162*t271;
  t276 = t273 + t275;
  t481 = -1.*t162*t174;
  t489 = -1.*t321*t162;
  t492 = -1.*t98*t303;
  t493 = t489 + t492;
  t352 = t321*t162;
  t353 = t98*t303;
  t355 = t352 + t353;
  t506 = -1.*t98*t321;
  t507 = t162*t303;
  t509 = t506 + t507;
  t387 = -1.*t98*t339;
  t371 = t302*t303;
  t384 = t321*t324;
  t385 = t371 + t384;
  t386 = t162*t385;
  t388 = t386 + t387;
  t546 = -1.*t162*t339;
  t423 = t98*t134;
  t424 = -1.*t162*t130;
  t427 = t423 + t424;
  t437 = -1.*t162*t152;
  t439 = t437 + t275;
  t485 = t98*t152;
  t486 = t485 + t481;
  t460 = -1.*t162*t271;
  t477 = t98*t174;
  t478 = t460 + t477;
  t480 = -1.*t98*t271;
  t482 = t480 + t481;
  t499 = t98*t321;
  t504 = -1.*t162*t303;
  t505 = t499 + t504;
  t518 = -1.*t162*t331;
  t523 = t518 + t387;
  t573 = t98*t331;
  t574 = t573 + t546;
  t539 = -1.*t162*t385;
  t540 = t98*t339;
  t541 = t539 + t540;
  t545 = -1.*t98*t385;
  t547 = t545 + t546;
  t6778 = t223*t130;
  t6788 = 0.24*t134*t146;
  t6790 = t6778 + t6788;
  t6795 = t134*t223;
  t6802 = -0.24*t130*t146;
  t6804 = t6795 + t6802;
  t7013 = t365*t303;
  t7018 = 0.24*t321*t324;
  t7019 = t7013 + t7018;
  t7028 = t321*t365;
  t7032 = -0.24*t303*t324;
  t7033 = t7028 + t7032;
  t215 = -0.748*t210;
  t224 = t223*t146;
  t230 = -0.24*t120*t146;
  t240 = t224 + t230;
  t288 = t223*t120;
  t292 = Power(t146,2);
  t294 = 0.24*t292;
  t295 = t288 + t294;
  t7074 = -1.*t134*t120;
  t7081 = t130*t146;
  t7082 = t7074 + t7081;
  t7089 = -1.*t162*t7082;
  t7090 = t161 + t7089;
  t420 = Power(t419,2);
  t421 = -13.6*t420;
  t422 = -13.6*t419*t210;
  t433 = -13.6*t427*t432;
  t434 = Power(t432,2);
  t436 = -13.6*t434;
  t2920 = -20.4*t419*t427;
  t2924 = -6.8*t210*t427;
  t3074 = -20.4*t419*t432;
  t3085 = -6.8*t210*t432;
  t4336 = t162*t152;
  t4337 = t4336 + t477;
  t4750 = t98*t271;
  t4757 = t4750 + t176;
  t7105 = t98*t7082;
  t7106 = t437 + t7105;
  t6765 = Power(t134,2);
  t6770 = 0.11*t6765;
  t6771 = Power(t130,2);
  t6773 = 0.11*t6771;
  t6776 = t6770 + t6773;
  t6777 = -6.8*t210*t6776;
  t6792 = -1.*t6790*t174;
  t6806 = -1.*t152*t6804;
  t6807 = t6792 + t6806;
  t6809 = t6790*t271;
  t6810 = t174*t6804;
  t6826 = t6809 + t6810;
  t7172 = -1.*t223*t130;
  t7173 = -0.24*t134*t146;
  t7174 = t7172 + t7173;
  t7093 = 0.384*var2[4]*t7090;
  t7094 = -3.2*t240*t439;
  t7095 = -3.2*t295*t7090;
  t7103 = -6.4*t439*t478;
  t7104 = -6.4*t486*t482;
  t7108 = -6.4*t439*t7106;
  t7109 = -6.4*t486*t7090;
  t7113 = -6.4*t478*t486;
  t7114 = -3.2*t4337*t482;
  t7115 = -3.2*t439*t4757;
  t7116 = -6.4*t486*t7106;
  t7117 = -3.2*t4337*t7090;
  t7154 = t162*t7082;
  t7157 = t485 + t7154;
  t7158 = -3.2*t439*t7157;
  t7171 = -3.2*t439*t6807;
  t7177 = t6790*t174;
  t7178 = t152*t6804;
  t7182 = -3.2*t6826*t7090;
  t7214 = -0.24*t120*t130;
  t7219 = t7214 + t7173;
  t7184 = -1.*t152*t6790;
  t7227 = 0.24*t134*t120;
  t7228 = t7227 + t6802;
  t7186 = -1.*t6804*t7082;
  t357 = -0.748*t355;
  t368 = t365*t324;
  t369 = -0.24*t302*t324;
  t370 = t368 + t369;
  t390 = t365*t302;
  t391 = Power(t324,2);
  t392 = 0.24*t391;
  t406 = t390 + t392;
  t7254 = -1.*t321*t302;
  t7255 = t303*t324;
  t7256 = t7254 + t7255;
  t7258 = -1.*t162*t7256;
  t7259 = t332 + t7258;
  t494 = Power(t493,2);
  t495 = -13.6*t494;
  t498 = -13.6*t493*t355;
  t510 = -13.6*t505*t509;
  t514 = Power(t509,2);
  t516 = -13.6*t514;
  t6456 = -20.4*t493*t505;
  t6457 = -6.8*t355*t505;
  t6458 = -20.4*t493*t509;
  t6620 = -6.8*t355*t509;
  t6689 = t162*t331;
  t6691 = t6689 + t540;
  t6718 = t98*t385;
  t6730 = t6718 + t340;
  t7310 = t98*t7256;
  t7316 = t518 + t7310;
  t6846 = Power(t321,2);
  t6850 = 0.11*t6846;
  t6851 = Power(t303,2);
  t6852 = 0.11*t6851;
  t6853 = t6850 + t6852;
  t6854 = -6.8*t355*t6853;
  t7024 = -1.*t7019*t339;
  t7034 = -1.*t331*t7033;
  t7052 = t7024 + t7034;
  t7062 = t7019*t385;
  t7063 = t339*t7033;
  t7064 = t7062 + t7063;
  t7333 = -1.*t365*t303;
  t7334 = -0.24*t321*t324;
  t7335 = t7333 + t7334;
  t7260 = 0.384*var2[6]*t7259;
  t7261 = -3.2*t370*t523;
  t7262 = -3.2*t406*t7259;
  t7303 = -6.4*t523*t541;
  t7304 = -6.4*t574*t547;
  t7317 = -6.4*t523*t7316;
  t7318 = -6.4*t574*t7259;
  t7322 = -6.4*t541*t574;
  t7323 = -3.2*t6691*t547;
  t7324 = -3.2*t523*t6730;
  t7325 = -6.4*t574*t7316;
  t7326 = -3.2*t6691*t7259;
  t7327 = t162*t7256;
  t7328 = t573 + t7327;
  t7329 = -3.2*t523*t7328;
  t7332 = -3.2*t523*t7052;
  t7337 = t7019*t339;
  t7338 = t331*t7033;
  t7342 = -3.2*t7064*t7259;
  t7374 = -0.24*t302*t303;
  t7375 = t7374 + t7334;
  t7344 = -1.*t331*t7019;
  t7377 = 0.24*t321*t302;
  t7378 = t7377 + t7032;
  t7349 = -1.*t7033*t7256;
  t7390 = -6.8*t420;
  t7391 = -6.8*t419*t210;
  t7392 = Power(t427,2);
  t7393 = -6.8*t7392;
  t7394 = -6.8*t427*t432;
  t7395 = -3.2*t439*t4337;
  t7396 = Power(t478,2);
  t7397 = -3.2*t7396;
  t7398 = Power(t486,2);
  t7399 = -3.2*t7398;
  t7400 = -3.2*t482*t4757;
  t7401 = -6.8*t494;
  t7402 = -6.8*t493*t355;
  t7403 = Power(t505,2);
  t7404 = -6.8*t7403;
  t7405 = -6.8*t505*t509;
  t7406 = -3.2*t523*t6691;
  t7407 = Power(t541,2);
  t7408 = -3.2*t7407;
  t7409 = Power(t574,2);
  t7410 = -3.2*t7409;
  t7411 = -3.2*t547*t6730;
  t7412 = t7390 + t7391 + t7393 + t7394 + t7395 + t7397 + t7399 + t7400 + t7401 + t7402 + t7404 + t7405 + t7406 + t7408 + t7410 + t7411;
  t7437 = 2.88*t98;
  t7438 = -6.8*t432*t6776;
  t7439 = -3.2*t482*t6807;
  t7440 = -3.2*t439*t6826;
  t7441 = -6.8*t509*t6853;
  t7442 = -3.2*t547*t7052;
  t7443 = -3.2*t523*t7064;
  t7444 = t7437 + t7438 + t7439 + t7440 + t7441 + t7442 + t7443;
  t7415 = -0.748*t432;
  t7416 = -3.2*t295*t439;
  t7417 = -3.2*t240*t482;
  t7418 = t7415 + t7416 + t7417;
  t7421 = -0.748*t509;
  t7422 = -3.2*t406*t523;
  t7423 = -3.2*t370*t547;
  t7424 = t7421 + t7422 + t7423;
  t7100 = t215 + t7094 + t7095;
  t7101 = -0.5*var2[3]*t7100;
  t7110 = t421 + t422 + t433 + t436 + t7103 + t7104 + t7108 + t7109;
  t7112 = -0.5*var2[1]*t7110;
  t7164 = t2920 + t2924 + t3074 + t3085 + t7113 + t7114 + t7115 + t7116 + t7117 + t7158;
  t7170 = -0.5*var2[0]*t7164;
  t7176 = t7174*t174;
  t7179 = t271*t6804;
  t7180 = t7176 + t7177 + t7178 + t7179;
  t7181 = -3.2*t439*t7180;
  t7183 = -1.*t152*t7174;
  t7185 = -1.*t174*t6804;
  t7187 = t7183 + t7184 + t7185 + t7186;
  t7188 = -3.2*t482*t7187;
  t7189 = t6777 + t7171 + t7181 + t7182 + t7188;
  t7190 = -0.5*var2[2]*t7189;
  t7191 = t7093 + t7101 + t7112 + t7170 + t7190;
  t7192 = var2[1]*t7191;
  t7452 = t4750 + t7089;
  t7480 = -1.*t134*t223;
  t7481 = 0.24*t130*t146;
  t7482 = t7480 + t7481;
  t7453 = 0.384*var2[4]*t7452;
  t7197 = Power(t120,2);
  t7198 = -0.24*t7197;
  t7202 = t288 + t7198;
  t7454 = -3.2*t240*t7106;
  t7193 = -1.*t223*t146;
  t7194 = 0.24*t120*t146;
  t7195 = t7193 + t7194;
  t7455 = -3.2*t295*t7452;
  t7458 = -6.4*t7398;
  t7459 = -6.4*t478*t7106;
  t7460 = Power(t7106,2);
  t7461 = -6.4*t7460;
  t7462 = -6.4*t486*t7452;
  t7465 = -6.4*t4337*t486;
  t7466 = -3.2*t4757*t7106;
  t7467 = t273 + t7105;
  t7468 = -3.2*t486*t7467;
  t7469 = -3.2*t4337*t7452;
  t7470 = -3.2*t478*t7157;
  t7471 = -6.4*t7106*t7157;
  t7474 = -3.2*t6807*t7106;
  t7220 = t7219*t174;
  t7235 = t271*t7228;
  t7236 = t7220 + t7177 + t7178 + t7235;
  t7476 = -3.2*t6826*t7452;
  t7479 = -1.*t271*t6804;
  t7485 = -1.*t6790*t7082;
  t7240 = -1.*t152*t7219;
  t7241 = -1.*t174*t7228;
  t7246 = t7240 + t7184 + t7241 + t7186;
  t7490 = t152*t6790;
  t7513 = -0.24*t134*t120;
  t7514 = t7513 + t7481;
  t7494 = t6804*t7082;
  t7426 = -13.6*t419*t427;
  t7427 = -13.6*t419*t432;
  t7533 = -3.2*t4337*t478;
  t7534 = -3.2*t486*t4757;
  t7535 = -3.2*t4337*t7106;
  t7536 = -3.2*t486*t7157;
  t7537 = t7390 + t7391 + t7393 + t7394 + t7533 + t7534 + t7535 + t7536;
  t7547 = -3.2*t486*t6807;
  t7548 = -3.2*t486*t7180;
  t7549 = -3.2*t6826*t7106;
  t7550 = -3.2*t478*t7187;
  t7551 = t7438 + t7547 + t7548 + t7549 + t7550;
  t7540 = -3.2*t240*t486;
  t7541 = -3.2*t295*t7106;
  t7542 = t7415 + t7540 + t7541;
  t7196 = -3.2*t7195*t439;
  t7203 = -3.2*t7202*t482;
  t7204 = t7094 + t7196 + t7203 + t7095;
  t7206 = -0.5*var2[3]*t7204;
  t7210 = t7103 + t7104 + t7108 + t7109;
  t7211 = -0.5*var2[1]*t7210;
  t7212 = t7113 + t7114 + t7115 + t7116 + t7117 + t7158;
  t7213 = -0.5*var2[0]*t7212;
  t7239 = -3.2*t439*t7236;
  t7247 = -3.2*t482*t7246;
  t7249 = t7171 + t7239 + t7182 + t7247;
  t7250 = -0.5*var2[2]*t7249;
  t7251 = t7093 + t7206 + t7211 + t7213 + t7250;
  t7252 = var2[1]*t7251;
  t7501 = -3.2*t7202*t486;
  t7502 = -3.2*t7195*t7106;
  t7503 = t7501 + t7454 + t7502 + t7455;
  t7504 = -0.5*var2[3]*t7503;
  t7505 = t7458 + t7459 + t7461 + t7462;
  t7506 = -0.5*var2[1]*t7505;
  t7507 = t7465 + t7466 + t7468 + t7469 + t7470 + t7471;
  t7508 = -0.5*var2[0]*t7507;
  t7509 = -3.2*t7180*t7106;
  t7510 = -3.2*t7236*t7106;
  t7511 = -1.*t7219*t174;
  t7512 = -1.*t152*t7228;
  t7515 = -1.*t152*t7514;
  t7516 = -1.*t7174*t7082;
  t7517 = -1.*t7219*t7082;
  t7518 = t7511 + t6806 + t7479 + t7512 + t7515 + t7516 + t7517 + t7485;
  t7519 = -3.2*t478*t7518;
  t7520 = -3.2*t486*t7187;
  t7521 = -3.2*t486*t7246;
  t7522 = t152*t7174;
  t7523 = t152*t7219;
  t7524 = t7219*t271;
  t7525 = t174*t7228;
  t7526 = t174*t7514;
  t7527 = t7522 + t7523 + t7490 + t7524 + t6810 + t7525 + t7526 + t7494;
  t7528 = -3.2*t486*t7527;
  t7529 = t7474 + t7509 + t7510 + t7476 + t7519 + t7520 + t7521 + t7528;
  t7530 = -0.5*var2[2]*t7529;
  t7531 = t7453 + t7504 + t7506 + t7508 + t7530;
  t7532 = var2[1]*t7531;
  t7539 = 0.384*var2[4]*t7106;
  t7580 = t7533 + t7534 + t7535 + t7536;
  t7589 = -3.2*t486*t7236;
  t7590 = -3.2*t478*t7246;
  t7591 = t7547 + t7589 + t7549 + t7590;
  t7582 = -3.2*t7202*t478;
  t7583 = -3.2*t7195*t486;
  t7584 = t7582 + t7540 + t7583 + t7541;
  t7556 = 0.384*var2[1]*t7106;
  t7263 = t357 + t7261 + t7262;
  t7300 = -0.5*var2[5]*t7263;
  t7319 = t495 + t498 + t510 + t516 + t7303 + t7304 + t7317 + t7318;
  t7320 = -0.5*var2[1]*t7319;
  t7330 = t6456 + t6457 + t6458 + t6620 + t7322 + t7323 + t7324 + t7325 + t7326 + t7329;
  t7331 = -0.5*var2[0]*t7330;
  t7336 = t7335*t339;
  t7339 = t385*t7033;
  t7340 = t7336 + t7337 + t7338 + t7339;
  t7341 = -3.2*t523*t7340;
  t7343 = -1.*t331*t7335;
  t7348 = -1.*t339*t7033;
  t7350 = t7343 + t7344 + t7348 + t7349;
  t7352 = -3.2*t547*t7350;
  t7356 = t6854 + t7332 + t7341 + t7342 + t7352;
  t7357 = -0.5*var2[2]*t7356;
  t7358 = t7260 + t7300 + t7320 + t7331 + t7357;
  t7359 = var2[1]*t7358;
  t7596 = t6718 + t7258;
  t7624 = -1.*t321*t365;
  t7625 = 0.24*t303*t324;
  t7626 = t7624 + t7625;
  t7597 = 0.384*var2[6]*t7596;
  t7364 = Power(t302,2);
  t7365 = -0.24*t7364;
  t7366 = t390 + t7365;
  t7598 = -3.2*t370*t7316;
  t7360 = -1.*t365*t324;
  t7361 = 0.24*t302*t324;
  t7362 = t7360 + t7361;
  t7599 = -3.2*t406*t7596;
  t7602 = -6.4*t7409;
  t7603 = -6.4*t541*t7316;
  t7604 = Power(t7316,2);
  t7605 = -6.4*t7604;
  t7606 = -6.4*t574*t7596;
  t7609 = -6.4*t6691*t574;
  t7610 = -3.2*t6730*t7316;
  t7611 = t386 + t7310;
  t7612 = -3.2*t574*t7611;
  t7613 = -3.2*t6691*t7596;
  t7614 = -3.2*t541*t7328;
  t7615 = -6.4*t7316*t7328;
  t7618 = -3.2*t7052*t7316;
  t7376 = t7375*t339;
  t7379 = t385*t7378;
  t7380 = t7376 + t7337 + t7338 + t7379;
  t7620 = -3.2*t7064*t7596;
  t7623 = -1.*t385*t7033;
  t7629 = -1.*t7019*t7256;
  t7382 = -1.*t331*t7375;
  t7383 = -1.*t339*t7378;
  t7384 = t7382 + t7344 + t7383 + t7349;
  t7634 = t331*t7019;
  t7657 = -0.24*t321*t302;
  t7658 = t7657 + t7625;
  t7638 = t7033*t7256;
  t7430 = -13.6*t493*t505;
  t7431 = -13.6*t493*t509;
  t7677 = -3.2*t6691*t541;
  t7678 = -3.2*t574*t6730;
  t7679 = -3.2*t6691*t7316;
  t7680 = -3.2*t574*t7328;
  t7681 = t7401 + t7402 + t7404 + t7405 + t7677 + t7678 + t7679 + t7680;
  t7691 = -3.2*t574*t7052;
  t7692 = -3.2*t574*t7340;
  t7693 = -3.2*t7064*t7316;
  t7694 = -3.2*t541*t7350;
  t7695 = t7441 + t7691 + t7692 + t7693 + t7694;
  t7684 = -3.2*t370*t574;
  t7685 = -3.2*t406*t7316;
  t7686 = t7421 + t7684 + t7685;
  t7363 = -3.2*t7362*t523;
  t7367 = -3.2*t7366*t547;
  t7368 = t7261 + t7363 + t7367 + t7262;
  t7369 = -0.5*var2[5]*t7368;
  t7370 = t7303 + t7304 + t7317 + t7318;
  t7371 = -0.5*var2[1]*t7370;
  t7372 = t7322 + t7323 + t7324 + t7325 + t7326 + t7329;
  t7373 = -0.5*var2[0]*t7372;
  t7381 = -3.2*t523*t7380;
  t7385 = -3.2*t547*t7384;
  t7386 = t7332 + t7381 + t7342 + t7385;
  t7387 = -0.5*var2[2]*t7386;
  t7388 = t7260 + t7369 + t7371 + t7373 + t7387;
  t7389 = var2[1]*t7388;
  t7645 = -3.2*t7366*t574;
  t7646 = -3.2*t7362*t7316;
  t7647 = t7645 + t7598 + t7646 + t7599;
  t7648 = -0.5*var2[5]*t7647;
  t7649 = t7602 + t7603 + t7605 + t7606;
  t7650 = -0.5*var2[1]*t7649;
  t7651 = t7609 + t7610 + t7612 + t7613 + t7614 + t7615;
  t7652 = -0.5*var2[0]*t7651;
  t7653 = -3.2*t7340*t7316;
  t7654 = -3.2*t7380*t7316;
  t7655 = -1.*t7375*t339;
  t7656 = -1.*t331*t7378;
  t7659 = -1.*t331*t7658;
  t7660 = -1.*t7335*t7256;
  t7661 = -1.*t7375*t7256;
  t7662 = t7655 + t7034 + t7623 + t7656 + t7659 + t7660 + t7661 + t7629;
  t7663 = -3.2*t541*t7662;
  t7664 = -3.2*t574*t7350;
  t7665 = -3.2*t574*t7384;
  t7666 = t331*t7335;
  t7667 = t331*t7375;
  t7668 = t7375*t385;
  t7669 = t339*t7378;
  t7670 = t339*t7658;
  t7671 = t7666 + t7667 + t7634 + t7668 + t7063 + t7669 + t7670 + t7638;
  t7672 = -3.2*t574*t7671;
  t7673 = t7618 + t7653 + t7654 + t7620 + t7663 + t7664 + t7665 + t7672;
  t7674 = -0.5*var2[2]*t7673;
  t7675 = t7597 + t7648 + t7650 + t7652 + t7674;
  t7676 = var2[1]*t7675;
  t7683 = 0.384*var2[6]*t7316;
  t7724 = t7677 + t7678 + t7679 + t7680;
  t7733 = -3.2*t574*t7380;
  t7734 = -3.2*t541*t7384;
  t7735 = t7691 + t7733 + t7693 + t7734;
  t7726 = -3.2*t7366*t541;
  t7727 = -3.2*t7362*t574;
  t7728 = t7726 + t7684 + t7727 + t7685;
  t7700 = 0.384*var2[1]*t7316;
  p_output1[0]=var2[1]*(-0.5*(t2920 + t2924 + t3074 + t3085 - 3.2*t178*t4337 - 3.2*t276*t4757 - 9.6*t478*t482 - 9.6*t439*t486 - 9.6*t541*t547 - 9.6*t523*t574 + t6456 + t6457 + t6458 + t6620 - 3.2*t341*t6691 - 3.2*t388*t6730)*var2[0] - 0.5*(t421 + t422 + t433 + t436 - 6.4*Power(t439,2) - 6.4*t276*t478 - 6.4*Power(t482,2) - 6.4*t178*t486 + t495 + t498 + t510 + t516 - 6.4*Power(t523,2) - 6.4*t388*t541 - 6.4*Power(t547,2) - 6.4*t341*t574)*var2[1] - 0.5*(-2.88*t162 + t6777 - 3.2*t276*t6807 - 3.2*t178*t6826 + t6854 - 3.2*t388*t7052 - 3.2*t341*t7064)*var2[2] - 0.5*(t215 - 3.2*t240*t276 - 3.2*t178*t295)*var2[3] + 0.384*t178*var2[4] - 0.5*(t357 - 3.2*t370*t388 - 3.2*t341*t406)*var2[5] + 0.384*t341*var2[6]);
  p_output1[1]=t7192;
  p_output1[2]=t7252;
  p_output1[3]=t7359;
  p_output1[4]=t7389;
  p_output1[5]=-0.5*t7412*var2[1];
  p_output1[6]=-0.5*t7412*var2[0] - 1.*(-6.4*t478*t482 - 6.4*t439*t486 - 6.4*t541*t547 - 6.4*t523*t574 + t7426 + t7427 + t7430 + t7431)*var2[1] - 0.5*t7444*var2[2] - 0.5*t7418*var2[3] + 0.384*t439*var2[4] - 0.5*t7424*var2[5] + 0.384*t523*var2[6];
  p_output1[7]=-0.5*t7444*var2[1];
  p_output1[8]=-0.5*t7418*var2[1];
  p_output1[9]=0.384*t439*var2[1];
  p_output1[10]=-0.5*t7424*var2[1];
  p_output1[11]=0.384*t523*var2[1];
  p_output1[12]=t7192;
  p_output1[13]=var2[1]*(t7453 - 0.5*(t2920 + t2924 + t3074 + t3085 + t7465 + t7466 + t7468 + t7469 + t7470 + t7471)*var2[0] - 0.5*(t421 + t422 + t433 + t436 + t7458 + t7459 + t7461 + t7462)*var2[1] - 0.5*(t6777 - 6.4*t7106*t7180 - 6.4*t486*t7187 + t7474 + t7476 - 3.2*t478*(-2.*t152*t6804 - 1.*t174*t7174 - 2.*t7082*t7174 + t7479 - 1.*t152*t7482 + t7485) - 3.2*t486*(2.*t174*t6804 + 2.*t152*t7174 + t271*t7174 + t174*t7482 + t7490 + t7494))*var2[2] - 0.5*(t215 + t7454 + t7455)*var2[3]);
  p_output1[14]=t7532;
  p_output1[15]=-0.5*t7537*var2[1];
  p_output1[16]=t7539 - 0.5*t7537*var2[0] - 1.*(t7113 + t7116 + t7426 + t7427)*var2[1] - 0.5*t7551*var2[2] - 0.5*t7542*var2[3];
  p_output1[17]=-0.5*t7551*var2[1];
  p_output1[18]=-0.5*t7542*var2[1];
  p_output1[19]=t7556;
  p_output1[20]=t7252;
  p_output1[21]=t7532;
  p_output1[22]=var2[1]*(t7453 + t7506 + t7508 - 0.5*(-6.4*t7106*t7236 - 6.4*t486*t7246 + t7474 + t7476 - 3.2*t478*(-2.*t7082*t7219 - 2.*t152*t7228 + t7479 + t7485 + t7511 + t7515) - 3.2*t486*(2.*t152*t7219 + 2.*t174*t7228 + t7490 + t7494 + t7524 + t7526))*var2[2] - 0.5*(-3.2*t478*t7195 - 6.4*t7106*t7195 - 3.2*t486*(-1.*t120*t223 + 0.24*t7197) - 6.4*t486*t7202 + t7454 + t7455)*var2[3]);
  p_output1[23]=-0.5*t7580*var2[1];
  p_output1[24]=t7539 - 0.5*t7580*var2[0] - 1.*(t7113 + t7116)*var2[1] - 0.5*t7591*var2[2] - 0.5*t7584*var2[3];
  p_output1[25]=-0.5*t7591*var2[1];
  p_output1[26]=-0.5*t7584*var2[1];
  p_output1[27]=t7556;
  p_output1[28]=t7359;
  p_output1[29]=var2[1]*(t7597 - 0.5*(t6456 + t6457 + t6458 + t6620 + t7609 + t7610 + t7612 + t7613 + t7614 + t7615)*var2[0] - 0.5*(t495 + t498 + t510 + t516 + t7602 + t7603 + t7605 + t7606)*var2[1] - 0.5*(t6854 - 6.4*t7316*t7340 - 6.4*t574*t7350 + t7618 + t7620 - 3.2*t541*(-2.*t331*t7033 - 1.*t339*t7335 - 2.*t7256*t7335 + t7623 - 1.*t331*t7626 + t7629) - 3.2*t574*(2.*t339*t7033 + 2.*t331*t7335 + t385*t7335 + t339*t7626 + t7634 + t7638))*var2[2] - 0.5*(t357 + t7598 + t7599)*var2[5]);
  p_output1[30]=t7676;
  p_output1[31]=-0.5*t7681*var2[1];
  p_output1[32]=t7683 - 0.5*t7681*var2[0] - 1.*(t7322 + t7325 + t7430 + t7431)*var2[1] - 0.5*t7695*var2[2] - 0.5*t7686*var2[5];
  p_output1[33]=-0.5*t7695*var2[1];
  p_output1[34]=-0.5*t7686*var2[1];
  p_output1[35]=t7700;
  p_output1[36]=t7389;
  p_output1[37]=t7676;
  p_output1[38]=var2[1]*(t7597 + t7650 + t7652 - 0.5*(-6.4*t7316*t7380 - 6.4*t574*t7384 + t7618 + t7620 - 3.2*t541*(-2.*t7256*t7375 - 2.*t331*t7378 + t7623 + t7629 + t7655 + t7659) - 3.2*t574*(2.*t331*t7375 + 2.*t339*t7378 + t7634 + t7638 + t7668 + t7670))*var2[2] - 0.5*(-3.2*t541*t7362 - 6.4*t7316*t7362 - 3.2*t574*(-1.*t302*t365 + 0.24*t7364) - 6.4*t574*t7366 + t7598 + t7599)*var2[5]);
  p_output1[39]=-0.5*t7724*var2[1];
  p_output1[40]=t7683 - 0.5*t7724*var2[0] - 1.*(t7322 + t7325)*var2[1] - 0.5*t7735*var2[2] - 0.5*t7728*var2[5];
  p_output1[41]=-0.5*t7735*var2[1];
  p_output1[42]=-0.5*t7728*var2[1];
  p_output1[43]=t7700;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
