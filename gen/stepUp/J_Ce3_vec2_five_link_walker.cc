/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:40:32 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t6555;
  double t3042;
  double t3049;
  double t6662;
  double t6735;
  double t2928;
  double t6754;
  double t6771;
  double t6772;
  double t6834;
  double t6838;
  double t6843;
  double t6844;
  double t6846;
  double t3205;
  double t6682;
  double t6683;
  double t6684;
  double t6773;
  double t6798;
  double t6921;
  double t6918;
  double t6919;
  double t6922;
  double t7092;
  double t7096;
  double t7100;
  double t7133;
  double t7134;
  double t7135;
  double t7136;
  double t7141;
  double t6920;
  double t7081;
  double t7086;
  double t7087;
  double t7101;
  double t7102;
  double t7180;
  double t7181;
  double t7182;
  double t6807;
  double t6808;
  double t6810;
  double t7232;
  double t7238;
  double t7239;
  double t6870;
  double t6858;
  double t6860;
  double t6862;
  double t6863;
  double t6872;
  double t7253;
  double t7260;
  double t7261;
  double t7262;
  double t7129;
  double t7130;
  double t7131;
  double t7272;
  double t7274;
  double t7278;
  double t7163;
  double t7157;
  double t7158;
  double t7161;
  double t7162;
  double t7168;
  double t7309;
  double t7222;
  double t7225;
  double t7226;
  double t7244;
  double t7245;
  double t7257;
  double t7258;
  double t7248;
  double t7249;
  double t7250;
  double t7252;
  double t7254;
  double t7266;
  double t7270;
  double t7271;
  double t7282;
  double t7287;
  double t7318;
  double t7319;
  double t7296;
  double t7303;
  double t7304;
  double t7308;
  double t7314;
  double t7407;
  double t7408;
  double t7409;
  double t7411;
  double t7412;
  double t7416;
  double t7434;
  double t7435;
  double t7436;
  double t7438;
  double t7439;
  double t7440;
  double t6813;
  double t6849;
  double t6850;
  double t6851;
  double t6875;
  double t6876;
  double t6877;
  double t6878;
  double t7452;
  double t7453;
  double t7454;
  double t7455;
  double t7456;
  double t7183;
  double t7184;
  double t7185;
  double t7240;
  double t7241;
  double t7242;
  double t7324;
  double t7326;
  double t7327;
  double t7328;
  double t7331;
  double t7368;
  double t7372;
  double t7378;
  double t7464;
  double t7465;
  double t7401;
  double t7402;
  double t7403;
  double t7404;
  double t7405;
  double t7406;
  double t7410;
  double t7417;
  double t7418;
  double t7424;
  double t7425;
  double t7426;
  double t7481;
  double t7482;
  double t7483;
  double t7457;
  double t7458;
  double t7459;
  double t7462;
  double t7463;
  double t7466;
  double t7467;
  double t7470;
  double t7471;
  double t7472;
  double t7473;
  double t7474;
  double t7475;
  double t7476;
  double t7477;
  double t7480;
  double t7485;
  double t7486;
  double t7490;
  double t7515;
  double t7516;
  double t7492;
  double t7518;
  double t7519;
  double t7494;
  double t7132;
  double t7142;
  double t7149;
  double t7150;
  double t7171;
  double t7172;
  double t7173;
  double t7174;
  double t7531;
  double t7532;
  double t7533;
  double t7534;
  double t7535;
  double t7263;
  double t7264;
  double t7265;
  double t7279;
  double t7280;
  double t7281;
  double t7385;
  double t7386;
  double t7387;
  double t7388;
  double t7392;
  double t7393;
  double t7395;
  double t7396;
  double t7543;
  double t7544;
  double t7428;
  double t7429;
  double t7430;
  double t7431;
  double t7432;
  double t7433;
  double t7437;
  double t7441;
  double t7442;
  double t7444;
  double t7445;
  double t7446;
  double t7560;
  double t7561;
  double t7562;
  double t7536;
  double t7537;
  double t7538;
  double t7541;
  double t7542;
  double t7545;
  double t7546;
  double t7549;
  double t7550;
  double t7551;
  double t7552;
  double t7553;
  double t7554;
  double t7555;
  double t7556;
  double t7559;
  double t7564;
  double t7565;
  double t7569;
  double t7594;
  double t7595;
  double t7571;
  double t7597;
  double t7598;
  double t7573;
  double t7610;
  double t7611;
  double t7612;
  double t7613;
  double t7614;
  double t7615;
  double t7616;
  double t7617;
  double t7618;
  double t7619;
  double t7620;
  double t7621;
  double t7622;
  double t7623;
  double t7624;
  double t7625;
  double t7626;
  double t7627;
  double t7628;
  double t7629;
  double t7630;
  double t7631;
  double t7632;
  double t7657;
  double t7658;
  double t7659;
  double t7660;
  double t7661;
  double t7662;
  double t7663;
  double t7664;
  double t7635;
  double t7636;
  double t7637;
  double t7638;
  double t7641;
  double t7642;
  double t7643;
  double t7644;
  double t7460;
  double t7461;
  double t7468;
  double t7469;
  double t7478;
  double t7479;
  double t7484;
  double t7487;
  double t7488;
  double t7489;
  double t7491;
  double t7493;
  double t7495;
  double t7496;
  double t7497;
  double t7498;
  double t7499;
  double t7500;
  double t7672;
  double t7700;
  double t7701;
  double t7702;
  double t7673;
  double t7505;
  double t7506;
  double t7507;
  double t7674;
  double t7501;
  double t7502;
  double t7503;
  double t7675;
  double t7678;
  double t7679;
  double t7680;
  double t7681;
  double t7682;
  double t7685;
  double t7686;
  double t7687;
  double t7688;
  double t7689;
  double t7690;
  double t7691;
  double t7694;
  double t7517;
  double t7520;
  double t7521;
  double t7696;
  double t7699;
  double t7705;
  double t7523;
  double t7524;
  double t7525;
  double t7710;
  double t7733;
  double t7734;
  double t7714;
  double t7646;
  double t7647;
  double t7753;
  double t7754;
  double t7755;
  double t7756;
  double t7757;
  double t7767;
  double t7768;
  double t7769;
  double t7770;
  double t7771;
  double t7760;
  double t7761;
  double t7762;
  double t7504;
  double t7508;
  double t7509;
  double t7510;
  double t7511;
  double t7512;
  double t7513;
  double t7514;
  double t7522;
  double t7526;
  double t7527;
  double t7528;
  double t7529;
  double t7530;
  double t7721;
  double t7722;
  double t7723;
  double t7724;
  double t7725;
  double t7726;
  double t7727;
  double t7728;
  double t7729;
  double t7730;
  double t7731;
  double t7732;
  double t7735;
  double t7736;
  double t7737;
  double t7738;
  double t7739;
  double t7740;
  double t7741;
  double t7742;
  double t7743;
  double t7744;
  double t7745;
  double t7746;
  double t7747;
  double t7748;
  double t7749;
  double t7750;
  double t7751;
  double t7752;
  double t7759;
  double t7800;
  double t7809;
  double t7810;
  double t7811;
  double t7802;
  double t7803;
  double t7804;
  double t7776;
  double t7539;
  double t7540;
  double t7547;
  double t7548;
  double t7557;
  double t7558;
  double t7563;
  double t7566;
  double t7567;
  double t7568;
  double t7570;
  double t7572;
  double t7574;
  double t7575;
  double t7576;
  double t7577;
  double t7578;
  double t7579;
  double t7816;
  double t7844;
  double t7845;
  double t7846;
  double t7817;
  double t7584;
  double t7585;
  double t7586;
  double t7818;
  double t7580;
  double t7581;
  double t7582;
  double t7819;
  double t7822;
  double t7823;
  double t7824;
  double t7825;
  double t7826;
  double t7829;
  double t7830;
  double t7831;
  double t7832;
  double t7833;
  double t7834;
  double t7835;
  double t7838;
  double t7596;
  double t7599;
  double t7600;
  double t7840;
  double t7843;
  double t7849;
  double t7602;
  double t7603;
  double t7604;
  double t7854;
  double t7877;
  double t7878;
  double t7858;
  double t7650;
  double t7651;
  double t7897;
  double t7898;
  double t7899;
  double t7900;
  double t7901;
  double t7911;
  double t7912;
  double t7913;
  double t7914;
  double t7915;
  double t7904;
  double t7905;
  double t7906;
  double t7583;
  double t7587;
  double t7588;
  double t7589;
  double t7590;
  double t7591;
  double t7592;
  double t7593;
  double t7601;
  double t7605;
  double t7606;
  double t7607;
  double t7608;
  double t7609;
  double t7865;
  double t7866;
  double t7867;
  double t7868;
  double t7869;
  double t7870;
  double t7871;
  double t7872;
  double t7873;
  double t7874;
  double t7875;
  double t7876;
  double t7879;
  double t7880;
  double t7881;
  double t7882;
  double t7883;
  double t7884;
  double t7885;
  double t7886;
  double t7887;
  double t7888;
  double t7889;
  double t7890;
  double t7891;
  double t7892;
  double t7893;
  double t7894;
  double t7895;
  double t7896;
  double t7903;
  double t7944;
  double t7953;
  double t7954;
  double t7955;
  double t7946;
  double t7947;
  double t7948;
  double t7920;
  t6555 = Cos(var1[3]);
  t3042 = Cos(var1[4]);
  t3049 = Sin(var1[3]);
  t6662 = Sin(var1[4]);
  t6735 = Sin(var1[2]);
  t2928 = Cos(var1[2]);
  t6754 = t6555*t3042;
  t6771 = -1.*t3049*t6662;
  t6772 = t6754 + t6771;
  t6834 = -1.*t3042;
  t6838 = 1. + t6834;
  t6843 = 0.4*t6838;
  t6844 = 0.64*t3042;
  t6846 = t6843 + t6844;
  t3205 = -1.*t3042*t3049;
  t6682 = -1.*t6555*t6662;
  t6683 = t3205 + t6682;
  t6684 = -1.*t2928*t6683;
  t6773 = t6735*t6772;
  t6798 = t6684 + t6773;
  t6921 = Cos(var1[5]);
  t6918 = Cos(var1[6]);
  t6919 = Sin(var1[5]);
  t6922 = Sin(var1[6]);
  t7092 = t6921*t6918;
  t7096 = -1.*t6919*t6922;
  t7100 = t7092 + t7096;
  t7133 = -1.*t6918;
  t7134 = 1. + t7133;
  t7135 = 0.4*t7134;
  t7136 = 0.64*t6918;
  t7141 = t7135 + t7136;
  t6920 = -1.*t6918*t6919;
  t7081 = -1.*t6921*t6922;
  t7086 = t6920 + t7081;
  t7087 = -1.*t2928*t7086;
  t7101 = t6735*t7100;
  t7102 = t7087 + t7101;
  t7180 = -1.*t6555*t6735;
  t7181 = -1.*t2928*t3049;
  t7182 = t7180 + t7181;
  t6807 = t6555*t6735;
  t6808 = t2928*t3049;
  t6810 = t6807 + t6808;
  t7232 = -1.*t2928*t6555;
  t7238 = t6735*t3049;
  t7239 = t7232 + t7238;
  t6870 = -1.*t2928*t6772;
  t6858 = t3042*t3049;
  t6860 = t6555*t6662;
  t6862 = t6858 + t6860;
  t6863 = t6735*t6862;
  t6872 = t6863 + t6870;
  t7253 = -1.*t6735*t6772;
  t7260 = -1.*t6921*t6735;
  t7261 = -1.*t2928*t6919;
  t7262 = t7260 + t7261;
  t7129 = t6921*t6735;
  t7130 = t2928*t6919;
  t7131 = t7129 + t7130;
  t7272 = -1.*t2928*t6921;
  t7274 = t6735*t6919;
  t7278 = t7272 + t7274;
  t7163 = -1.*t2928*t7100;
  t7157 = t6918*t6919;
  t7158 = t6921*t6922;
  t7161 = t7157 + t7158;
  t7162 = t6735*t7161;
  t7168 = t7162 + t7163;
  t7309 = -1.*t6735*t7100;
  t7222 = t2928*t6555;
  t7225 = -1.*t6735*t3049;
  t7226 = t7222 + t7225;
  t7244 = -1.*t6735*t6683;
  t7245 = t7244 + t6870;
  t7257 = t2928*t6683;
  t7258 = t7257 + t7253;
  t7248 = -1.*t6735*t6862;
  t7249 = t2928*t6772;
  t7250 = t7248 + t7249;
  t7252 = -1.*t2928*t6862;
  t7254 = t7252 + t7253;
  t7266 = t2928*t6921;
  t7270 = -1.*t6735*t6919;
  t7271 = t7266 + t7270;
  t7282 = -1.*t6735*t7086;
  t7287 = t7282 + t7163;
  t7318 = t2928*t7086;
  t7319 = t7318 + t7309;
  t7296 = -1.*t6735*t7161;
  t7303 = t2928*t7100;
  t7304 = t7296 + t7303;
  t7308 = -1.*t2928*t7161;
  t7314 = t7308 + t7309;
  t7407 = t6846*t3049;
  t7408 = 0.24*t6555*t6662;
  t7409 = t7407 + t7408;
  t7411 = t6555*t6846;
  t7412 = -0.24*t3049*t6662;
  t7416 = t7411 + t7412;
  t7434 = t7141*t6919;
  t7435 = 0.24*t6921*t6922;
  t7436 = t7434 + t7435;
  t7438 = t6921*t7141;
  t7439 = -0.24*t6919*t6922;
  t7440 = t7438 + t7439;
  t6813 = -0.748*t6810;
  t6849 = t6846*t6662;
  t6850 = -0.24*t3042*t6662;
  t6851 = t6849 + t6850;
  t6875 = t6846*t3042;
  t6876 = Power(t6662,2);
  t6877 = 0.24*t6876;
  t6878 = t6875 + t6877;
  t7452 = -1.*t6555*t3042;
  t7453 = t3049*t6662;
  t7454 = t7452 + t7453;
  t7455 = -1.*t6735*t7454;
  t7456 = t6684 + t7455;
  t7183 = Power(t7182,2);
  t7184 = -13.6*t7183;
  t7185 = -13.6*t7182*t6810;
  t7240 = -13.6*t7226*t7239;
  t7241 = Power(t7239,2);
  t7242 = -13.6*t7241;
  t7324 = -20.4*t7182*t7226;
  t7326 = -6.8*t6810*t7226;
  t7327 = -20.4*t7182*t7239;
  t7328 = -6.8*t6810*t7239;
  t7331 = t6735*t6683;
  t7368 = t7331 + t7249;
  t7372 = t2928*t6862;
  t7378 = t7372 + t6773;
  t7464 = t2928*t7454;
  t7465 = t7244 + t7464;
  t7401 = Power(t6555,2);
  t7402 = 0.11*t7401;
  t7403 = Power(t3049,2);
  t7404 = 0.11*t7403;
  t7405 = t7402 + t7404;
  t7406 = -6.8*t6810*t7405;
  t7410 = -1.*t7409*t6772;
  t7417 = -1.*t6683*t7416;
  t7418 = t7410 + t7417;
  t7424 = t7409*t6862;
  t7425 = t6772*t7416;
  t7426 = t7424 + t7425;
  t7481 = -1.*t6846*t3049;
  t7482 = -0.24*t6555*t6662;
  t7483 = t7481 + t7482;
  t7457 = 0.384*var2[4]*t7456;
  t7458 = -3.2*t6851*t7245;
  t7459 = -3.2*t6878*t7456;
  t7462 = -6.4*t7245*t7250;
  t7463 = -6.4*t7258*t7254;
  t7466 = -6.4*t7245*t7465;
  t7467 = -6.4*t7258*t7456;
  t7470 = -6.4*t7250*t7258;
  t7471 = -3.2*t7368*t7254;
  t7472 = -3.2*t7245*t7378;
  t7473 = -6.4*t7258*t7465;
  t7474 = -3.2*t7368*t7456;
  t7475 = t6735*t7454;
  t7476 = t7257 + t7475;
  t7477 = -3.2*t7245*t7476;
  t7480 = -3.2*t7245*t7418;
  t7485 = t7409*t6772;
  t7486 = t6683*t7416;
  t7490 = -3.2*t7426*t7456;
  t7515 = -0.24*t3042*t3049;
  t7516 = t7515 + t7482;
  t7492 = -1.*t6683*t7409;
  t7518 = 0.24*t6555*t3042;
  t7519 = t7518 + t7412;
  t7494 = -1.*t7416*t7454;
  t7132 = -0.748*t7131;
  t7142 = t7141*t6922;
  t7149 = -0.24*t6918*t6922;
  t7150 = t7142 + t7149;
  t7171 = t7141*t6918;
  t7172 = Power(t6922,2);
  t7173 = 0.24*t7172;
  t7174 = t7171 + t7173;
  t7531 = -1.*t6921*t6918;
  t7532 = t6919*t6922;
  t7533 = t7531 + t7532;
  t7534 = -1.*t6735*t7533;
  t7535 = t7087 + t7534;
  t7263 = Power(t7262,2);
  t7264 = -13.6*t7263;
  t7265 = -13.6*t7262*t7131;
  t7279 = -13.6*t7271*t7278;
  t7280 = Power(t7278,2);
  t7281 = -13.6*t7280;
  t7385 = -20.4*t7262*t7271;
  t7386 = -6.8*t7131*t7271;
  t7387 = -20.4*t7262*t7278;
  t7388 = -6.8*t7131*t7278;
  t7392 = t6735*t7086;
  t7393 = t7392 + t7303;
  t7395 = t2928*t7161;
  t7396 = t7395 + t7101;
  t7543 = t2928*t7533;
  t7544 = t7282 + t7543;
  t7428 = Power(t6921,2);
  t7429 = 0.11*t7428;
  t7430 = Power(t6919,2);
  t7431 = 0.11*t7430;
  t7432 = t7429 + t7431;
  t7433 = -6.8*t7131*t7432;
  t7437 = -1.*t7436*t7100;
  t7441 = -1.*t7086*t7440;
  t7442 = t7437 + t7441;
  t7444 = t7436*t7161;
  t7445 = t7100*t7440;
  t7446 = t7444 + t7445;
  t7560 = -1.*t7141*t6919;
  t7561 = -0.24*t6921*t6922;
  t7562 = t7560 + t7561;
  t7536 = 0.384*var2[6]*t7535;
  t7537 = -3.2*t7150*t7287;
  t7538 = -3.2*t7174*t7535;
  t7541 = -6.4*t7287*t7304;
  t7542 = -6.4*t7319*t7314;
  t7545 = -6.4*t7287*t7544;
  t7546 = -6.4*t7319*t7535;
  t7549 = -6.4*t7304*t7319;
  t7550 = -3.2*t7393*t7314;
  t7551 = -3.2*t7287*t7396;
  t7552 = -6.4*t7319*t7544;
  t7553 = -3.2*t7393*t7535;
  t7554 = t6735*t7533;
  t7555 = t7318 + t7554;
  t7556 = -3.2*t7287*t7555;
  t7559 = -3.2*t7287*t7442;
  t7564 = t7436*t7100;
  t7565 = t7086*t7440;
  t7569 = -3.2*t7446*t7535;
  t7594 = -0.24*t6918*t6919;
  t7595 = t7594 + t7561;
  t7571 = -1.*t7086*t7436;
  t7597 = 0.24*t6921*t6918;
  t7598 = t7597 + t7439;
  t7573 = -1.*t7440*t7533;
  t7610 = -6.8*t7183;
  t7611 = -6.8*t7182*t6810;
  t7612 = Power(t7226,2);
  t7613 = -6.8*t7612;
  t7614 = -6.8*t7226*t7239;
  t7615 = -3.2*t7245*t7368;
  t7616 = Power(t7250,2);
  t7617 = -3.2*t7616;
  t7618 = Power(t7258,2);
  t7619 = -3.2*t7618;
  t7620 = -3.2*t7254*t7378;
  t7621 = -6.8*t7263;
  t7622 = -6.8*t7262*t7131;
  t7623 = Power(t7271,2);
  t7624 = -6.8*t7623;
  t7625 = -6.8*t7271*t7278;
  t7626 = -3.2*t7287*t7393;
  t7627 = Power(t7304,2);
  t7628 = -3.2*t7627;
  t7629 = Power(t7319,2);
  t7630 = -3.2*t7629;
  t7631 = -3.2*t7314*t7396;
  t7632 = t7610 + t7611 + t7613 + t7614 + t7615 + t7617 + t7619 + t7620 + t7621 + t7622 + t7624 + t7625 + t7626 + t7628 + t7630 + t7631;
  t7657 = 2.88*t2928;
  t7658 = -6.8*t7239*t7405;
  t7659 = -3.2*t7254*t7418;
  t7660 = -3.2*t7245*t7426;
  t7661 = -6.8*t7278*t7432;
  t7662 = -3.2*t7314*t7442;
  t7663 = -3.2*t7287*t7446;
  t7664 = t7657 + t7658 + t7659 + t7660 + t7661 + t7662 + t7663;
  t7635 = -0.748*t7239;
  t7636 = -3.2*t6878*t7245;
  t7637 = -3.2*t6851*t7254;
  t7638 = t7635 + t7636 + t7637;
  t7641 = -0.748*t7278;
  t7642 = -3.2*t7174*t7287;
  t7643 = -3.2*t7150*t7314;
  t7644 = t7641 + t7642 + t7643;
  t7460 = t6813 + t7458 + t7459;
  t7461 = -0.5*var2[3]*t7460;
  t7468 = t7184 + t7185 + t7240 + t7242 + t7462 + t7463 + t7466 + t7467;
  t7469 = -0.5*var2[1]*t7468;
  t7478 = t7324 + t7326 + t7327 + t7328 + t7470 + t7471 + t7472 + t7473 + t7474 + t7477;
  t7479 = -0.5*var2[0]*t7478;
  t7484 = t7483*t6772;
  t7487 = t6862*t7416;
  t7488 = t7484 + t7485 + t7486 + t7487;
  t7489 = -3.2*t7245*t7488;
  t7491 = -1.*t6683*t7483;
  t7493 = -1.*t6772*t7416;
  t7495 = t7491 + t7492 + t7493 + t7494;
  t7496 = -3.2*t7254*t7495;
  t7497 = t7406 + t7480 + t7489 + t7490 + t7496;
  t7498 = -0.5*var2[2]*t7497;
  t7499 = t7457 + t7461 + t7469 + t7479 + t7498;
  t7500 = var2[1]*t7499;
  t7672 = t7372 + t7455;
  t7700 = -1.*t6555*t6846;
  t7701 = 0.24*t3049*t6662;
  t7702 = t7700 + t7701;
  t7673 = 0.384*var2[4]*t7672;
  t7505 = Power(t3042,2);
  t7506 = -0.24*t7505;
  t7507 = t6875 + t7506;
  t7674 = -3.2*t6851*t7465;
  t7501 = -1.*t6846*t6662;
  t7502 = 0.24*t3042*t6662;
  t7503 = t7501 + t7502;
  t7675 = -3.2*t6878*t7672;
  t7678 = -6.4*t7618;
  t7679 = -6.4*t7250*t7465;
  t7680 = Power(t7465,2);
  t7681 = -6.4*t7680;
  t7682 = -6.4*t7258*t7672;
  t7685 = -6.4*t7368*t7258;
  t7686 = -3.2*t7378*t7465;
  t7687 = t6863 + t7464;
  t7688 = -3.2*t7258*t7687;
  t7689 = -3.2*t7368*t7672;
  t7690 = -3.2*t7250*t7476;
  t7691 = -6.4*t7465*t7476;
  t7694 = -3.2*t7418*t7465;
  t7517 = t7516*t6772;
  t7520 = t6862*t7519;
  t7521 = t7517 + t7485 + t7486 + t7520;
  t7696 = -3.2*t7426*t7672;
  t7699 = -1.*t6862*t7416;
  t7705 = -1.*t7409*t7454;
  t7523 = -1.*t6683*t7516;
  t7524 = -1.*t6772*t7519;
  t7525 = t7523 + t7492 + t7524 + t7494;
  t7710 = t6683*t7409;
  t7733 = -0.24*t6555*t3042;
  t7734 = t7733 + t7701;
  t7714 = t7416*t7454;
  t7646 = -13.6*t7182*t7226;
  t7647 = -13.6*t7182*t7239;
  t7753 = -3.2*t7368*t7250;
  t7754 = -3.2*t7258*t7378;
  t7755 = -3.2*t7368*t7465;
  t7756 = -3.2*t7258*t7476;
  t7757 = t7610 + t7611 + t7613 + t7614 + t7753 + t7754 + t7755 + t7756;
  t7767 = -3.2*t7258*t7418;
  t7768 = -3.2*t7258*t7488;
  t7769 = -3.2*t7426*t7465;
  t7770 = -3.2*t7250*t7495;
  t7771 = t7658 + t7767 + t7768 + t7769 + t7770;
  t7760 = -3.2*t6851*t7258;
  t7761 = -3.2*t6878*t7465;
  t7762 = t7635 + t7760 + t7761;
  t7504 = -3.2*t7503*t7245;
  t7508 = -3.2*t7507*t7254;
  t7509 = t7458 + t7504 + t7508 + t7459;
  t7510 = -0.5*var2[3]*t7509;
  t7511 = t7462 + t7463 + t7466 + t7467;
  t7512 = -0.5*var2[1]*t7511;
  t7513 = t7470 + t7471 + t7472 + t7473 + t7474 + t7477;
  t7514 = -0.5*var2[0]*t7513;
  t7522 = -3.2*t7245*t7521;
  t7526 = -3.2*t7254*t7525;
  t7527 = t7480 + t7522 + t7490 + t7526;
  t7528 = -0.5*var2[2]*t7527;
  t7529 = t7457 + t7510 + t7512 + t7514 + t7528;
  t7530 = var2[1]*t7529;
  t7721 = -3.2*t7507*t7258;
  t7722 = -3.2*t7503*t7465;
  t7723 = t7721 + t7674 + t7722 + t7675;
  t7724 = -0.5*var2[3]*t7723;
  t7725 = t7678 + t7679 + t7681 + t7682;
  t7726 = -0.5*var2[1]*t7725;
  t7727 = t7685 + t7686 + t7688 + t7689 + t7690 + t7691;
  t7728 = -0.5*var2[0]*t7727;
  t7729 = -3.2*t7488*t7465;
  t7730 = -3.2*t7521*t7465;
  t7731 = -1.*t7516*t6772;
  t7732 = -1.*t6683*t7519;
  t7735 = -1.*t6683*t7734;
  t7736 = -1.*t7483*t7454;
  t7737 = -1.*t7516*t7454;
  t7738 = t7731 + t7417 + t7699 + t7732 + t7735 + t7736 + t7737 + t7705;
  t7739 = -3.2*t7250*t7738;
  t7740 = -3.2*t7258*t7495;
  t7741 = -3.2*t7258*t7525;
  t7742 = t6683*t7483;
  t7743 = t6683*t7516;
  t7744 = t7516*t6862;
  t7745 = t6772*t7519;
  t7746 = t6772*t7734;
  t7747 = t7742 + t7743 + t7710 + t7744 + t7425 + t7745 + t7746 + t7714;
  t7748 = -3.2*t7258*t7747;
  t7749 = t7694 + t7729 + t7730 + t7696 + t7739 + t7740 + t7741 + t7748;
  t7750 = -0.5*var2[2]*t7749;
  t7751 = t7673 + t7724 + t7726 + t7728 + t7750;
  t7752 = var2[1]*t7751;
  t7759 = 0.384*var2[4]*t7465;
  t7800 = t7753 + t7754 + t7755 + t7756;
  t7809 = -3.2*t7258*t7521;
  t7810 = -3.2*t7250*t7525;
  t7811 = t7767 + t7809 + t7769 + t7810;
  t7802 = -3.2*t7507*t7250;
  t7803 = -3.2*t7503*t7258;
  t7804 = t7802 + t7760 + t7803 + t7761;
  t7776 = 0.384*var2[1]*t7465;
  t7539 = t7132 + t7537 + t7538;
  t7540 = -0.5*var2[5]*t7539;
  t7547 = t7264 + t7265 + t7279 + t7281 + t7541 + t7542 + t7545 + t7546;
  t7548 = -0.5*var2[1]*t7547;
  t7557 = t7385 + t7386 + t7387 + t7388 + t7549 + t7550 + t7551 + t7552 + t7553 + t7556;
  t7558 = -0.5*var2[0]*t7557;
  t7563 = t7562*t7100;
  t7566 = t7161*t7440;
  t7567 = t7563 + t7564 + t7565 + t7566;
  t7568 = -3.2*t7287*t7567;
  t7570 = -1.*t7086*t7562;
  t7572 = -1.*t7100*t7440;
  t7574 = t7570 + t7571 + t7572 + t7573;
  t7575 = -3.2*t7314*t7574;
  t7576 = t7433 + t7559 + t7568 + t7569 + t7575;
  t7577 = -0.5*var2[2]*t7576;
  t7578 = t7536 + t7540 + t7548 + t7558 + t7577;
  t7579 = var2[1]*t7578;
  t7816 = t7395 + t7534;
  t7844 = -1.*t6921*t7141;
  t7845 = 0.24*t6919*t6922;
  t7846 = t7844 + t7845;
  t7817 = 0.384*var2[6]*t7816;
  t7584 = Power(t6918,2);
  t7585 = -0.24*t7584;
  t7586 = t7171 + t7585;
  t7818 = -3.2*t7150*t7544;
  t7580 = -1.*t7141*t6922;
  t7581 = 0.24*t6918*t6922;
  t7582 = t7580 + t7581;
  t7819 = -3.2*t7174*t7816;
  t7822 = -6.4*t7629;
  t7823 = -6.4*t7304*t7544;
  t7824 = Power(t7544,2);
  t7825 = -6.4*t7824;
  t7826 = -6.4*t7319*t7816;
  t7829 = -6.4*t7393*t7319;
  t7830 = -3.2*t7396*t7544;
  t7831 = t7162 + t7543;
  t7832 = -3.2*t7319*t7831;
  t7833 = -3.2*t7393*t7816;
  t7834 = -3.2*t7304*t7555;
  t7835 = -6.4*t7544*t7555;
  t7838 = -3.2*t7442*t7544;
  t7596 = t7595*t7100;
  t7599 = t7161*t7598;
  t7600 = t7596 + t7564 + t7565 + t7599;
  t7840 = -3.2*t7446*t7816;
  t7843 = -1.*t7161*t7440;
  t7849 = -1.*t7436*t7533;
  t7602 = -1.*t7086*t7595;
  t7603 = -1.*t7100*t7598;
  t7604 = t7602 + t7571 + t7603 + t7573;
  t7854 = t7086*t7436;
  t7877 = -0.24*t6921*t6918;
  t7878 = t7877 + t7845;
  t7858 = t7440*t7533;
  t7650 = -13.6*t7262*t7271;
  t7651 = -13.6*t7262*t7278;
  t7897 = -3.2*t7393*t7304;
  t7898 = -3.2*t7319*t7396;
  t7899 = -3.2*t7393*t7544;
  t7900 = -3.2*t7319*t7555;
  t7901 = t7621 + t7622 + t7624 + t7625 + t7897 + t7898 + t7899 + t7900;
  t7911 = -3.2*t7319*t7442;
  t7912 = -3.2*t7319*t7567;
  t7913 = -3.2*t7446*t7544;
  t7914 = -3.2*t7304*t7574;
  t7915 = t7661 + t7911 + t7912 + t7913 + t7914;
  t7904 = -3.2*t7150*t7319;
  t7905 = -3.2*t7174*t7544;
  t7906 = t7641 + t7904 + t7905;
  t7583 = -3.2*t7582*t7287;
  t7587 = -3.2*t7586*t7314;
  t7588 = t7537 + t7583 + t7587 + t7538;
  t7589 = -0.5*var2[5]*t7588;
  t7590 = t7541 + t7542 + t7545 + t7546;
  t7591 = -0.5*var2[1]*t7590;
  t7592 = t7549 + t7550 + t7551 + t7552 + t7553 + t7556;
  t7593 = -0.5*var2[0]*t7592;
  t7601 = -3.2*t7287*t7600;
  t7605 = -3.2*t7314*t7604;
  t7606 = t7559 + t7601 + t7569 + t7605;
  t7607 = -0.5*var2[2]*t7606;
  t7608 = t7536 + t7589 + t7591 + t7593 + t7607;
  t7609 = var2[1]*t7608;
  t7865 = -3.2*t7586*t7319;
  t7866 = -3.2*t7582*t7544;
  t7867 = t7865 + t7818 + t7866 + t7819;
  t7868 = -0.5*var2[5]*t7867;
  t7869 = t7822 + t7823 + t7825 + t7826;
  t7870 = -0.5*var2[1]*t7869;
  t7871 = t7829 + t7830 + t7832 + t7833 + t7834 + t7835;
  t7872 = -0.5*var2[0]*t7871;
  t7873 = -3.2*t7567*t7544;
  t7874 = -3.2*t7600*t7544;
  t7875 = -1.*t7595*t7100;
  t7876 = -1.*t7086*t7598;
  t7879 = -1.*t7086*t7878;
  t7880 = -1.*t7562*t7533;
  t7881 = -1.*t7595*t7533;
  t7882 = t7875 + t7441 + t7843 + t7876 + t7879 + t7880 + t7881 + t7849;
  t7883 = -3.2*t7304*t7882;
  t7884 = -3.2*t7319*t7574;
  t7885 = -3.2*t7319*t7604;
  t7886 = t7086*t7562;
  t7887 = t7086*t7595;
  t7888 = t7595*t7161;
  t7889 = t7100*t7598;
  t7890 = t7100*t7878;
  t7891 = t7886 + t7887 + t7854 + t7888 + t7445 + t7889 + t7890 + t7858;
  t7892 = -3.2*t7319*t7891;
  t7893 = t7838 + t7873 + t7874 + t7840 + t7883 + t7884 + t7885 + t7892;
  t7894 = -0.5*var2[2]*t7893;
  t7895 = t7817 + t7868 + t7870 + t7872 + t7894;
  t7896 = var2[1]*t7895;
  t7903 = 0.384*var2[6]*t7544;
  t7944 = t7897 + t7898 + t7899 + t7900;
  t7953 = -3.2*t7319*t7600;
  t7954 = -3.2*t7304*t7604;
  t7955 = t7911 + t7953 + t7913 + t7954;
  t7946 = -3.2*t7586*t7304;
  t7947 = -3.2*t7582*t7319;
  t7948 = t7946 + t7904 + t7947 + t7905;
  t7920 = 0.384*var2[1]*t7544;
  p_output1[0]=var2[1]*(-0.5*(-9.6*t7250*t7254 - 9.6*t7245*t7258 - 9.6*t7304*t7314 - 9.6*t7287*t7319 + t7324 + t7326 + t7327 + t7328 - 3.2*t6798*t7368 - 3.2*t6872*t7378 + t7385 + t7386 + t7387 + t7388 - 3.2*t7102*t7393 - 3.2*t7168*t7396)*var2[0] - 0.5*(t7184 + t7185 + t7240 + t7242 - 6.4*Power(t7245,2) - 6.4*t6872*t7250 - 6.4*Power(t7254,2) - 6.4*t6798*t7258 + t7264 + t7265 + t7279 + t7281 - 6.4*Power(t7287,2) - 6.4*t7168*t7304 - 6.4*Power(t7314,2) - 6.4*t7102*t7319)*var2[1] - 0.5*(-2.88*t6735 + t7406 - 3.2*t6872*t7418 - 3.2*t6798*t7426 + t7433 - 3.2*t7168*t7442 - 3.2*t7102*t7446)*var2[2] - 0.5*(t6813 - 3.2*t6851*t6872 - 3.2*t6798*t6878)*var2[3] + 0.384*t6798*var2[4] - 0.5*(t7132 - 3.2*t7150*t7168 - 3.2*t7102*t7174)*var2[5] + 0.384*t7102*var2[6]);
  p_output1[1]=t7500;
  p_output1[2]=t7530;
  p_output1[3]=t7579;
  p_output1[4]=t7609;
  p_output1[5]=-0.5*t7632*var2[1];
  p_output1[6]=-0.5*t7632*var2[0] - 1.*(-6.4*t7250*t7254 - 6.4*t7245*t7258 - 6.4*t7304*t7314 - 6.4*t7287*t7319 + t7646 + t7647 + t7650 + t7651)*var2[1] - 0.5*t7664*var2[2] - 0.5*t7638*var2[3] + 0.384*t7245*var2[4] - 0.5*t7644*var2[5] + 0.384*t7287*var2[6];
  p_output1[7]=-0.5*t7664*var2[1];
  p_output1[8]=-0.5*t7638*var2[1];
  p_output1[9]=0.384*t7245*var2[1];
  p_output1[10]=-0.5*t7644*var2[1];
  p_output1[11]=0.384*t7287*var2[1];
  p_output1[12]=t7500;
  p_output1[13]=var2[1]*(t7673 - 0.5*(t7324 + t7326 + t7327 + t7328 + t7685 + t7686 + t7688 + t7689 + t7690 + t7691)*var2[0] - 0.5*(t7184 + t7185 + t7240 + t7242 + t7678 + t7679 + t7681 + t7682)*var2[1] - 0.5*(t7406 - 6.4*t7465*t7488 - 6.4*t7258*t7495 + t7694 + t7696 - 3.2*t7250*(-2.*t6683*t7416 - 1.*t6772*t7483 - 2.*t7454*t7483 + t7699 - 1.*t6683*t7702 + t7705) - 3.2*t7258*(2.*t6772*t7416 + 2.*t6683*t7483 + t6862*t7483 + t6772*t7702 + t7710 + t7714))*var2[2] - 0.5*(t6813 + t7674 + t7675)*var2[3]);
  p_output1[14]=t7752;
  p_output1[15]=-0.5*t7757*var2[1];
  p_output1[16]=t7759 - 0.5*t7757*var2[0] - 1.*(t7470 + t7473 + t7646 + t7647)*var2[1] - 0.5*t7771*var2[2] - 0.5*t7762*var2[3];
  p_output1[17]=-0.5*t7771*var2[1];
  p_output1[18]=-0.5*t7762*var2[1];
  p_output1[19]=t7776;
  p_output1[20]=t7530;
  p_output1[21]=t7752;
  p_output1[22]=var2[1]*(t7673 + t7726 + t7728 - 0.5*(-6.4*t7465*t7521 - 6.4*t7258*t7525 + t7694 + t7696 - 3.2*t7250*(-2.*t7454*t7516 - 2.*t6683*t7519 + t7699 + t7705 + t7731 + t7735) - 3.2*t7258*(2.*t6683*t7516 + 2.*t6772*t7519 + t7710 + t7714 + t7744 + t7746))*var2[2] - 0.5*(-3.2*t7250*t7503 - 6.4*t7465*t7503 - 3.2*t7258*(-1.*t3042*t6846 + 0.24*t7505) - 6.4*t7258*t7507 + t7674 + t7675)*var2[3]);
  p_output1[23]=-0.5*t7800*var2[1];
  p_output1[24]=t7759 - 0.5*t7800*var2[0] - 1.*(t7470 + t7473)*var2[1] - 0.5*t7811*var2[2] - 0.5*t7804*var2[3];
  p_output1[25]=-0.5*t7811*var2[1];
  p_output1[26]=-0.5*t7804*var2[1];
  p_output1[27]=t7776;
  p_output1[28]=t7579;
  p_output1[29]=var2[1]*(t7817 - 0.5*(t7385 + t7386 + t7387 + t7388 + t7829 + t7830 + t7832 + t7833 + t7834 + t7835)*var2[0] - 0.5*(t7264 + t7265 + t7279 + t7281 + t7822 + t7823 + t7825 + t7826)*var2[1] - 0.5*(t7433 - 6.4*t7544*t7567 - 6.4*t7319*t7574 + t7838 + t7840 - 3.2*t7304*(-2.*t7086*t7440 - 1.*t7100*t7562 - 2.*t7533*t7562 + t7843 - 1.*t7086*t7846 + t7849) - 3.2*t7319*(2.*t7100*t7440 + 2.*t7086*t7562 + t7161*t7562 + t7100*t7846 + t7854 + t7858))*var2[2] - 0.5*(t7132 + t7818 + t7819)*var2[5]);
  p_output1[30]=t7896;
  p_output1[31]=-0.5*t7901*var2[1];
  p_output1[32]=t7903 - 0.5*t7901*var2[0] - 1.*(t7549 + t7552 + t7650 + t7651)*var2[1] - 0.5*t7915*var2[2] - 0.5*t7906*var2[5];
  p_output1[33]=-0.5*t7915*var2[1];
  p_output1[34]=-0.5*t7906*var2[1];
  p_output1[35]=t7920;
  p_output1[36]=t7609;
  p_output1[37]=t7896;
  p_output1[38]=var2[1]*(t7817 + t7870 + t7872 - 0.5*(-6.4*t7544*t7600 - 6.4*t7319*t7604 + t7838 + t7840 - 3.2*t7304*(-2.*t7533*t7595 - 2.*t7086*t7598 + t7843 + t7849 + t7875 + t7879) - 3.2*t7319*(2.*t7086*t7595 + 2.*t7100*t7598 + t7854 + t7858 + t7888 + t7890))*var2[2] - 0.5*(-3.2*t7304*t7582 - 6.4*t7544*t7582 - 3.2*t7319*(-1.*t6918*t7141 + 0.24*t7584) - 6.4*t7319*t7586 + t7818 + t7819)*var2[5]);
  p_output1[39]=-0.5*t7944*var2[1];
  p_output1[40]=t7903 - 0.5*t7944*var2[0] - 1.*(t7549 + t7552)*var2[1] - 0.5*t7955*var2[2] - 0.5*t7948*var2[5];
  p_output1[41]=-0.5*t7955*var2[1];
  p_output1[42]=-0.5*t7948*var2[1];
  p_output1[43]=t7920;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec2_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce3_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
