/*
 * Automatically Generated from Mathematica.
 * Wed 6 Nov 2019 23:20:46 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t8025;
  double t3242;
  double t7298;
  double t8172;
  double t9640;
  double t255;
  double t7862;
  double t9241;
  double t9557;
  double t9637;
  double t10906;
  double t10959;
  double t10982;
  double t11183;
  double t11527;
  double t13796;
  double t13815;
  double t13875;
  double t13934;
  double t13939;
  double t15746;
  double t14470;
  double t14525;
  double t15760;
  double t15736;
  double t15761;
  double t15797;
  double t15798;
  double t15799;
  double t15938;
  double t15939;
  double t15958;
  double t16028;
  double t16055;
  double t16059;
  double t16078;
  double t16079;
  double t16080;
  double t16145;
  double t16146;
  double t16147;
  double t16132;
  double t16133;
  double t16139;
  double t12174;
  double t12247;
  double t13565;
  double t16152;
  double t16153;
  double t16154;
  double t14357;
  double t14256;
  double t14303;
  double t14307;
  double t14322;
  double t14365;
  double t16167;
  double t16173;
  double t16191;
  double t16192;
  double t16193;
  double t16188;
  double t16189;
  double t16190;
  double t16030;
  double t16041;
  double t16053;
  double t16195;
  double t16196;
  double t16197;
  double t16103;
  double t16094;
  double t16095;
  double t16096;
  double t16097;
  double t16104;
  double t16214;
  double t16220;
  double t16170;
  double t16171;
  double t16166;
  double t16168;
  double t16158;
  double t16159;
  double t16185;
  double t16186;
  double t16217;
  double t16218;
  double t16213;
  double t16215;
  double t16210;
  double t16211;
  double t16225;
  double t16226;
  double t16268;
  double t16269;
  double t16270;
  double t16272;
  double t16273;
  double t16274;
  double t16288;
  double t16289;
  double t16290;
  double t16292;
  double t16293;
  double t16294;
  double t13733;
  double t14244;
  double t14246;
  double t14255;
  double t13945;
  double t14073;
  double t14198;
  double t14218;
  double t16306;
  double t16307;
  double t16308;
  double t16309;
  double t16310;
  double t16149;
  double t16155;
  double t16156;
  double t16157;
  double t16172;
  double t16230;
  double t16231;
  double t16232;
  double t16233;
  double t16234;
  double t16235;
  double t16323;
  double t16324;
  double t16262;
  double t16263;
  double t16264;
  double t16265;
  double t16266;
  double t16267;
  double t16271;
  double t16275;
  double t16276;
  double t16278;
  double t16279;
  double t16280;
  double t16335;
  double t16336;
  double t16337;
  double t16311;
  double t16312;
  double t16313;
  double t16316;
  double t16317;
  double t16318;
  double t16319;
  double t16320;
  double t16321;
  double t16322;
  double t16325;
  double t16328;
  double t16329;
  double t16330;
  double t16331;
  double t16334;
  double t16339;
  double t16340;
  double t16344;
  double t16369;
  double t16370;
  double t16346;
  double t16372;
  double t16373;
  double t16348;
  double t16054;
  double t16091;
  double t16092;
  double t16093;
  double t16081;
  double t16082;
  double t16083;
  double t16084;
  double t16385;
  double t16386;
  double t16387;
  double t16388;
  double t16389;
  double t16194;
  double t16201;
  double t16208;
  double t16209;
  double t16219;
  double t16245;
  double t16246;
  double t16247;
  double t16248;
  double t16249;
  double t16250;
  double t16402;
  double t16403;
  double t16282;
  double t16283;
  double t16284;
  double t16285;
  double t16286;
  double t16287;
  double t16291;
  double t16295;
  double t16296;
  double t16298;
  double t16299;
  double t16300;
  double t16414;
  double t16415;
  double t16416;
  double t16390;
  double t16391;
  double t16392;
  double t16395;
  double t16396;
  double t16397;
  double t16398;
  double t16399;
  double t16400;
  double t16401;
  double t16404;
  double t16407;
  double t16408;
  double t16409;
  double t16410;
  double t16413;
  double t16418;
  double t16419;
  double t16423;
  double t16448;
  double t16449;
  double t16425;
  double t16451;
  double t16452;
  double t16427;
  double t16240;
  double t16242;
  double t16254;
  double t16256;
  double t16486;
  double t16487;
  double t16488;
  double t16489;
  double t16490;
  double t16491;
  double t16492;
  double t16493;
  double t16494;
  double t16495;
  double t16496;
  double t16497;
  double t16498;
  double t16499;
  double t16500;
  double t16501;
  double t16502;
  double t16504;
  double t16505;
  double t16506;
  double t16507;
  double t16508;
  double t16509;
  double t16510;
  double t16511;
  double t16465;
  double t16466;
  double t16467;
  double t16468;
  double t16471;
  double t16472;
  double t16473;
  double t16474;
  double t16314;
  double t16315;
  double t16326;
  double t16327;
  double t16332;
  double t16333;
  double t16338;
  double t16341;
  double t16342;
  double t16343;
  double t16345;
  double t16347;
  double t16349;
  double t16350;
  double t16351;
  double t16352;
  double t16353;
  double t16354;
  double t16176;
  double t16520;
  double t16478;
  double t16548;
  double t16549;
  double t16550;
  double t16521;
  double t16355;
  double t16356;
  double t16357;
  double t16522;
  double t16523;
  double t16359;
  double t16360;
  double t16361;
  double t16526;
  double t16527;
  double t16528;
  double t16529;
  double t16530;
  double t16531;
  double t16534;
  double t16535;
  double t16536;
  double t16537;
  double t16538;
  double t16539;
  double t16542;
  double t16543;
  double t16371;
  double t16374;
  double t16375;
  double t16547;
  double t16553;
  double t16377;
  double t16378;
  double t16379;
  double t16558;
  double t16581;
  double t16582;
  double t16562;
  double t16476;
  double t16477;
  double t16610;
  double t16611;
  double t16612;
  double t16613;
  double t16614;
  double t16616;
  double t16617;
  double t16618;
  double t16619;
  double t16620;
  double t16602;
  double t16603;
  double t16604;
  double t16358;
  double t16362;
  double t16363;
  double t16364;
  double t16365;
  double t16366;
  double t16367;
  double t16368;
  double t16376;
  double t16380;
  double t16381;
  double t16382;
  double t16383;
  double t16384;
  double t16569;
  double t16570;
  double t16571;
  double t16572;
  double t16573;
  double t16574;
  double t16575;
  double t16576;
  double t16577;
  double t16578;
  double t16579;
  double t16580;
  double t16583;
  double t16584;
  double t16585;
  double t16586;
  double t16587;
  double t16588;
  double t16589;
  double t16590;
  double t16591;
  double t16592;
  double t16593;
  double t16594;
  double t16595;
  double t16596;
  double t16597;
  double t16598;
  double t16599;
  double t16600;
  double t16601;
  double t16606;
  double t16607;
  double t16656;
  double t16658;
  double t16659;
  double t16660;
  double t16650;
  double t16651;
  double t16652;
  double t16626;
  double t16393;
  double t16394;
  double t16405;
  double t16406;
  double t16411;
  double t16412;
  double t16417;
  double t16420;
  double t16421;
  double t16422;
  double t16424;
  double t16426;
  double t16428;
  double t16429;
  double t16430;
  double t16431;
  double t16432;
  double t16433;
  double t16223;
  double t16666;
  double t16482;
  double t16694;
  double t16695;
  double t16696;
  double t16667;
  double t16434;
  double t16435;
  double t16436;
  double t16668;
  double t16669;
  double t16438;
  double t16439;
  double t16440;
  double t16672;
  double t16673;
  double t16674;
  double t16675;
  double t16676;
  double t16677;
  double t16680;
  double t16681;
  double t16682;
  double t16683;
  double t16684;
  double t16685;
  double t16688;
  double t16689;
  double t16450;
  double t16453;
  double t16454;
  double t16693;
  double t16699;
  double t16456;
  double t16457;
  double t16458;
  double t16704;
  double t16727;
  double t16728;
  double t16708;
  double t16480;
  double t16481;
  double t16756;
  double t16757;
  double t16758;
  double t16759;
  double t16760;
  double t16762;
  double t16763;
  double t16764;
  double t16765;
  double t16766;
  double t16748;
  double t16749;
  double t16750;
  double t16437;
  double t16441;
  double t16442;
  double t16443;
  double t16444;
  double t16445;
  double t16446;
  double t16447;
  double t16455;
  double t16459;
  double t16460;
  double t16461;
  double t16462;
  double t16463;
  double t16715;
  double t16716;
  double t16717;
  double t16718;
  double t16719;
  double t16720;
  double t16721;
  double t16722;
  double t16723;
  double t16724;
  double t16725;
  double t16726;
  double t16729;
  double t16730;
  double t16731;
  double t16732;
  double t16733;
  double t16734;
  double t16735;
  double t16736;
  double t16737;
  double t16738;
  double t16739;
  double t16740;
  double t16741;
  double t16742;
  double t16743;
  double t16744;
  double t16745;
  double t16746;
  double t16747;
  double t16752;
  double t16753;
  double t16802;
  double t16804;
  double t16805;
  double t16806;
  double t16796;
  double t16797;
  double t16798;
  double t16772;
  t8025 = Cos(var1[3]);
  t3242 = Cos(var1[4]);
  t7298 = Sin(var1[3]);
  t8172 = Sin(var1[4]);
  t9640 = Cos(var1[2]);
  t255 = Sin(var1[2]);
  t7862 = -1.*t3242*t7298;
  t9241 = -1.*t8025*t8172;
  t9557 = t7862 + t9241;
  t9637 = -1.*t255*t9557;
  t10906 = t8025*t3242;
  t10959 = -1.*t7298*t8172;
  t10982 = t10906 + t10959;
  t11183 = -1.*t9640*t10982;
  t11527 = t9637 + t11183;
  t13796 = -1.*t3242;
  t13815 = 1. + t13796;
  t13875 = 0.4*t13815;
  t13934 = 0.64*t3242;
  t13939 = t13875 + t13934;
  t15746 = Cos(var1[5]);
  t14470 = Cos(var1[6]);
  t14525 = Sin(var1[5]);
  t15760 = Sin(var1[6]);
  t15736 = -1.*t14470*t14525;
  t15761 = -1.*t15746*t15760;
  t15797 = t15736 + t15761;
  t15798 = -1.*t255*t15797;
  t15799 = t15746*t14470;
  t15938 = -1.*t14525*t15760;
  t15939 = t15799 + t15938;
  t15958 = -1.*t9640*t15939;
  t16028 = t15798 + t15958;
  t16055 = -1.*t14470;
  t16059 = 1. + t16055;
  t16078 = 0.4*t16059;
  t16079 = 0.64*t14470;
  t16080 = t16078 + t16079;
  t16145 = t9640*t8025;
  t16146 = -1.*t255*t7298;
  t16147 = t16145 + t16146;
  t16132 = -1.*t8025*t255;
  t16133 = -1.*t9640*t7298;
  t16139 = t16132 + t16133;
  t12174 = -1.*t9640*t8025;
  t12247 = t255*t7298;
  t13565 = t12174 + t12247;
  t16152 = t8025*t255;
  t16153 = t9640*t7298;
  t16154 = t16152 + t16153;
  t14357 = -1.*t255*t10982;
  t14256 = t3242*t7298;
  t14303 = t8025*t8172;
  t14307 = t14256 + t14303;
  t14322 = -1.*t9640*t14307;
  t14365 = t14322 + t14357;
  t16167 = t9640*t10982;
  t16173 = t255*t10982;
  t16191 = t9640*t15746;
  t16192 = -1.*t255*t14525;
  t16193 = t16191 + t16192;
  t16188 = -1.*t15746*t255;
  t16189 = -1.*t9640*t14525;
  t16190 = t16188 + t16189;
  t16030 = -1.*t9640*t15746;
  t16041 = t255*t14525;
  t16053 = t16030 + t16041;
  t16195 = t15746*t255;
  t16196 = t9640*t14525;
  t16197 = t16195 + t16196;
  t16103 = -1.*t255*t15939;
  t16094 = t14470*t14525;
  t16095 = t15746*t15760;
  t16096 = t16094 + t16095;
  t16097 = -1.*t9640*t16096;
  t16104 = t16097 + t16103;
  t16214 = t9640*t15939;
  t16220 = t255*t15939;
  t16170 = t255*t9557;
  t16171 = t16170 + t16167;
  t16166 = -1.*t255*t14307;
  t16168 = t16166 + t16167;
  t16158 = t9640*t9557;
  t16159 = t16158 + t14357;
  t16185 = t9640*t14307;
  t16186 = t16185 + t16173;
  t16217 = t255*t15797;
  t16218 = t16217 + t16214;
  t16213 = -1.*t255*t16096;
  t16215 = t16213 + t16214;
  t16210 = t9640*t15797;
  t16211 = t16210 + t16103;
  t16225 = t9640*t16096;
  t16226 = t16225 + t16220;
  t16268 = t13939*t7298;
  t16269 = 0.24*t8025*t8172;
  t16270 = t16268 + t16269;
  t16272 = t8025*t13939;
  t16273 = -0.24*t7298*t8172;
  t16274 = t16272 + t16273;
  t16288 = t16080*t14525;
  t16289 = 0.24*t15746*t15760;
  t16290 = t16288 + t16289;
  t16292 = t15746*t16080;
  t16293 = -0.24*t14525*t15760;
  t16294 = t16292 + t16293;
  t13733 = -0.748*t13565;
  t14244 = t13939*t8172;
  t14246 = -0.24*t3242*t8172;
  t14255 = t14244 + t14246;
  t13945 = t13939*t3242;
  t14073 = Power(t8172,2);
  t14198 = 0.24*t14073;
  t14218 = t13945 + t14198;
  t16306 = -1.*t8025*t3242;
  t16307 = t7298*t8172;
  t16308 = t16306 + t16307;
  t16309 = t9640*t16308;
  t16310 = t9637 + t16309;
  t16149 = -20.4*t16139*t16147;
  t16155 = -6.8*t16154*t16147;
  t16156 = -20.4*t16139*t13565;
  t16157 = -6.8*t16154*t13565;
  t16172 = -1.*t9640*t9557;
  t16230 = Power(t16139,2);
  t16231 = -13.6*t16230;
  t16232 = -13.6*t16139*t16154;
  t16233 = Power(t16147,2);
  t16234 = -13.6*t16233;
  t16235 = -13.6*t16147*t13565;
  t16323 = t255*t16308;
  t16324 = t16158 + t16323;
  t16262 = Power(t8025,2);
  t16263 = 0.11*t16262;
  t16264 = Power(t7298,2);
  t16265 = 0.11*t16264;
  t16266 = t16263 + t16265;
  t16267 = -6.8*t13565*t16266;
  t16271 = -1.*t16270*t10982;
  t16275 = -1.*t9557*t16274;
  t16276 = t16271 + t16275;
  t16278 = t16270*t14307;
  t16279 = t10982*t16274;
  t16280 = t16278 + t16279;
  t16335 = -1.*t13939*t7298;
  t16336 = -0.24*t8025*t8172;
  t16337 = t16335 + t16336;
  t16311 = 0.384*var2[4]*t16310;
  t16312 = -3.2*t14255*t16159;
  t16313 = -3.2*t14218*t16310;
  t16316 = -6.4*t16168*t16159;
  t16317 = -3.2*t16171*t14365;
  t16318 = -3.2*t11527*t16186;
  t16319 = -6.4*t16159*t16310;
  t16320 = -1.*t255*t16308;
  t16321 = t16172 + t16320;
  t16322 = -3.2*t16171*t16321;
  t16325 = -3.2*t11527*t16324;
  t16328 = -6.4*t16171*t16168;
  t16329 = -6.4*t16159*t16186;
  t16330 = -6.4*t16171*t16310;
  t16331 = -6.4*t16159*t16324;
  t16334 = -3.2*t16159*t16276;
  t16339 = t16270*t10982;
  t16340 = t9557*t16274;
  t16344 = -3.2*t16280*t16310;
  t16369 = -0.24*t3242*t7298;
  t16370 = t16369 + t16336;
  t16346 = -1.*t9557*t16270;
  t16372 = 0.24*t8025*t3242;
  t16373 = t16372 + t16273;
  t16348 = -1.*t16274*t16308;
  t16054 = -0.748*t16053;
  t16091 = t16080*t15760;
  t16092 = -0.24*t14470*t15760;
  t16093 = t16091 + t16092;
  t16081 = t16080*t14470;
  t16082 = Power(t15760,2);
  t16083 = 0.24*t16082;
  t16084 = t16081 + t16083;
  t16385 = -1.*t15746*t14470;
  t16386 = t14525*t15760;
  t16387 = t16385 + t16386;
  t16388 = t9640*t16387;
  t16389 = t15798 + t16388;
  t16194 = -20.4*t16190*t16193;
  t16201 = -6.8*t16197*t16193;
  t16208 = -20.4*t16190*t16053;
  t16209 = -6.8*t16197*t16053;
  t16219 = -1.*t9640*t15797;
  t16245 = Power(t16190,2);
  t16246 = -13.6*t16245;
  t16247 = -13.6*t16190*t16197;
  t16248 = Power(t16193,2);
  t16249 = -13.6*t16248;
  t16250 = -13.6*t16193*t16053;
  t16402 = t255*t16387;
  t16403 = t16210 + t16402;
  t16282 = Power(t15746,2);
  t16283 = 0.11*t16282;
  t16284 = Power(t14525,2);
  t16285 = 0.11*t16284;
  t16286 = t16283 + t16285;
  t16287 = -6.8*t16053*t16286;
  t16291 = -1.*t16290*t15939;
  t16295 = -1.*t15797*t16294;
  t16296 = t16291 + t16295;
  t16298 = t16290*t16096;
  t16299 = t15939*t16294;
  t16300 = t16298 + t16299;
  t16414 = -1.*t16080*t14525;
  t16415 = -0.24*t15746*t15760;
  t16416 = t16414 + t16415;
  t16390 = 0.384*var2[6]*t16389;
  t16391 = -3.2*t16093*t16211;
  t16392 = -3.2*t16084*t16389;
  t16395 = -6.4*t16215*t16211;
  t16396 = -3.2*t16218*t16104;
  t16397 = -3.2*t16028*t16226;
  t16398 = -6.4*t16211*t16389;
  t16399 = -1.*t255*t16387;
  t16400 = t16219 + t16399;
  t16401 = -3.2*t16218*t16400;
  t16404 = -3.2*t16028*t16403;
  t16407 = -6.4*t16218*t16215;
  t16408 = -6.4*t16211*t16226;
  t16409 = -6.4*t16218*t16389;
  t16410 = -6.4*t16211*t16403;
  t16413 = -3.2*t16211*t16296;
  t16418 = t16290*t15939;
  t16419 = t15797*t16294;
  t16423 = -3.2*t16300*t16389;
  t16448 = -0.24*t14470*t14525;
  t16449 = t16448 + t16415;
  t16425 = -1.*t15797*t16290;
  t16451 = 0.24*t15746*t14470;
  t16452 = t16451 + t16293;
  t16427 = -1.*t16294*t16387;
  t16240 = Power(t16168,2);
  t16242 = Power(t16159,2);
  t16254 = Power(t16215,2);
  t16256 = Power(t16211,2);
  t16486 = -6.8*t16230;
  t16487 = -6.8*t16139*t16154;
  t16488 = -6.8*t16233;
  t16489 = -6.8*t16147*t13565;
  t16490 = -3.2*t11527*t16171;
  t16491 = -3.2*t16240;
  t16492 = -3.2*t16242;
  t16493 = -3.2*t14365*t16186;
  t16494 = -6.8*t16245;
  t16495 = -6.8*t16190*t16197;
  t16496 = -6.8*t16248;
  t16497 = -6.8*t16193*t16053;
  t16498 = -3.2*t16028*t16218;
  t16499 = -3.2*t16254;
  t16500 = -3.2*t16256;
  t16501 = -3.2*t16104*t16226;
  t16502 = t16486 + t16487 + t16488 + t16489 + t16490 + t16491 + t16492 + t16493 + t16494 + t16495 + t16496 + t16497 + t16498 + t16499 + t16500 + t16501;
  t16504 = 2.88*t255;
  t16505 = -6.8*t16139*t16266;
  t16506 = -3.2*t16168*t16276;
  t16507 = -3.2*t16159*t16280;
  t16508 = -6.8*t16190*t16286;
  t16509 = -3.2*t16215*t16296;
  t16510 = -3.2*t16211*t16300;
  t16511 = t16504 + t16505 + t16506 + t16507 + t16508 + t16509 + t16510;
  t16465 = -0.748*t16139;
  t16466 = -3.2*t14255*t16168;
  t16467 = -3.2*t14218*t16159;
  t16468 = t16465 + t16466 + t16467;
  t16471 = -0.748*t16190;
  t16472 = -3.2*t16093*t16215;
  t16473 = -3.2*t16084*t16211;
  t16474 = t16471 + t16472 + t16473;
  t16314 = t13733 + t16312 + t16313;
  t16315 = -0.5*var2[3]*t16314;
  t16326 = t16149 + t16155 + t16156 + t16157 + t16316 + t16317 + t16318 + t16319 + t16322 + t16325;
  t16327 = -0.5*var2[1]*t16326;
  t16332 = t16231 + t16232 + t16234 + t16235 + t16328 + t16329 + t16330 + t16331;
  t16333 = -0.5*var2[0]*t16332;
  t16338 = t16337*t10982;
  t16341 = t14307*t16274;
  t16342 = t16338 + t16339 + t16340 + t16341;
  t16343 = -3.2*t16159*t16342;
  t16345 = -1.*t9557*t16337;
  t16347 = -1.*t10982*t16274;
  t16349 = t16345 + t16346 + t16347 + t16348;
  t16350 = -3.2*t16168*t16349;
  t16351 = t16267 + t16334 + t16343 + t16344 + t16350;
  t16352 = -0.5*var2[2]*t16351;
  t16353 = t16311 + t16315 + t16327 + t16333 + t16352;
  t16354 = var2[0]*t16353;
  t16176 = t255*t14307;
  t16520 = t16176 + t16309;
  t16478 = -6.4*t16171*t16159;
  t16548 = -1.*t8025*t13939;
  t16549 = 0.24*t7298*t8172;
  t16550 = t16548 + t16549;
  t16521 = 0.384*var2[4]*t16520;
  t16355 = Power(t3242,2);
  t16356 = -0.24*t16355;
  t16357 = t13945 + t16356;
  t16522 = -3.2*t14218*t16520;
  t16523 = -3.2*t14255*t16324;
  t16359 = -1.*t13939*t8172;
  t16360 = 0.24*t3242*t8172;
  t16361 = t16359 + t16360;
  t16526 = -3.2*t16186*t16310;
  t16527 = -3.2*t16159*t16520;
  t16528 = t16185 + t16320;
  t16529 = -3.2*t16171*t16528;
  t16530 = -3.2*t16168*t16324;
  t16531 = -6.4*t16310*t16324;
  t16534 = Power(t16171,2);
  t16535 = -6.4*t16534;
  t16536 = -6.4*t16171*t16520;
  t16537 = -6.4*t16186*t16324;
  t16538 = Power(t16324,2);
  t16539 = -6.4*t16538;
  t16542 = -3.2*t16280*t16520;
  t16543 = -3.2*t16276*t16324;
  t16371 = t16370*t10982;
  t16374 = t14307*t16373;
  t16375 = t16371 + t16339 + t16340 + t16374;
  t16547 = -1.*t14307*t16274;
  t16553 = -1.*t16270*t16308;
  t16377 = -1.*t9557*t16370;
  t16378 = -1.*t10982*t16373;
  t16379 = t16377 + t16346 + t16378 + t16348;
  t16558 = t9557*t16270;
  t16581 = -0.24*t8025*t3242;
  t16582 = t16581 + t16549;
  t16562 = t16274*t16308;
  t16476 = -13.6*t16139*t16147;
  t16477 = -13.6*t16154*t16147;
  t16610 = -3.2*t16171*t16168;
  t16611 = -3.2*t16159*t16186;
  t16612 = -3.2*t16171*t16310;
  t16613 = -3.2*t16159*t16324;
  t16614 = t16486 + t16487 + t16488 + t16489 + t16610 + t16611 + t16612 + t16613;
  t16616 = -3.2*t16171*t16276;
  t16617 = -3.2*t16171*t16342;
  t16618 = -3.2*t16280*t16324;
  t16619 = -3.2*t16186*t16349;
  t16620 = t16505 + t16616 + t16617 + t16618 + t16619;
  t16602 = -3.2*t14255*t16171;
  t16603 = -3.2*t14218*t16324;
  t16604 = t16465 + t16602 + t16603;
  t16358 = -3.2*t16357*t16168;
  t16362 = -3.2*t16361*t16159;
  t16363 = t16358 + t16312 + t16362 + t16313;
  t16364 = -0.5*var2[3]*t16363;
  t16365 = t16316 + t16317 + t16318 + t16319 + t16322 + t16325;
  t16366 = -0.5*var2[1]*t16365;
  t16367 = t16328 + t16329 + t16330 + t16331;
  t16368 = -0.5*var2[0]*t16367;
  t16376 = -3.2*t16159*t16375;
  t16380 = -3.2*t16168*t16379;
  t16381 = t16334 + t16376 + t16344 + t16380;
  t16382 = -0.5*var2[2]*t16381;
  t16383 = t16311 + t16364 + t16366 + t16368 + t16382;
  t16384 = var2[0]*t16383;
  t16569 = -3.2*t16357*t16171;
  t16570 = -3.2*t16361*t16324;
  t16571 = t16569 + t16522 + t16523 + t16570;
  t16572 = -0.5*var2[3]*t16571;
  t16573 = t16478 + t16526 + t16527 + t16529 + t16530 + t16531;
  t16574 = -0.5*var2[1]*t16573;
  t16575 = t16535 + t16536 + t16537 + t16539;
  t16576 = -0.5*var2[0]*t16575;
  t16577 = -3.2*t16342*t16324;
  t16578 = -3.2*t16375*t16324;
  t16579 = -1.*t16370*t10982;
  t16580 = -1.*t9557*t16373;
  t16583 = -1.*t9557*t16582;
  t16584 = -1.*t16337*t16308;
  t16585 = -1.*t16370*t16308;
  t16586 = t16579 + t16275 + t16547 + t16580 + t16583 + t16584 + t16585 + t16553;
  t16587 = -3.2*t16186*t16586;
  t16588 = -3.2*t16171*t16349;
  t16589 = -3.2*t16171*t16379;
  t16590 = t9557*t16337;
  t16591 = t9557*t16370;
  t16592 = t16370*t14307;
  t16593 = t10982*t16373;
  t16594 = t10982*t16582;
  t16595 = t16590 + t16591 + t16558 + t16592 + t16279 + t16593 + t16594 + t16562;
  t16596 = -3.2*t16171*t16595;
  t16597 = t16542 + t16543 + t16577 + t16578 + t16587 + t16588 + t16589 + t16596;
  t16598 = -0.5*var2[2]*t16597;
  t16599 = t16521 + t16572 + t16574 + t16576 + t16598;
  t16600 = var2[0]*t16599;
  t16601 = 0.384*var2[4]*t16324;
  t16606 = -6.4*t16171*t16186;
  t16607 = -6.4*t16171*t16324;
  t16656 = t16610 + t16611 + t16612 + t16613;
  t16658 = -3.2*t16171*t16375;
  t16659 = -3.2*t16186*t16379;
  t16660 = t16616 + t16658 + t16618 + t16659;
  t16650 = -3.2*t16361*t16171;
  t16651 = -3.2*t16357*t16186;
  t16652 = t16602 + t16650 + t16651 + t16603;
  t16626 = 0.384*var2[0]*t16324;
  t16393 = t16054 + t16391 + t16392;
  t16394 = -0.5*var2[5]*t16393;
  t16405 = t16194 + t16201 + t16208 + t16209 + t16395 + t16396 + t16397 + t16398 + t16401 + t16404;
  t16406 = -0.5*var2[1]*t16405;
  t16411 = t16246 + t16247 + t16249 + t16250 + t16407 + t16408 + t16409 + t16410;
  t16412 = -0.5*var2[0]*t16411;
  t16417 = t16416*t15939;
  t16420 = t16096*t16294;
  t16421 = t16417 + t16418 + t16419 + t16420;
  t16422 = -3.2*t16211*t16421;
  t16424 = -1.*t15797*t16416;
  t16426 = -1.*t15939*t16294;
  t16428 = t16424 + t16425 + t16426 + t16427;
  t16429 = -3.2*t16215*t16428;
  t16430 = t16287 + t16413 + t16422 + t16423 + t16429;
  t16431 = -0.5*var2[2]*t16430;
  t16432 = t16390 + t16394 + t16406 + t16412 + t16431;
  t16433 = var2[0]*t16432;
  t16223 = t255*t16096;
  t16666 = t16223 + t16388;
  t16482 = -6.4*t16218*t16211;
  t16694 = -1.*t15746*t16080;
  t16695 = 0.24*t14525*t15760;
  t16696 = t16694 + t16695;
  t16667 = 0.384*var2[6]*t16666;
  t16434 = Power(t14470,2);
  t16435 = -0.24*t16434;
  t16436 = t16081 + t16435;
  t16668 = -3.2*t16084*t16666;
  t16669 = -3.2*t16093*t16403;
  t16438 = -1.*t16080*t15760;
  t16439 = 0.24*t14470*t15760;
  t16440 = t16438 + t16439;
  t16672 = -3.2*t16226*t16389;
  t16673 = -3.2*t16211*t16666;
  t16674 = t16225 + t16399;
  t16675 = -3.2*t16218*t16674;
  t16676 = -3.2*t16215*t16403;
  t16677 = -6.4*t16389*t16403;
  t16680 = Power(t16218,2);
  t16681 = -6.4*t16680;
  t16682 = -6.4*t16218*t16666;
  t16683 = -6.4*t16226*t16403;
  t16684 = Power(t16403,2);
  t16685 = -6.4*t16684;
  t16688 = -3.2*t16300*t16666;
  t16689 = -3.2*t16296*t16403;
  t16450 = t16449*t15939;
  t16453 = t16096*t16452;
  t16454 = t16450 + t16418 + t16419 + t16453;
  t16693 = -1.*t16096*t16294;
  t16699 = -1.*t16290*t16387;
  t16456 = -1.*t15797*t16449;
  t16457 = -1.*t15939*t16452;
  t16458 = t16456 + t16425 + t16457 + t16427;
  t16704 = t15797*t16290;
  t16727 = -0.24*t15746*t14470;
  t16728 = t16727 + t16695;
  t16708 = t16294*t16387;
  t16480 = -13.6*t16190*t16193;
  t16481 = -13.6*t16197*t16193;
  t16756 = -3.2*t16218*t16215;
  t16757 = -3.2*t16211*t16226;
  t16758 = -3.2*t16218*t16389;
  t16759 = -3.2*t16211*t16403;
  t16760 = t16494 + t16495 + t16496 + t16497 + t16756 + t16757 + t16758 + t16759;
  t16762 = -3.2*t16218*t16296;
  t16763 = -3.2*t16218*t16421;
  t16764 = -3.2*t16300*t16403;
  t16765 = -3.2*t16226*t16428;
  t16766 = t16508 + t16762 + t16763 + t16764 + t16765;
  t16748 = -3.2*t16093*t16218;
  t16749 = -3.2*t16084*t16403;
  t16750 = t16471 + t16748 + t16749;
  t16437 = -3.2*t16436*t16215;
  t16441 = -3.2*t16440*t16211;
  t16442 = t16437 + t16391 + t16441 + t16392;
  t16443 = -0.5*var2[5]*t16442;
  t16444 = t16395 + t16396 + t16397 + t16398 + t16401 + t16404;
  t16445 = -0.5*var2[1]*t16444;
  t16446 = t16407 + t16408 + t16409 + t16410;
  t16447 = -0.5*var2[0]*t16446;
  t16455 = -3.2*t16211*t16454;
  t16459 = -3.2*t16215*t16458;
  t16460 = t16413 + t16455 + t16423 + t16459;
  t16461 = -0.5*var2[2]*t16460;
  t16462 = t16390 + t16443 + t16445 + t16447 + t16461;
  t16463 = var2[0]*t16462;
  t16715 = -3.2*t16436*t16218;
  t16716 = -3.2*t16440*t16403;
  t16717 = t16715 + t16668 + t16669 + t16716;
  t16718 = -0.5*var2[5]*t16717;
  t16719 = t16482 + t16672 + t16673 + t16675 + t16676 + t16677;
  t16720 = -0.5*var2[1]*t16719;
  t16721 = t16681 + t16682 + t16683 + t16685;
  t16722 = -0.5*var2[0]*t16721;
  t16723 = -3.2*t16421*t16403;
  t16724 = -3.2*t16454*t16403;
  t16725 = -1.*t16449*t15939;
  t16726 = -1.*t15797*t16452;
  t16729 = -1.*t15797*t16728;
  t16730 = -1.*t16416*t16387;
  t16731 = -1.*t16449*t16387;
  t16732 = t16725 + t16295 + t16693 + t16726 + t16729 + t16730 + t16731 + t16699;
  t16733 = -3.2*t16226*t16732;
  t16734 = -3.2*t16218*t16428;
  t16735 = -3.2*t16218*t16458;
  t16736 = t15797*t16416;
  t16737 = t15797*t16449;
  t16738 = t16449*t16096;
  t16739 = t15939*t16452;
  t16740 = t15939*t16728;
  t16741 = t16736 + t16737 + t16704 + t16738 + t16299 + t16739 + t16740 + t16708;
  t16742 = -3.2*t16218*t16741;
  t16743 = t16688 + t16689 + t16723 + t16724 + t16733 + t16734 + t16735 + t16742;
  t16744 = -0.5*var2[2]*t16743;
  t16745 = t16667 + t16718 + t16720 + t16722 + t16744;
  t16746 = var2[0]*t16745;
  t16747 = 0.384*var2[6]*t16403;
  t16752 = -6.4*t16218*t16226;
  t16753 = -6.4*t16218*t16403;
  t16802 = t16756 + t16757 + t16758 + t16759;
  t16804 = -3.2*t16218*t16454;
  t16805 = -3.2*t16226*t16458;
  t16806 = t16762 + t16804 + t16764 + t16805;
  t16796 = -3.2*t16440*t16218;
  t16797 = -3.2*t16436*t16226;
  t16798 = t16748 + t16796 + t16797 + t16749;
  t16772 = 0.384*var2[0]*t16403;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t11527*t16171 - 6.4*t14365*t16186 - 6.4*t16028*t16218 - 6.4*t16104*t16226 + t16231 + t16232 + t16234 + t16235 - 6.4*t16240 - 6.4*t16242 + t16246 + t16247 + t16249 + t16250 - 6.4*t16254 - 6.4*t16256)*var2[0] - 0.5*(t16149 + t16155 + t16156 + t16157 - 9.6*t11527*t16159 - 9.6*t14365*t16168 - 3.2*t16171*(t16172 + t16173) - 3.2*(t11183 + t16176)*t16186 + t16194 + t16201 + t16208 + t16209 - 9.6*t16028*t16211 - 9.6*t16104*t16215 - 3.2*t16218*(t16219 + t16220) - 3.2*(t15958 + t16223)*t16226)*var2[1] - 0.5*(t16267 - 3.2*t14365*t16276 - 3.2*t11527*t16280 + t16287 - 3.2*t16104*t16296 - 3.2*t16028*t16300 + 2.88*t9640)*var2[2] - 0.5*(t13733 - 3.2*t11527*t14218 - 3.2*t14255*t14365)*var2[3] + 0.384*t11527*var2[4] - 0.5*(t16054 - 3.2*t16028*t16084 - 3.2*t16093*t16104)*var2[5] + 0.384*t16028*var2[6]);
  p_output1[1]=t16354;
  p_output1[2]=t16384;
  p_output1[3]=t16433;
  p_output1[4]=t16463;
  p_output1[5]=-1.*(-6.4*t16168*t16186 - 6.4*t16215*t16226 + t16476 + t16477 + t16478 + t16480 + t16481 + t16482)*var2[0] - 0.5*t16502*var2[1] - 0.5*t16511*var2[2] - 0.5*t16468*var2[3] + 0.384*t16159*var2[4] - 0.5*t16474*var2[5] + 0.384*t16211*var2[6];
  p_output1[6]=-0.5*t16502*var2[0];
  p_output1[7]=-0.5*t16511*var2[0];
  p_output1[8]=-0.5*t16468*var2[0];
  p_output1[9]=0.384*t16159*var2[0];
  p_output1[10]=-0.5*t16474*var2[0];
  p_output1[11]=0.384*t16211*var2[0];
  p_output1[12]=t16354;
  p_output1[13]=var2[0]*(t16521 - 0.5*(t16231 + t16232 + t16234 + t16235 + t16535 + t16536 + t16537 + t16539)*var2[0] - 0.5*(t16149 + t16155 + t16156 + t16157 + t16478 + t16526 + t16527 + t16529 + t16530 + t16531)*var2[1] - 0.5*(t16267 - 6.4*t16324*t16342 - 6.4*t16171*t16349 + t16542 + t16543 - 3.2*t16171*(2.*t10982*t16274 + t14307*t16337 + t10982*t16550 + t16558 + t16562 + 2.*t16337*t9557) - 3.2*t16186*(-1.*t10982*t16337 - 2.*t16308*t16337 + t16547 + t16553 - 2.*t16274*t9557 - 1.*t16550*t9557))*var2[2] - 0.5*(t13733 + t16522 + t16523)*var2[3]);
  p_output1[14]=t16600;
  p_output1[15]=t16601 - 1.*(t16476 + t16477 + t16606 + t16607)*var2[0] - 0.5*t16614*var2[1] - 0.5*t16620*var2[2] - 0.5*t16604*var2[3];
  p_output1[16]=-0.5*t16614*var2[0];
  p_output1[17]=-0.5*t16620*var2[0];
  p_output1[18]=-0.5*t16604*var2[0];
  p_output1[19]=t16626;
  p_output1[20]=t16384;
  p_output1[21]=t16600;
  p_output1[22]=var2[0]*(t16521 + t16574 + t16576 - 0.5*(-6.4*t16324*t16375 - 6.4*t16171*t16379 + t16542 + t16543 - 3.2*t16171*(2.*t10982*t16373 + t16558 + t16562 + t16592 + t16594 + 2.*t16370*t9557) - 3.2*t16186*(-2.*t16308*t16370 + t16547 + t16553 + t16579 + t16583 - 2.*t16373*t9557))*var2[2] - 0.5*(-6.4*t16171*t16357 - 3.2*t16186*t16361 - 6.4*t16324*t16361 + t16522 + t16523 - 3.2*t16171*(0.24*t16355 - 1.*t13939*t3242))*var2[3]);
  p_output1[23]=t16601 - 1.*(t16606 + t16607)*var2[0] - 0.5*t16656*var2[1] - 0.5*t16660*var2[2] - 0.5*t16652*var2[3];
  p_output1[24]=-0.5*t16656*var2[0];
  p_output1[25]=-0.5*t16660*var2[0];
  p_output1[26]=-0.5*t16652*var2[0];
  p_output1[27]=t16626;
  p_output1[28]=t16433;
  p_output1[29]=var2[0]*(t16667 - 0.5*(t16246 + t16247 + t16249 + t16250 + t16681 + t16682 + t16683 + t16685)*var2[0] - 0.5*(t16194 + t16201 + t16208 + t16209 + t16482 + t16672 + t16673 + t16675 + t16676 + t16677)*var2[1] - 0.5*(t16287 - 6.4*t16403*t16421 - 6.4*t16218*t16428 + t16688 + t16689 - 3.2*t16226*(-2.*t15797*t16294 - 1.*t15939*t16416 - 2.*t16387*t16416 + t16693 - 1.*t15797*t16696 + t16699) - 3.2*t16218*(2.*t15939*t16294 + 2.*t15797*t16416 + t16096*t16416 + t15939*t16696 + t16704 + t16708))*var2[2] - 0.5*(t16054 + t16668 + t16669)*var2[5]);
  p_output1[30]=t16746;
  p_output1[31]=t16747 - 1.*(t16480 + t16481 + t16752 + t16753)*var2[0] - 0.5*t16760*var2[1] - 0.5*t16766*var2[2] - 0.5*t16750*var2[5];
  p_output1[32]=-0.5*t16760*var2[0];
  p_output1[33]=-0.5*t16766*var2[0];
  p_output1[34]=-0.5*t16750*var2[0];
  p_output1[35]=t16772;
  p_output1[36]=t16463;
  p_output1[37]=t16746;
  p_output1[38]=var2[0]*(t16667 + t16720 + t16722 - 0.5*(-6.4*t16403*t16454 - 6.4*t16218*t16458 + t16688 + t16689 - 3.2*t16226*(-2.*t16387*t16449 - 2.*t15797*t16452 + t16693 + t16699 + t16725 + t16729) - 3.2*t16218*(2.*t15797*t16449 + 2.*t15939*t16452 + t16704 + t16708 + t16738 + t16740))*var2[2] - 0.5*(-3.2*t16218*(-1.*t14470*t16080 + 0.24*t16434) - 6.4*t16218*t16436 - 3.2*t16226*t16440 - 6.4*t16403*t16440 + t16668 + t16669)*var2[5]);
  p_output1[39]=t16747 - 1.*(t16752 + t16753)*var2[0] - 0.5*t16802*var2[1] - 0.5*t16806*var2[2] - 0.5*t16798*var2[5];
  p_output1[40]=-0.5*t16802*var2[0];
  p_output1[41]=-0.5*t16806*var2[0];
  p_output1[42]=-0.5*t16798*var2[0];
  p_output1[43]=t16772;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace DoubleSupportConstHeight
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
