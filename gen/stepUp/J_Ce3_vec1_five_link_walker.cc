/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:21:03 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4326;
  double t2928;
  double t3191;
  double t4331;
  double t4423;
  double t2832;
  double t4249;
  double t4381;
  double t4415;
  double t4422;
  double t4429;
  double t4446;
  double t4454;
  double t4456;
  double t4488;
  double t4587;
  double t4679;
  double t4689;
  double t4713;
  double t4714;
  double t6507;
  double t6459;
  double t6460;
  double t6518;
  double t6506;
  double t6572;
  double t6573;
  double t6574;
  double t6583;
  double t6595;
  double t6596;
  double t6597;
  double t6601;
  double t6625;
  double t6626;
  double t6632;
  double t6633;
  double t6634;
  double t6697;
  double t6698;
  double t6699;
  double t6694;
  double t6695;
  double t6696;
  double t4526;
  double t4528;
  double t4548;
  double t6701;
  double t6702;
  double t6708;
  double t6454;
  double t4781;
  double t4784;
  double t4785;
  double t4825;
  double t6455;
  double t6716;
  double t6729;
  double t6743;
  double t6750;
  double t6751;
  double t6737;
  double t6738;
  double t6739;
  double t6621;
  double t6622;
  double t6623;
  double t6753;
  double t6754;
  double t6755;
  double t6681;
  double t6654;
  double t6673;
  double t6674;
  double t6675;
  double t6687;
  double t6763;
  double t6769;
  double t6719;
  double t6727;
  double t6715;
  double t6717;
  double t6712;
  double t6713;
  double t6734;
  double t6735;
  double t6766;
  double t6767;
  double t6762;
  double t6764;
  double t6759;
  double t6760;
  double t6774;
  double t6775;
  double t6817;
  double t6818;
  double t6819;
  double t6821;
  double t6822;
  double t6823;
  double t6837;
  double t6838;
  double t6839;
  double t6841;
  double t6842;
  double t6843;
  double t4586;
  double t4758;
  double t4763;
  double t4769;
  double t4715;
  double t4716;
  double t4743;
  double t4754;
  double t6855;
  double t6856;
  double t6857;
  double t6858;
  double t6859;
  double t6700;
  double t6709;
  double t6710;
  double t6711;
  double t6728;
  double t6782;
  double t6783;
  double t6784;
  double t6785;
  double t6786;
  double t6787;
  double t6872;
  double t6873;
  double t6811;
  double t6812;
  double t6813;
  double t6814;
  double t6815;
  double t6816;
  double t6820;
  double t6824;
  double t6825;
  double t6827;
  double t6828;
  double t6829;
  double t6884;
  double t6885;
  double t6886;
  double t6860;
  double t6861;
  double t6862;
  double t6865;
  double t6866;
  double t6867;
  double t6868;
  double t6869;
  double t6870;
  double t6871;
  double t6874;
  double t6877;
  double t6878;
  double t6879;
  double t6880;
  double t6883;
  double t6888;
  double t6889;
  double t6893;
  double t6918;
  double t6919;
  double t6895;
  double t6921;
  double t6922;
  double t6897;
  double t6624;
  double t6645;
  double t6646;
  double t6647;
  double t6635;
  double t6636;
  double t6637;
  double t6638;
  double t6934;
  double t6935;
  double t6936;
  double t6937;
  double t6938;
  double t6752;
  double t6756;
  double t6757;
  double t6758;
  double t6768;
  double t6796;
  double t6797;
  double t6798;
  double t6799;
  double t6800;
  double t6801;
  double t6951;
  double t6952;
  double t6831;
  double t6832;
  double t6833;
  double t6834;
  double t6835;
  double t6836;
  double t6840;
  double t6844;
  double t6845;
  double t6847;
  double t6848;
  double t6849;
  double t6963;
  double t6964;
  double t6965;
  double t6939;
  double t6940;
  double t6941;
  double t6944;
  double t6945;
  double t6946;
  double t6947;
  double t6948;
  double t6949;
  double t6950;
  double t6953;
  double t6956;
  double t6957;
  double t6958;
  double t6959;
  double t6962;
  double t6967;
  double t6968;
  double t6972;
  double t6997;
  double t6998;
  double t6974;
  double t7000;
  double t7001;
  double t6976;
  double t6789;
  double t6791;
  double t6803;
  double t6805;
  double t7035;
  double t7036;
  double t7037;
  double t7038;
  double t7039;
  double t7040;
  double t7041;
  double t7042;
  double t7043;
  double t7044;
  double t7045;
  double t7046;
  double t7047;
  double t7048;
  double t7049;
  double t7050;
  double t7051;
  double t7053;
  double t7054;
  double t7055;
  double t7056;
  double t7057;
  double t7058;
  double t7059;
  double t7060;
  double t7014;
  double t7015;
  double t7016;
  double t7017;
  double t7020;
  double t7021;
  double t7022;
  double t7023;
  double t6863;
  double t6864;
  double t6875;
  double t6876;
  double t6881;
  double t6882;
  double t6887;
  double t6890;
  double t6891;
  double t6892;
  double t6894;
  double t6896;
  double t6898;
  double t6899;
  double t6900;
  double t6901;
  double t6902;
  double t6903;
  double t6732;
  double t7069;
  double t7027;
  double t7097;
  double t7098;
  double t7099;
  double t7070;
  double t6904;
  double t6905;
  double t6906;
  double t7071;
  double t7072;
  double t6908;
  double t6909;
  double t6910;
  double t7075;
  double t7076;
  double t7077;
  double t7078;
  double t7079;
  double t7080;
  double t7083;
  double t7084;
  double t7085;
  double t7086;
  double t7087;
  double t7088;
  double t7091;
  double t7092;
  double t6920;
  double t6923;
  double t6924;
  double t7096;
  double t7102;
  double t6926;
  double t6927;
  double t6928;
  double t7107;
  double t7130;
  double t7131;
  double t7111;
  double t7025;
  double t7026;
  double t7159;
  double t7160;
  double t7161;
  double t7162;
  double t7163;
  double t7165;
  double t7166;
  double t7167;
  double t7168;
  double t7169;
  double t7151;
  double t7152;
  double t7153;
  double t6907;
  double t6911;
  double t6912;
  double t6913;
  double t6914;
  double t6915;
  double t6916;
  double t6917;
  double t6925;
  double t6929;
  double t6930;
  double t6931;
  double t6932;
  double t6933;
  double t7118;
  double t7119;
  double t7120;
  double t7121;
  double t7122;
  double t7123;
  double t7124;
  double t7125;
  double t7126;
  double t7127;
  double t7128;
  double t7129;
  double t7132;
  double t7133;
  double t7134;
  double t7135;
  double t7136;
  double t7137;
  double t7138;
  double t7139;
  double t7140;
  double t7141;
  double t7142;
  double t7143;
  double t7144;
  double t7145;
  double t7146;
  double t7147;
  double t7148;
  double t7149;
  double t7150;
  double t7155;
  double t7156;
  double t7205;
  double t7207;
  double t7208;
  double t7209;
  double t7199;
  double t7200;
  double t7201;
  double t7175;
  double t6942;
  double t6943;
  double t6954;
  double t6955;
  double t6960;
  double t6961;
  double t6966;
  double t6969;
  double t6970;
  double t6971;
  double t6973;
  double t6975;
  double t6977;
  double t6978;
  double t6979;
  double t6980;
  double t6981;
  double t6982;
  double t6772;
  double t7215;
  double t7031;
  double t7243;
  double t7244;
  double t7245;
  double t7216;
  double t6983;
  double t6984;
  double t6985;
  double t7217;
  double t7218;
  double t6987;
  double t6988;
  double t6989;
  double t7221;
  double t7222;
  double t7223;
  double t7224;
  double t7225;
  double t7226;
  double t7229;
  double t7230;
  double t7231;
  double t7232;
  double t7233;
  double t7234;
  double t7237;
  double t7238;
  double t6999;
  double t7002;
  double t7003;
  double t7242;
  double t7248;
  double t7005;
  double t7006;
  double t7007;
  double t7253;
  double t7276;
  double t7277;
  double t7257;
  double t7029;
  double t7030;
  double t7305;
  double t7306;
  double t7307;
  double t7308;
  double t7309;
  double t7311;
  double t7312;
  double t7313;
  double t7314;
  double t7315;
  double t7297;
  double t7298;
  double t7299;
  double t6986;
  double t6990;
  double t6991;
  double t6992;
  double t6993;
  double t6994;
  double t6995;
  double t6996;
  double t7004;
  double t7008;
  double t7009;
  double t7010;
  double t7011;
  double t7012;
  double t7264;
  double t7265;
  double t7266;
  double t7267;
  double t7268;
  double t7269;
  double t7270;
  double t7271;
  double t7272;
  double t7273;
  double t7274;
  double t7275;
  double t7278;
  double t7279;
  double t7280;
  double t7281;
  double t7282;
  double t7283;
  double t7284;
  double t7285;
  double t7286;
  double t7287;
  double t7288;
  double t7289;
  double t7290;
  double t7291;
  double t7292;
  double t7293;
  double t7294;
  double t7295;
  double t7296;
  double t7301;
  double t7302;
  double t7351;
  double t7353;
  double t7354;
  double t7355;
  double t7345;
  double t7346;
  double t7347;
  double t7321;
  t4326 = Cos(var1[3]);
  t2928 = Cos(var1[4]);
  t3191 = Sin(var1[3]);
  t4331 = Sin(var1[4]);
  t4423 = Cos(var1[2]);
  t2832 = Sin(var1[2]);
  t4249 = -1.*t2928*t3191;
  t4381 = -1.*t4326*t4331;
  t4415 = t4249 + t4381;
  t4422 = -1.*t2832*t4415;
  t4429 = t4326*t2928;
  t4446 = -1.*t3191*t4331;
  t4454 = t4429 + t4446;
  t4456 = -1.*t4423*t4454;
  t4488 = t4422 + t4456;
  t4587 = -1.*t2928;
  t4679 = 1. + t4587;
  t4689 = 0.4*t4679;
  t4713 = 0.64*t2928;
  t4714 = t4689 + t4713;
  t6507 = Cos(var1[5]);
  t6459 = Cos(var1[6]);
  t6460 = Sin(var1[5]);
  t6518 = Sin(var1[6]);
  t6506 = -1.*t6459*t6460;
  t6572 = -1.*t6507*t6518;
  t6573 = t6506 + t6572;
  t6574 = -1.*t2832*t6573;
  t6583 = t6507*t6459;
  t6595 = -1.*t6460*t6518;
  t6596 = t6583 + t6595;
  t6597 = -1.*t4423*t6596;
  t6601 = t6574 + t6597;
  t6625 = -1.*t6459;
  t6626 = 1. + t6625;
  t6632 = 0.4*t6626;
  t6633 = 0.64*t6459;
  t6634 = t6632 + t6633;
  t6697 = t4423*t4326;
  t6698 = -1.*t2832*t3191;
  t6699 = t6697 + t6698;
  t6694 = -1.*t4326*t2832;
  t6695 = -1.*t4423*t3191;
  t6696 = t6694 + t6695;
  t4526 = -1.*t4423*t4326;
  t4528 = t2832*t3191;
  t4548 = t4526 + t4528;
  t6701 = t4326*t2832;
  t6702 = t4423*t3191;
  t6708 = t6701 + t6702;
  t6454 = -1.*t2832*t4454;
  t4781 = t2928*t3191;
  t4784 = t4326*t4331;
  t4785 = t4781 + t4784;
  t4825 = -1.*t4423*t4785;
  t6455 = t4825 + t6454;
  t6716 = t4423*t4454;
  t6729 = t2832*t4454;
  t6743 = t4423*t6507;
  t6750 = -1.*t2832*t6460;
  t6751 = t6743 + t6750;
  t6737 = -1.*t6507*t2832;
  t6738 = -1.*t4423*t6460;
  t6739 = t6737 + t6738;
  t6621 = -1.*t4423*t6507;
  t6622 = t2832*t6460;
  t6623 = t6621 + t6622;
  t6753 = t6507*t2832;
  t6754 = t4423*t6460;
  t6755 = t6753 + t6754;
  t6681 = -1.*t2832*t6596;
  t6654 = t6459*t6460;
  t6673 = t6507*t6518;
  t6674 = t6654 + t6673;
  t6675 = -1.*t4423*t6674;
  t6687 = t6675 + t6681;
  t6763 = t4423*t6596;
  t6769 = t2832*t6596;
  t6719 = t2832*t4415;
  t6727 = t6719 + t6716;
  t6715 = -1.*t2832*t4785;
  t6717 = t6715 + t6716;
  t6712 = t4423*t4415;
  t6713 = t6712 + t6454;
  t6734 = t4423*t4785;
  t6735 = t6734 + t6729;
  t6766 = t2832*t6573;
  t6767 = t6766 + t6763;
  t6762 = -1.*t2832*t6674;
  t6764 = t6762 + t6763;
  t6759 = t4423*t6573;
  t6760 = t6759 + t6681;
  t6774 = t4423*t6674;
  t6775 = t6774 + t6769;
  t6817 = t4714*t3191;
  t6818 = 0.24*t4326*t4331;
  t6819 = t6817 + t6818;
  t6821 = t4326*t4714;
  t6822 = -0.24*t3191*t4331;
  t6823 = t6821 + t6822;
  t6837 = t6634*t6460;
  t6838 = 0.24*t6507*t6518;
  t6839 = t6837 + t6838;
  t6841 = t6507*t6634;
  t6842 = -0.24*t6460*t6518;
  t6843 = t6841 + t6842;
  t4586 = -0.748*t4548;
  t4758 = t4714*t4331;
  t4763 = -0.24*t2928*t4331;
  t4769 = t4758 + t4763;
  t4715 = t4714*t2928;
  t4716 = Power(t4331,2);
  t4743 = 0.24*t4716;
  t4754 = t4715 + t4743;
  t6855 = -1.*t4326*t2928;
  t6856 = t3191*t4331;
  t6857 = t6855 + t6856;
  t6858 = t4423*t6857;
  t6859 = t4422 + t6858;
  t6700 = -20.4*t6696*t6699;
  t6709 = -6.8*t6708*t6699;
  t6710 = -20.4*t6696*t4548;
  t6711 = -6.8*t6708*t4548;
  t6728 = -1.*t4423*t4415;
  t6782 = Power(t6696,2);
  t6783 = -13.6*t6782;
  t6784 = -13.6*t6696*t6708;
  t6785 = Power(t6699,2);
  t6786 = -13.6*t6785;
  t6787 = -13.6*t6699*t4548;
  t6872 = t2832*t6857;
  t6873 = t6712 + t6872;
  t6811 = Power(t4326,2);
  t6812 = 0.11*t6811;
  t6813 = Power(t3191,2);
  t6814 = 0.11*t6813;
  t6815 = t6812 + t6814;
  t6816 = -6.8*t4548*t6815;
  t6820 = -1.*t6819*t4454;
  t6824 = -1.*t4415*t6823;
  t6825 = t6820 + t6824;
  t6827 = t6819*t4785;
  t6828 = t4454*t6823;
  t6829 = t6827 + t6828;
  t6884 = -1.*t4714*t3191;
  t6885 = -0.24*t4326*t4331;
  t6886 = t6884 + t6885;
  t6860 = 0.384*var2[4]*t6859;
  t6861 = -3.2*t4769*t6713;
  t6862 = -3.2*t4754*t6859;
  t6865 = -6.4*t6717*t6713;
  t6866 = -3.2*t6727*t6455;
  t6867 = -3.2*t4488*t6735;
  t6868 = -6.4*t6713*t6859;
  t6869 = -1.*t2832*t6857;
  t6870 = t6728 + t6869;
  t6871 = -3.2*t6727*t6870;
  t6874 = -3.2*t4488*t6873;
  t6877 = -6.4*t6727*t6717;
  t6878 = -6.4*t6713*t6735;
  t6879 = -6.4*t6727*t6859;
  t6880 = -6.4*t6713*t6873;
  t6883 = -3.2*t6713*t6825;
  t6888 = t6819*t4454;
  t6889 = t4415*t6823;
  t6893 = -3.2*t6829*t6859;
  t6918 = -0.24*t2928*t3191;
  t6919 = t6918 + t6885;
  t6895 = -1.*t4415*t6819;
  t6921 = 0.24*t4326*t2928;
  t6922 = t6921 + t6822;
  t6897 = -1.*t6823*t6857;
  t6624 = -0.748*t6623;
  t6645 = t6634*t6518;
  t6646 = -0.24*t6459*t6518;
  t6647 = t6645 + t6646;
  t6635 = t6634*t6459;
  t6636 = Power(t6518,2);
  t6637 = 0.24*t6636;
  t6638 = t6635 + t6637;
  t6934 = -1.*t6507*t6459;
  t6935 = t6460*t6518;
  t6936 = t6934 + t6935;
  t6937 = t4423*t6936;
  t6938 = t6574 + t6937;
  t6752 = -20.4*t6739*t6751;
  t6756 = -6.8*t6755*t6751;
  t6757 = -20.4*t6739*t6623;
  t6758 = -6.8*t6755*t6623;
  t6768 = -1.*t4423*t6573;
  t6796 = Power(t6739,2);
  t6797 = -13.6*t6796;
  t6798 = -13.6*t6739*t6755;
  t6799 = Power(t6751,2);
  t6800 = -13.6*t6799;
  t6801 = -13.6*t6751*t6623;
  t6951 = t2832*t6936;
  t6952 = t6759 + t6951;
  t6831 = Power(t6507,2);
  t6832 = 0.11*t6831;
  t6833 = Power(t6460,2);
  t6834 = 0.11*t6833;
  t6835 = t6832 + t6834;
  t6836 = -6.8*t6623*t6835;
  t6840 = -1.*t6839*t6596;
  t6844 = -1.*t6573*t6843;
  t6845 = t6840 + t6844;
  t6847 = t6839*t6674;
  t6848 = t6596*t6843;
  t6849 = t6847 + t6848;
  t6963 = -1.*t6634*t6460;
  t6964 = -0.24*t6507*t6518;
  t6965 = t6963 + t6964;
  t6939 = 0.384*var2[6]*t6938;
  t6940 = -3.2*t6647*t6760;
  t6941 = -3.2*t6638*t6938;
  t6944 = -6.4*t6764*t6760;
  t6945 = -3.2*t6767*t6687;
  t6946 = -3.2*t6601*t6775;
  t6947 = -6.4*t6760*t6938;
  t6948 = -1.*t2832*t6936;
  t6949 = t6768 + t6948;
  t6950 = -3.2*t6767*t6949;
  t6953 = -3.2*t6601*t6952;
  t6956 = -6.4*t6767*t6764;
  t6957 = -6.4*t6760*t6775;
  t6958 = -6.4*t6767*t6938;
  t6959 = -6.4*t6760*t6952;
  t6962 = -3.2*t6760*t6845;
  t6967 = t6839*t6596;
  t6968 = t6573*t6843;
  t6972 = -3.2*t6849*t6938;
  t6997 = -0.24*t6459*t6460;
  t6998 = t6997 + t6964;
  t6974 = -1.*t6573*t6839;
  t7000 = 0.24*t6507*t6459;
  t7001 = t7000 + t6842;
  t6976 = -1.*t6843*t6936;
  t6789 = Power(t6717,2);
  t6791 = Power(t6713,2);
  t6803 = Power(t6764,2);
  t6805 = Power(t6760,2);
  t7035 = -6.8*t6782;
  t7036 = -6.8*t6696*t6708;
  t7037 = -6.8*t6785;
  t7038 = -6.8*t6699*t4548;
  t7039 = -3.2*t4488*t6727;
  t7040 = -3.2*t6789;
  t7041 = -3.2*t6791;
  t7042 = -3.2*t6455*t6735;
  t7043 = -6.8*t6796;
  t7044 = -6.8*t6739*t6755;
  t7045 = -6.8*t6799;
  t7046 = -6.8*t6751*t6623;
  t7047 = -3.2*t6601*t6767;
  t7048 = -3.2*t6803;
  t7049 = -3.2*t6805;
  t7050 = -3.2*t6687*t6775;
  t7051 = t7035 + t7036 + t7037 + t7038 + t7039 + t7040 + t7041 + t7042 + t7043 + t7044 + t7045 + t7046 + t7047 + t7048 + t7049 + t7050;
  t7053 = 2.88*t2832;
  t7054 = -6.8*t6696*t6815;
  t7055 = -3.2*t6717*t6825;
  t7056 = -3.2*t6713*t6829;
  t7057 = -6.8*t6739*t6835;
  t7058 = -3.2*t6764*t6845;
  t7059 = -3.2*t6760*t6849;
  t7060 = t7053 + t7054 + t7055 + t7056 + t7057 + t7058 + t7059;
  t7014 = -0.748*t6696;
  t7015 = -3.2*t4769*t6717;
  t7016 = -3.2*t4754*t6713;
  t7017 = t7014 + t7015 + t7016;
  t7020 = -0.748*t6739;
  t7021 = -3.2*t6647*t6764;
  t7022 = -3.2*t6638*t6760;
  t7023 = t7020 + t7021 + t7022;
  t6863 = t4586 + t6861 + t6862;
  t6864 = -0.5*var2[3]*t6863;
  t6875 = t6700 + t6709 + t6710 + t6711 + t6865 + t6866 + t6867 + t6868 + t6871 + t6874;
  t6876 = -0.5*var2[1]*t6875;
  t6881 = t6783 + t6784 + t6786 + t6787 + t6877 + t6878 + t6879 + t6880;
  t6882 = -0.5*var2[0]*t6881;
  t6887 = t6886*t4454;
  t6890 = t4785*t6823;
  t6891 = t6887 + t6888 + t6889 + t6890;
  t6892 = -3.2*t6713*t6891;
  t6894 = -1.*t4415*t6886;
  t6896 = -1.*t4454*t6823;
  t6898 = t6894 + t6895 + t6896 + t6897;
  t6899 = -3.2*t6717*t6898;
  t6900 = t6816 + t6883 + t6892 + t6893 + t6899;
  t6901 = -0.5*var2[2]*t6900;
  t6902 = t6860 + t6864 + t6876 + t6882 + t6901;
  t6903 = var2[0]*t6902;
  t6732 = t2832*t4785;
  t7069 = t6732 + t6858;
  t7027 = -6.4*t6727*t6713;
  t7097 = -1.*t4326*t4714;
  t7098 = 0.24*t3191*t4331;
  t7099 = t7097 + t7098;
  t7070 = 0.384*var2[4]*t7069;
  t6904 = Power(t2928,2);
  t6905 = -0.24*t6904;
  t6906 = t4715 + t6905;
  t7071 = -3.2*t4754*t7069;
  t7072 = -3.2*t4769*t6873;
  t6908 = -1.*t4714*t4331;
  t6909 = 0.24*t2928*t4331;
  t6910 = t6908 + t6909;
  t7075 = -3.2*t6735*t6859;
  t7076 = -3.2*t6713*t7069;
  t7077 = t6734 + t6869;
  t7078 = -3.2*t6727*t7077;
  t7079 = -3.2*t6717*t6873;
  t7080 = -6.4*t6859*t6873;
  t7083 = Power(t6727,2);
  t7084 = -6.4*t7083;
  t7085 = -6.4*t6727*t7069;
  t7086 = -6.4*t6735*t6873;
  t7087 = Power(t6873,2);
  t7088 = -6.4*t7087;
  t7091 = -3.2*t6829*t7069;
  t7092 = -3.2*t6825*t6873;
  t6920 = t6919*t4454;
  t6923 = t4785*t6922;
  t6924 = t6920 + t6888 + t6889 + t6923;
  t7096 = -1.*t4785*t6823;
  t7102 = -1.*t6819*t6857;
  t6926 = -1.*t4415*t6919;
  t6927 = -1.*t4454*t6922;
  t6928 = t6926 + t6895 + t6927 + t6897;
  t7107 = t4415*t6819;
  t7130 = -0.24*t4326*t2928;
  t7131 = t7130 + t7098;
  t7111 = t6823*t6857;
  t7025 = -13.6*t6696*t6699;
  t7026 = -13.6*t6708*t6699;
  t7159 = -3.2*t6727*t6717;
  t7160 = -3.2*t6713*t6735;
  t7161 = -3.2*t6727*t6859;
  t7162 = -3.2*t6713*t6873;
  t7163 = t7035 + t7036 + t7037 + t7038 + t7159 + t7160 + t7161 + t7162;
  t7165 = -3.2*t6727*t6825;
  t7166 = -3.2*t6727*t6891;
  t7167 = -3.2*t6829*t6873;
  t7168 = -3.2*t6735*t6898;
  t7169 = t7054 + t7165 + t7166 + t7167 + t7168;
  t7151 = -3.2*t4769*t6727;
  t7152 = -3.2*t4754*t6873;
  t7153 = t7014 + t7151 + t7152;
  t6907 = -3.2*t6906*t6717;
  t6911 = -3.2*t6910*t6713;
  t6912 = t6907 + t6861 + t6911 + t6862;
  t6913 = -0.5*var2[3]*t6912;
  t6914 = t6865 + t6866 + t6867 + t6868 + t6871 + t6874;
  t6915 = -0.5*var2[1]*t6914;
  t6916 = t6877 + t6878 + t6879 + t6880;
  t6917 = -0.5*var2[0]*t6916;
  t6925 = -3.2*t6713*t6924;
  t6929 = -3.2*t6717*t6928;
  t6930 = t6883 + t6925 + t6893 + t6929;
  t6931 = -0.5*var2[2]*t6930;
  t6932 = t6860 + t6913 + t6915 + t6917 + t6931;
  t6933 = var2[0]*t6932;
  t7118 = -3.2*t6906*t6727;
  t7119 = -3.2*t6910*t6873;
  t7120 = t7118 + t7071 + t7072 + t7119;
  t7121 = -0.5*var2[3]*t7120;
  t7122 = t7027 + t7075 + t7076 + t7078 + t7079 + t7080;
  t7123 = -0.5*var2[1]*t7122;
  t7124 = t7084 + t7085 + t7086 + t7088;
  t7125 = -0.5*var2[0]*t7124;
  t7126 = -3.2*t6891*t6873;
  t7127 = -3.2*t6924*t6873;
  t7128 = -1.*t6919*t4454;
  t7129 = -1.*t4415*t6922;
  t7132 = -1.*t4415*t7131;
  t7133 = -1.*t6886*t6857;
  t7134 = -1.*t6919*t6857;
  t7135 = t7128 + t6824 + t7096 + t7129 + t7132 + t7133 + t7134 + t7102;
  t7136 = -3.2*t6735*t7135;
  t7137 = -3.2*t6727*t6898;
  t7138 = -3.2*t6727*t6928;
  t7139 = t4415*t6886;
  t7140 = t4415*t6919;
  t7141 = t6919*t4785;
  t7142 = t4454*t6922;
  t7143 = t4454*t7131;
  t7144 = t7139 + t7140 + t7107 + t7141 + t6828 + t7142 + t7143 + t7111;
  t7145 = -3.2*t6727*t7144;
  t7146 = t7091 + t7092 + t7126 + t7127 + t7136 + t7137 + t7138 + t7145;
  t7147 = -0.5*var2[2]*t7146;
  t7148 = t7070 + t7121 + t7123 + t7125 + t7147;
  t7149 = var2[0]*t7148;
  t7150 = 0.384*var2[4]*t6873;
  t7155 = -6.4*t6727*t6735;
  t7156 = -6.4*t6727*t6873;
  t7205 = t7159 + t7160 + t7161 + t7162;
  t7207 = -3.2*t6727*t6924;
  t7208 = -3.2*t6735*t6928;
  t7209 = t7165 + t7207 + t7167 + t7208;
  t7199 = -3.2*t6910*t6727;
  t7200 = -3.2*t6906*t6735;
  t7201 = t7151 + t7199 + t7200 + t7152;
  t7175 = 0.384*var2[0]*t6873;
  t6942 = t6624 + t6940 + t6941;
  t6943 = -0.5*var2[5]*t6942;
  t6954 = t6752 + t6756 + t6757 + t6758 + t6944 + t6945 + t6946 + t6947 + t6950 + t6953;
  t6955 = -0.5*var2[1]*t6954;
  t6960 = t6797 + t6798 + t6800 + t6801 + t6956 + t6957 + t6958 + t6959;
  t6961 = -0.5*var2[0]*t6960;
  t6966 = t6965*t6596;
  t6969 = t6674*t6843;
  t6970 = t6966 + t6967 + t6968 + t6969;
  t6971 = -3.2*t6760*t6970;
  t6973 = -1.*t6573*t6965;
  t6975 = -1.*t6596*t6843;
  t6977 = t6973 + t6974 + t6975 + t6976;
  t6978 = -3.2*t6764*t6977;
  t6979 = t6836 + t6962 + t6971 + t6972 + t6978;
  t6980 = -0.5*var2[2]*t6979;
  t6981 = t6939 + t6943 + t6955 + t6961 + t6980;
  t6982 = var2[0]*t6981;
  t6772 = t2832*t6674;
  t7215 = t6772 + t6937;
  t7031 = -6.4*t6767*t6760;
  t7243 = -1.*t6507*t6634;
  t7244 = 0.24*t6460*t6518;
  t7245 = t7243 + t7244;
  t7216 = 0.384*var2[6]*t7215;
  t6983 = Power(t6459,2);
  t6984 = -0.24*t6983;
  t6985 = t6635 + t6984;
  t7217 = -3.2*t6638*t7215;
  t7218 = -3.2*t6647*t6952;
  t6987 = -1.*t6634*t6518;
  t6988 = 0.24*t6459*t6518;
  t6989 = t6987 + t6988;
  t7221 = -3.2*t6775*t6938;
  t7222 = -3.2*t6760*t7215;
  t7223 = t6774 + t6948;
  t7224 = -3.2*t6767*t7223;
  t7225 = -3.2*t6764*t6952;
  t7226 = -6.4*t6938*t6952;
  t7229 = Power(t6767,2);
  t7230 = -6.4*t7229;
  t7231 = -6.4*t6767*t7215;
  t7232 = -6.4*t6775*t6952;
  t7233 = Power(t6952,2);
  t7234 = -6.4*t7233;
  t7237 = -3.2*t6849*t7215;
  t7238 = -3.2*t6845*t6952;
  t6999 = t6998*t6596;
  t7002 = t6674*t7001;
  t7003 = t6999 + t6967 + t6968 + t7002;
  t7242 = -1.*t6674*t6843;
  t7248 = -1.*t6839*t6936;
  t7005 = -1.*t6573*t6998;
  t7006 = -1.*t6596*t7001;
  t7007 = t7005 + t6974 + t7006 + t6976;
  t7253 = t6573*t6839;
  t7276 = -0.24*t6507*t6459;
  t7277 = t7276 + t7244;
  t7257 = t6843*t6936;
  t7029 = -13.6*t6739*t6751;
  t7030 = -13.6*t6755*t6751;
  t7305 = -3.2*t6767*t6764;
  t7306 = -3.2*t6760*t6775;
  t7307 = -3.2*t6767*t6938;
  t7308 = -3.2*t6760*t6952;
  t7309 = t7043 + t7044 + t7045 + t7046 + t7305 + t7306 + t7307 + t7308;
  t7311 = -3.2*t6767*t6845;
  t7312 = -3.2*t6767*t6970;
  t7313 = -3.2*t6849*t6952;
  t7314 = -3.2*t6775*t6977;
  t7315 = t7057 + t7311 + t7312 + t7313 + t7314;
  t7297 = -3.2*t6647*t6767;
  t7298 = -3.2*t6638*t6952;
  t7299 = t7020 + t7297 + t7298;
  t6986 = -3.2*t6985*t6764;
  t6990 = -3.2*t6989*t6760;
  t6991 = t6986 + t6940 + t6990 + t6941;
  t6992 = -0.5*var2[5]*t6991;
  t6993 = t6944 + t6945 + t6946 + t6947 + t6950 + t6953;
  t6994 = -0.5*var2[1]*t6993;
  t6995 = t6956 + t6957 + t6958 + t6959;
  t6996 = -0.5*var2[0]*t6995;
  t7004 = -3.2*t6760*t7003;
  t7008 = -3.2*t6764*t7007;
  t7009 = t6962 + t7004 + t6972 + t7008;
  t7010 = -0.5*var2[2]*t7009;
  t7011 = t6939 + t6992 + t6994 + t6996 + t7010;
  t7012 = var2[0]*t7011;
  t7264 = -3.2*t6985*t6767;
  t7265 = -3.2*t6989*t6952;
  t7266 = t7264 + t7217 + t7218 + t7265;
  t7267 = -0.5*var2[5]*t7266;
  t7268 = t7031 + t7221 + t7222 + t7224 + t7225 + t7226;
  t7269 = -0.5*var2[1]*t7268;
  t7270 = t7230 + t7231 + t7232 + t7234;
  t7271 = -0.5*var2[0]*t7270;
  t7272 = -3.2*t6970*t6952;
  t7273 = -3.2*t7003*t6952;
  t7274 = -1.*t6998*t6596;
  t7275 = -1.*t6573*t7001;
  t7278 = -1.*t6573*t7277;
  t7279 = -1.*t6965*t6936;
  t7280 = -1.*t6998*t6936;
  t7281 = t7274 + t6844 + t7242 + t7275 + t7278 + t7279 + t7280 + t7248;
  t7282 = -3.2*t6775*t7281;
  t7283 = -3.2*t6767*t6977;
  t7284 = -3.2*t6767*t7007;
  t7285 = t6573*t6965;
  t7286 = t6573*t6998;
  t7287 = t6998*t6674;
  t7288 = t6596*t7001;
  t7289 = t6596*t7277;
  t7290 = t7285 + t7286 + t7253 + t7287 + t6848 + t7288 + t7289 + t7257;
  t7291 = -3.2*t6767*t7290;
  t7292 = t7237 + t7238 + t7272 + t7273 + t7282 + t7283 + t7284 + t7291;
  t7293 = -0.5*var2[2]*t7292;
  t7294 = t7216 + t7267 + t7269 + t7271 + t7293;
  t7295 = var2[0]*t7294;
  t7296 = 0.384*var2[6]*t6952;
  t7301 = -6.4*t6767*t6775;
  t7302 = -6.4*t6767*t6952;
  t7351 = t7305 + t7306 + t7307 + t7308;
  t7353 = -3.2*t6767*t7003;
  t7354 = -3.2*t6775*t7007;
  t7355 = t7311 + t7353 + t7313 + t7354;
  t7345 = -3.2*t6989*t6767;
  t7346 = -3.2*t6985*t6775;
  t7347 = t7297 + t7345 + t7346 + t7298;
  t7321 = 0.384*var2[0]*t6952;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t4488*t6727 - 6.4*t6455*t6735 - 6.4*t6601*t6767 - 6.4*t6687*t6775 + t6783 + t6784 + t6786 + t6787 - 6.4*t6789 - 6.4*t6791 + t6797 + t6798 + t6800 + t6801 - 6.4*t6803 - 6.4*t6805)*var2[0] - 0.5*(t6700 + t6709 + t6710 + t6711 - 9.6*t4488*t6713 - 9.6*t6455*t6717 - 3.2*t6727*(t6728 + t6729) - 3.2*(t4456 + t6732)*t6735 + t6752 + t6756 + t6757 + t6758 - 9.6*t6601*t6760 - 9.6*t6687*t6764 - 3.2*t6767*(t6768 + t6769) - 3.2*(t6597 + t6772)*t6775)*var2[1] - 0.5*(2.88*t4423 + t6816 - 3.2*t6455*t6825 - 3.2*t4488*t6829 + t6836 - 3.2*t6687*t6845 - 3.2*t6601*t6849)*var2[2] - 0.5*(t4586 - 3.2*t4488*t4754 - 3.2*t4769*t6455)*var2[3] + 0.384*t4488*var2[4] - 0.5*(t6624 - 3.2*t6601*t6638 - 3.2*t6647*t6687)*var2[5] + 0.384*t6601*var2[6]);
  p_output1[1]=t6903;
  p_output1[2]=t6933;
  p_output1[3]=t6982;
  p_output1[4]=t7012;
  p_output1[5]=-1.*(-6.4*t6717*t6735 - 6.4*t6764*t6775 + t7025 + t7026 + t7027 + t7029 + t7030 + t7031)*var2[0] - 0.5*t7051*var2[1] - 0.5*t7060*var2[2] - 0.5*t7017*var2[3] + 0.384*t6713*var2[4] - 0.5*t7023*var2[5] + 0.384*t6760*var2[6];
  p_output1[6]=-0.5*t7051*var2[0];
  p_output1[7]=-0.5*t7060*var2[0];
  p_output1[8]=-0.5*t7017*var2[0];
  p_output1[9]=0.384*t6713*var2[0];
  p_output1[10]=-0.5*t7023*var2[0];
  p_output1[11]=0.384*t6760*var2[0];
  p_output1[12]=t6903;
  p_output1[13]=var2[0]*(t7070 - 0.5*(t6783 + t6784 + t6786 + t6787 + t7084 + t7085 + t7086 + t7088)*var2[0] - 0.5*(t6700 + t6709 + t6710 + t6711 + t7027 + t7075 + t7076 + t7078 + t7079 + t7080)*var2[1] - 0.5*(t6816 - 6.4*t6873*t6891 - 6.4*t6727*t6898 + t7091 + t7092 - 3.2*t6735*(-2.*t4415*t6823 - 1.*t4454*t6886 - 2.*t6857*t6886 + t7096 - 1.*t4415*t7099 + t7102) - 3.2*t6727*(2.*t4454*t6823 + 2.*t4415*t6886 + t4785*t6886 + t4454*t7099 + t7107 + t7111))*var2[2] - 0.5*(t4586 + t7071 + t7072)*var2[3]);
  p_output1[14]=t7149;
  p_output1[15]=t7150 - 1.*(t7025 + t7026 + t7155 + t7156)*var2[0] - 0.5*t7163*var2[1] - 0.5*t7169*var2[2] - 0.5*t7153*var2[3];
  p_output1[16]=-0.5*t7163*var2[0];
  p_output1[17]=-0.5*t7169*var2[0];
  p_output1[18]=-0.5*t7153*var2[0];
  p_output1[19]=t7175;
  p_output1[20]=t6933;
  p_output1[21]=t7149;
  p_output1[22]=var2[0]*(t7070 + t7123 + t7125 - 0.5*(-6.4*t6873*t6924 - 6.4*t6727*t6928 + t7091 + t7092 - 3.2*t6735*(-2.*t6857*t6919 - 2.*t4415*t6922 + t7096 + t7102 + t7128 + t7132) - 3.2*t6727*(2.*t4415*t6919 + 2.*t4454*t6922 + t7107 + t7111 + t7141 + t7143))*var2[2] - 0.5*(-3.2*t6727*(-1.*t2928*t4714 + 0.24*t6904) - 6.4*t6727*t6906 - 3.2*t6735*t6910 - 6.4*t6873*t6910 + t7071 + t7072)*var2[3]);
  p_output1[23]=t7150 - 1.*(t7155 + t7156)*var2[0] - 0.5*t7205*var2[1] - 0.5*t7209*var2[2] - 0.5*t7201*var2[3];
  p_output1[24]=-0.5*t7205*var2[0];
  p_output1[25]=-0.5*t7209*var2[0];
  p_output1[26]=-0.5*t7201*var2[0];
  p_output1[27]=t7175;
  p_output1[28]=t6982;
  p_output1[29]=var2[0]*(t7216 - 0.5*(t6797 + t6798 + t6800 + t6801 + t7230 + t7231 + t7232 + t7234)*var2[0] - 0.5*(t6752 + t6756 + t6757 + t6758 + t7031 + t7221 + t7222 + t7224 + t7225 + t7226)*var2[1] - 0.5*(t6836 - 6.4*t6952*t6970 - 6.4*t6767*t6977 + t7237 + t7238 - 3.2*t6775*(-2.*t6573*t6843 - 1.*t6596*t6965 - 2.*t6936*t6965 + t7242 - 1.*t6573*t7245 + t7248) - 3.2*t6767*(2.*t6596*t6843 + 2.*t6573*t6965 + t6674*t6965 + t6596*t7245 + t7253 + t7257))*var2[2] - 0.5*(t6624 + t7217 + t7218)*var2[5]);
  p_output1[30]=t7295;
  p_output1[31]=t7296 - 1.*(t7029 + t7030 + t7301 + t7302)*var2[0] - 0.5*t7309*var2[1] - 0.5*t7315*var2[2] - 0.5*t7299*var2[5];
  p_output1[32]=-0.5*t7309*var2[0];
  p_output1[33]=-0.5*t7315*var2[0];
  p_output1[34]=-0.5*t7299*var2[0];
  p_output1[35]=t7321;
  p_output1[36]=t7012;
  p_output1[37]=t7295;
  p_output1[38]=var2[0]*(t7216 + t7269 + t7271 - 0.5*(-6.4*t6952*t7003 - 6.4*t6767*t7007 + t7237 + t7238 - 3.2*t6775*(-2.*t6936*t6998 - 2.*t6573*t7001 + t7242 + t7248 + t7274 + t7278) - 3.2*t6767*(2.*t6573*t6998 + 2.*t6596*t7001 + t7253 + t7257 + t7287 + t7289))*var2[2] - 0.5*(-3.2*t6767*(-1.*t6459*t6634 + 0.24*t6983) - 6.4*t6767*t6985 - 3.2*t6775*t6989 - 6.4*t6952*t6989 + t7217 + t7218)*var2[5]);
  p_output1[39]=t7296 - 1.*(t7301 + t7302)*var2[0] - 0.5*t7351*var2[1] - 0.5*t7355*var2[2] - 0.5*t7347*var2[5];
  p_output1[40]=-0.5*t7351*var2[0];
  p_output1[41]=-0.5*t7355*var2[0];
  p_output1[42]=-0.5*t7347*var2[0];
  p_output1[43]=t7321;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
