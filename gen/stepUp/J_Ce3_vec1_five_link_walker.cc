/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:40:27 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3050;
  double t2649;
  double t2651;
  double t3169;
  double t6494;
  double t284;
  double t2763;
  double t6491;
  double t6492;
  double t6493;
  double t6495;
  double t6496;
  double t6497;
  double t6543;
  double t6544;
  double t6632;
  double t6633;
  double t6634;
  double t6638;
  double t6657;
  double t6712;
  double t6691;
  double t6710;
  double t6718;
  double t6711;
  double t6724;
  double t6725;
  double t6726;
  double t6728;
  double t6731;
  double t6732;
  double t6733;
  double t6734;
  double t6745;
  double t6746;
  double t6747;
  double t6748;
  double t6749;
  double t6780;
  double t6787;
  double t6788;
  double t6774;
  double t6775;
  double t6776;
  double t6609;
  double t6610;
  double t6611;
  double t6790;
  double t6791;
  double t6792;
  double t6675;
  double t6671;
  double t6672;
  double t6673;
  double t6674;
  double t6676;
  double t6800;
  double t6806;
  double t6820;
  double t6821;
  double t6822;
  double t6814;
  double t6815;
  double t6819;
  double t6736;
  double t6737;
  double t6738;
  double t6824;
  double t6825;
  double t6826;
  double t6769;
  double t6765;
  double t6766;
  double t6767;
  double t6768;
  double t6770;
  double t6836;
  double t6842;
  double t6803;
  double t6804;
  double t6799;
  double t6801;
  double t6796;
  double t6797;
  double t6811;
  double t6812;
  double t6839;
  double t6840;
  double t6835;
  double t6837;
  double t6832;
  double t6833;
  double t6847;
  double t6848;
  double t6885;
  double t6886;
  double t6887;
  double t6889;
  double t6890;
  double t6891;
  double t6905;
  double t6906;
  double t6907;
  double t6909;
  double t6910;
  double t6911;
  double t6620;
  double t6663;
  double t6669;
  double t6670;
  double t6658;
  double t6659;
  double t6660;
  double t6661;
  double t6923;
  double t6924;
  double t6925;
  double t6926;
  double t6927;
  double t6789;
  double t6793;
  double t6794;
  double t6795;
  double t6805;
  double t6852;
  double t6853;
  double t6854;
  double t6855;
  double t6856;
  double t6857;
  double t6940;
  double t6941;
  double t6879;
  double t6880;
  double t6881;
  double t6882;
  double t6883;
  double t6884;
  double t6888;
  double t6892;
  double t6893;
  double t6895;
  double t6896;
  double t6897;
  double t6952;
  double t6953;
  double t6954;
  double t6928;
  double t6929;
  double t6930;
  double t6933;
  double t6934;
  double t6935;
  double t6936;
  double t6937;
  double t6938;
  double t6939;
  double t6942;
  double t6945;
  double t6946;
  double t6947;
  double t6948;
  double t6951;
  double t6956;
  double t6957;
  double t6961;
  double t6986;
  double t6987;
  double t6963;
  double t6989;
  double t6990;
  double t6965;
  double t6739;
  double t6755;
  double t6756;
  double t6764;
  double t6750;
  double t6751;
  double t6752;
  double t6753;
  double t7002;
  double t7003;
  double t7004;
  double t7005;
  double t7006;
  double t6823;
  double t6827;
  double t6828;
  double t6829;
  double t6841;
  double t6864;
  double t6865;
  double t6866;
  double t6867;
  double t6868;
  double t6869;
  double t7019;
  double t7020;
  double t6899;
  double t6900;
  double t6901;
  double t6902;
  double t6903;
  double t6904;
  double t6908;
  double t6912;
  double t6913;
  double t6915;
  double t6916;
  double t6917;
  double t7031;
  double t7032;
  double t7033;
  double t7007;
  double t7008;
  double t7009;
  double t7012;
  double t7013;
  double t7014;
  double t7015;
  double t7016;
  double t7017;
  double t7018;
  double t7021;
  double t7024;
  double t7025;
  double t7026;
  double t7027;
  double t7030;
  double t7035;
  double t7036;
  double t7040;
  double t7065;
  double t7066;
  double t7042;
  double t7068;
  double t7069;
  double t7044;
  double t6859;
  double t6861;
  double t6871;
  double t6873;
  double t7103;
  double t7104;
  double t7105;
  double t7106;
  double t7107;
  double t7108;
  double t7109;
  double t7110;
  double t7111;
  double t7112;
  double t7113;
  double t7114;
  double t7115;
  double t7116;
  double t7117;
  double t7118;
  double t7119;
  double t7121;
  double t7122;
  double t7123;
  double t7124;
  double t7125;
  double t7126;
  double t7127;
  double t7128;
  double t7082;
  double t7083;
  double t7084;
  double t7085;
  double t7088;
  double t7089;
  double t7090;
  double t7091;
  double t6931;
  double t6932;
  double t6943;
  double t6944;
  double t6949;
  double t6950;
  double t6955;
  double t6958;
  double t6959;
  double t6960;
  double t6962;
  double t6964;
  double t6966;
  double t6967;
  double t6968;
  double t6969;
  double t6970;
  double t6971;
  double t6809;
  double t7137;
  double t7095;
  double t7165;
  double t7166;
  double t7167;
  double t7138;
  double t6972;
  double t6973;
  double t6974;
  double t7139;
  double t7140;
  double t6976;
  double t6977;
  double t6978;
  double t7143;
  double t7144;
  double t7145;
  double t7146;
  double t7147;
  double t7148;
  double t7151;
  double t7152;
  double t7153;
  double t7154;
  double t7155;
  double t7156;
  double t7159;
  double t7160;
  double t6988;
  double t6991;
  double t6992;
  double t7164;
  double t7170;
  double t6994;
  double t6995;
  double t6996;
  double t7175;
  double t7198;
  double t7199;
  double t7179;
  double t7093;
  double t7094;
  double t7227;
  double t7228;
  double t7229;
  double t7230;
  double t7231;
  double t7233;
  double t7234;
  double t7235;
  double t7236;
  double t7237;
  double t7219;
  double t7220;
  double t7221;
  double t6975;
  double t6979;
  double t6980;
  double t6981;
  double t6982;
  double t6983;
  double t6984;
  double t6985;
  double t6993;
  double t6997;
  double t6998;
  double t6999;
  double t7000;
  double t7001;
  double t7186;
  double t7187;
  double t7188;
  double t7189;
  double t7190;
  double t7191;
  double t7192;
  double t7193;
  double t7194;
  double t7195;
  double t7196;
  double t7197;
  double t7200;
  double t7201;
  double t7202;
  double t7203;
  double t7204;
  double t7205;
  double t7206;
  double t7207;
  double t7208;
  double t7209;
  double t7210;
  double t7211;
  double t7212;
  double t7213;
  double t7214;
  double t7215;
  double t7216;
  double t7217;
  double t7218;
  double t7223;
  double t7224;
  double t7273;
  double t7275;
  double t7276;
  double t7277;
  double t7267;
  double t7268;
  double t7269;
  double t7243;
  double t7010;
  double t7011;
  double t7022;
  double t7023;
  double t7028;
  double t7029;
  double t7034;
  double t7037;
  double t7038;
  double t7039;
  double t7041;
  double t7043;
  double t7045;
  double t7046;
  double t7047;
  double t7048;
  double t7049;
  double t7050;
  double t6845;
  double t7283;
  double t7099;
  double t7311;
  double t7312;
  double t7313;
  double t7284;
  double t7051;
  double t7052;
  double t7053;
  double t7285;
  double t7286;
  double t7055;
  double t7056;
  double t7057;
  double t7289;
  double t7290;
  double t7291;
  double t7292;
  double t7293;
  double t7294;
  double t7297;
  double t7298;
  double t7299;
  double t7300;
  double t7301;
  double t7302;
  double t7305;
  double t7306;
  double t7067;
  double t7070;
  double t7071;
  double t7310;
  double t7316;
  double t7073;
  double t7074;
  double t7075;
  double t7321;
  double t7344;
  double t7345;
  double t7325;
  double t7097;
  double t7098;
  double t7373;
  double t7374;
  double t7375;
  double t7376;
  double t7377;
  double t7379;
  double t7380;
  double t7381;
  double t7382;
  double t7383;
  double t7365;
  double t7366;
  double t7367;
  double t7054;
  double t7058;
  double t7059;
  double t7060;
  double t7061;
  double t7062;
  double t7063;
  double t7064;
  double t7072;
  double t7076;
  double t7077;
  double t7078;
  double t7079;
  double t7080;
  double t7332;
  double t7333;
  double t7334;
  double t7335;
  double t7336;
  double t7337;
  double t7338;
  double t7339;
  double t7340;
  double t7341;
  double t7342;
  double t7343;
  double t7346;
  double t7347;
  double t7348;
  double t7349;
  double t7350;
  double t7351;
  double t7352;
  double t7353;
  double t7354;
  double t7355;
  double t7356;
  double t7357;
  double t7358;
  double t7359;
  double t7360;
  double t7361;
  double t7362;
  double t7363;
  double t7364;
  double t7369;
  double t7370;
  double t7419;
  double t7421;
  double t7422;
  double t7423;
  double t7413;
  double t7414;
  double t7415;
  double t7389;
  t3050 = Cos(var1[3]);
  t2649 = Cos(var1[4]);
  t2651 = Sin(var1[3]);
  t3169 = Sin(var1[4]);
  t6494 = Cos(var1[2]);
  t284 = Sin(var1[2]);
  t2763 = -1.*t2649*t2651;
  t6491 = -1.*t3050*t3169;
  t6492 = t2763 + t6491;
  t6493 = -1.*t284*t6492;
  t6495 = t3050*t2649;
  t6496 = -1.*t2651*t3169;
  t6497 = t6495 + t6496;
  t6543 = -1.*t6494*t6497;
  t6544 = t6493 + t6543;
  t6632 = -1.*t2649;
  t6633 = 1. + t6632;
  t6634 = 0.4*t6633;
  t6638 = 0.64*t2649;
  t6657 = t6634 + t6638;
  t6712 = Cos(var1[5]);
  t6691 = Cos(var1[6]);
  t6710 = Sin(var1[5]);
  t6718 = Sin(var1[6]);
  t6711 = -1.*t6691*t6710;
  t6724 = -1.*t6712*t6718;
  t6725 = t6711 + t6724;
  t6726 = -1.*t284*t6725;
  t6728 = t6712*t6691;
  t6731 = -1.*t6710*t6718;
  t6732 = t6728 + t6731;
  t6733 = -1.*t6494*t6732;
  t6734 = t6726 + t6733;
  t6745 = -1.*t6691;
  t6746 = 1. + t6745;
  t6747 = 0.4*t6746;
  t6748 = 0.64*t6691;
  t6749 = t6747 + t6748;
  t6780 = t6494*t3050;
  t6787 = -1.*t284*t2651;
  t6788 = t6780 + t6787;
  t6774 = -1.*t3050*t284;
  t6775 = -1.*t6494*t2651;
  t6776 = t6774 + t6775;
  t6609 = -1.*t6494*t3050;
  t6610 = t284*t2651;
  t6611 = t6609 + t6610;
  t6790 = t3050*t284;
  t6791 = t6494*t2651;
  t6792 = t6790 + t6791;
  t6675 = -1.*t284*t6497;
  t6671 = t2649*t2651;
  t6672 = t3050*t3169;
  t6673 = t6671 + t6672;
  t6674 = -1.*t6494*t6673;
  t6676 = t6674 + t6675;
  t6800 = t6494*t6497;
  t6806 = t284*t6497;
  t6820 = t6494*t6712;
  t6821 = -1.*t284*t6710;
  t6822 = t6820 + t6821;
  t6814 = -1.*t6712*t284;
  t6815 = -1.*t6494*t6710;
  t6819 = t6814 + t6815;
  t6736 = -1.*t6494*t6712;
  t6737 = t284*t6710;
  t6738 = t6736 + t6737;
  t6824 = t6712*t284;
  t6825 = t6494*t6710;
  t6826 = t6824 + t6825;
  t6769 = -1.*t284*t6732;
  t6765 = t6691*t6710;
  t6766 = t6712*t6718;
  t6767 = t6765 + t6766;
  t6768 = -1.*t6494*t6767;
  t6770 = t6768 + t6769;
  t6836 = t6494*t6732;
  t6842 = t284*t6732;
  t6803 = t284*t6492;
  t6804 = t6803 + t6800;
  t6799 = -1.*t284*t6673;
  t6801 = t6799 + t6800;
  t6796 = t6494*t6492;
  t6797 = t6796 + t6675;
  t6811 = t6494*t6673;
  t6812 = t6811 + t6806;
  t6839 = t284*t6725;
  t6840 = t6839 + t6836;
  t6835 = -1.*t284*t6767;
  t6837 = t6835 + t6836;
  t6832 = t6494*t6725;
  t6833 = t6832 + t6769;
  t6847 = t6494*t6767;
  t6848 = t6847 + t6842;
  t6885 = t6657*t2651;
  t6886 = 0.24*t3050*t3169;
  t6887 = t6885 + t6886;
  t6889 = t3050*t6657;
  t6890 = -0.24*t2651*t3169;
  t6891 = t6889 + t6890;
  t6905 = t6749*t6710;
  t6906 = 0.24*t6712*t6718;
  t6907 = t6905 + t6906;
  t6909 = t6712*t6749;
  t6910 = -0.24*t6710*t6718;
  t6911 = t6909 + t6910;
  t6620 = -0.748*t6611;
  t6663 = t6657*t3169;
  t6669 = -0.24*t2649*t3169;
  t6670 = t6663 + t6669;
  t6658 = t6657*t2649;
  t6659 = Power(t3169,2);
  t6660 = 0.24*t6659;
  t6661 = t6658 + t6660;
  t6923 = -1.*t3050*t2649;
  t6924 = t2651*t3169;
  t6925 = t6923 + t6924;
  t6926 = t6494*t6925;
  t6927 = t6493 + t6926;
  t6789 = -20.4*t6776*t6788;
  t6793 = -6.8*t6792*t6788;
  t6794 = -20.4*t6776*t6611;
  t6795 = -6.8*t6792*t6611;
  t6805 = -1.*t6494*t6492;
  t6852 = Power(t6776,2);
  t6853 = -13.6*t6852;
  t6854 = -13.6*t6776*t6792;
  t6855 = Power(t6788,2);
  t6856 = -13.6*t6855;
  t6857 = -13.6*t6788*t6611;
  t6940 = t284*t6925;
  t6941 = t6796 + t6940;
  t6879 = Power(t3050,2);
  t6880 = 0.11*t6879;
  t6881 = Power(t2651,2);
  t6882 = 0.11*t6881;
  t6883 = t6880 + t6882;
  t6884 = -6.8*t6611*t6883;
  t6888 = -1.*t6887*t6497;
  t6892 = -1.*t6492*t6891;
  t6893 = t6888 + t6892;
  t6895 = t6887*t6673;
  t6896 = t6497*t6891;
  t6897 = t6895 + t6896;
  t6952 = -1.*t6657*t2651;
  t6953 = -0.24*t3050*t3169;
  t6954 = t6952 + t6953;
  t6928 = 0.384*var2[4]*t6927;
  t6929 = -3.2*t6670*t6797;
  t6930 = -3.2*t6661*t6927;
  t6933 = -6.4*t6801*t6797;
  t6934 = -3.2*t6804*t6676;
  t6935 = -3.2*t6544*t6812;
  t6936 = -6.4*t6797*t6927;
  t6937 = -1.*t284*t6925;
  t6938 = t6805 + t6937;
  t6939 = -3.2*t6804*t6938;
  t6942 = -3.2*t6544*t6941;
  t6945 = -6.4*t6804*t6801;
  t6946 = -6.4*t6797*t6812;
  t6947 = -6.4*t6804*t6927;
  t6948 = -6.4*t6797*t6941;
  t6951 = -3.2*t6797*t6893;
  t6956 = t6887*t6497;
  t6957 = t6492*t6891;
  t6961 = -3.2*t6897*t6927;
  t6986 = -0.24*t2649*t2651;
  t6987 = t6986 + t6953;
  t6963 = -1.*t6492*t6887;
  t6989 = 0.24*t3050*t2649;
  t6990 = t6989 + t6890;
  t6965 = -1.*t6891*t6925;
  t6739 = -0.748*t6738;
  t6755 = t6749*t6718;
  t6756 = -0.24*t6691*t6718;
  t6764 = t6755 + t6756;
  t6750 = t6749*t6691;
  t6751 = Power(t6718,2);
  t6752 = 0.24*t6751;
  t6753 = t6750 + t6752;
  t7002 = -1.*t6712*t6691;
  t7003 = t6710*t6718;
  t7004 = t7002 + t7003;
  t7005 = t6494*t7004;
  t7006 = t6726 + t7005;
  t6823 = -20.4*t6819*t6822;
  t6827 = -6.8*t6826*t6822;
  t6828 = -20.4*t6819*t6738;
  t6829 = -6.8*t6826*t6738;
  t6841 = -1.*t6494*t6725;
  t6864 = Power(t6819,2);
  t6865 = -13.6*t6864;
  t6866 = -13.6*t6819*t6826;
  t6867 = Power(t6822,2);
  t6868 = -13.6*t6867;
  t6869 = -13.6*t6822*t6738;
  t7019 = t284*t7004;
  t7020 = t6832 + t7019;
  t6899 = Power(t6712,2);
  t6900 = 0.11*t6899;
  t6901 = Power(t6710,2);
  t6902 = 0.11*t6901;
  t6903 = t6900 + t6902;
  t6904 = -6.8*t6738*t6903;
  t6908 = -1.*t6907*t6732;
  t6912 = -1.*t6725*t6911;
  t6913 = t6908 + t6912;
  t6915 = t6907*t6767;
  t6916 = t6732*t6911;
  t6917 = t6915 + t6916;
  t7031 = -1.*t6749*t6710;
  t7032 = -0.24*t6712*t6718;
  t7033 = t7031 + t7032;
  t7007 = 0.384*var2[6]*t7006;
  t7008 = -3.2*t6764*t6833;
  t7009 = -3.2*t6753*t7006;
  t7012 = -6.4*t6837*t6833;
  t7013 = -3.2*t6840*t6770;
  t7014 = -3.2*t6734*t6848;
  t7015 = -6.4*t6833*t7006;
  t7016 = -1.*t284*t7004;
  t7017 = t6841 + t7016;
  t7018 = -3.2*t6840*t7017;
  t7021 = -3.2*t6734*t7020;
  t7024 = -6.4*t6840*t6837;
  t7025 = -6.4*t6833*t6848;
  t7026 = -6.4*t6840*t7006;
  t7027 = -6.4*t6833*t7020;
  t7030 = -3.2*t6833*t6913;
  t7035 = t6907*t6732;
  t7036 = t6725*t6911;
  t7040 = -3.2*t6917*t7006;
  t7065 = -0.24*t6691*t6710;
  t7066 = t7065 + t7032;
  t7042 = -1.*t6725*t6907;
  t7068 = 0.24*t6712*t6691;
  t7069 = t7068 + t6910;
  t7044 = -1.*t6911*t7004;
  t6859 = Power(t6801,2);
  t6861 = Power(t6797,2);
  t6871 = Power(t6837,2);
  t6873 = Power(t6833,2);
  t7103 = -6.8*t6852;
  t7104 = -6.8*t6776*t6792;
  t7105 = -6.8*t6855;
  t7106 = -6.8*t6788*t6611;
  t7107 = -3.2*t6544*t6804;
  t7108 = -3.2*t6859;
  t7109 = -3.2*t6861;
  t7110 = -3.2*t6676*t6812;
  t7111 = -6.8*t6864;
  t7112 = -6.8*t6819*t6826;
  t7113 = -6.8*t6867;
  t7114 = -6.8*t6822*t6738;
  t7115 = -3.2*t6734*t6840;
  t7116 = -3.2*t6871;
  t7117 = -3.2*t6873;
  t7118 = -3.2*t6770*t6848;
  t7119 = t7103 + t7104 + t7105 + t7106 + t7107 + t7108 + t7109 + t7110 + t7111 + t7112 + t7113 + t7114 + t7115 + t7116 + t7117 + t7118;
  t7121 = 2.88*t284;
  t7122 = -6.8*t6776*t6883;
  t7123 = -3.2*t6801*t6893;
  t7124 = -3.2*t6797*t6897;
  t7125 = -6.8*t6819*t6903;
  t7126 = -3.2*t6837*t6913;
  t7127 = -3.2*t6833*t6917;
  t7128 = t7121 + t7122 + t7123 + t7124 + t7125 + t7126 + t7127;
  t7082 = -0.748*t6776;
  t7083 = -3.2*t6670*t6801;
  t7084 = -3.2*t6661*t6797;
  t7085 = t7082 + t7083 + t7084;
  t7088 = -0.748*t6819;
  t7089 = -3.2*t6764*t6837;
  t7090 = -3.2*t6753*t6833;
  t7091 = t7088 + t7089 + t7090;
  t6931 = t6620 + t6929 + t6930;
  t6932 = -0.5*var2[3]*t6931;
  t6943 = t6789 + t6793 + t6794 + t6795 + t6933 + t6934 + t6935 + t6936 + t6939 + t6942;
  t6944 = -0.5*var2[1]*t6943;
  t6949 = t6853 + t6854 + t6856 + t6857 + t6945 + t6946 + t6947 + t6948;
  t6950 = -0.5*var2[0]*t6949;
  t6955 = t6954*t6497;
  t6958 = t6673*t6891;
  t6959 = t6955 + t6956 + t6957 + t6958;
  t6960 = -3.2*t6797*t6959;
  t6962 = -1.*t6492*t6954;
  t6964 = -1.*t6497*t6891;
  t6966 = t6962 + t6963 + t6964 + t6965;
  t6967 = -3.2*t6801*t6966;
  t6968 = t6884 + t6951 + t6960 + t6961 + t6967;
  t6969 = -0.5*var2[2]*t6968;
  t6970 = t6928 + t6932 + t6944 + t6950 + t6969;
  t6971 = var2[0]*t6970;
  t6809 = t284*t6673;
  t7137 = t6809 + t6926;
  t7095 = -6.4*t6804*t6797;
  t7165 = -1.*t3050*t6657;
  t7166 = 0.24*t2651*t3169;
  t7167 = t7165 + t7166;
  t7138 = 0.384*var2[4]*t7137;
  t6972 = Power(t2649,2);
  t6973 = -0.24*t6972;
  t6974 = t6658 + t6973;
  t7139 = -3.2*t6661*t7137;
  t7140 = -3.2*t6670*t6941;
  t6976 = -1.*t6657*t3169;
  t6977 = 0.24*t2649*t3169;
  t6978 = t6976 + t6977;
  t7143 = -3.2*t6812*t6927;
  t7144 = -3.2*t6797*t7137;
  t7145 = t6811 + t6937;
  t7146 = -3.2*t6804*t7145;
  t7147 = -3.2*t6801*t6941;
  t7148 = -6.4*t6927*t6941;
  t7151 = Power(t6804,2);
  t7152 = -6.4*t7151;
  t7153 = -6.4*t6804*t7137;
  t7154 = -6.4*t6812*t6941;
  t7155 = Power(t6941,2);
  t7156 = -6.4*t7155;
  t7159 = -3.2*t6897*t7137;
  t7160 = -3.2*t6893*t6941;
  t6988 = t6987*t6497;
  t6991 = t6673*t6990;
  t6992 = t6988 + t6956 + t6957 + t6991;
  t7164 = -1.*t6673*t6891;
  t7170 = -1.*t6887*t6925;
  t6994 = -1.*t6492*t6987;
  t6995 = -1.*t6497*t6990;
  t6996 = t6994 + t6963 + t6995 + t6965;
  t7175 = t6492*t6887;
  t7198 = -0.24*t3050*t2649;
  t7199 = t7198 + t7166;
  t7179 = t6891*t6925;
  t7093 = -13.6*t6776*t6788;
  t7094 = -13.6*t6792*t6788;
  t7227 = -3.2*t6804*t6801;
  t7228 = -3.2*t6797*t6812;
  t7229 = -3.2*t6804*t6927;
  t7230 = -3.2*t6797*t6941;
  t7231 = t7103 + t7104 + t7105 + t7106 + t7227 + t7228 + t7229 + t7230;
  t7233 = -3.2*t6804*t6893;
  t7234 = -3.2*t6804*t6959;
  t7235 = -3.2*t6897*t6941;
  t7236 = -3.2*t6812*t6966;
  t7237 = t7122 + t7233 + t7234 + t7235 + t7236;
  t7219 = -3.2*t6670*t6804;
  t7220 = -3.2*t6661*t6941;
  t7221 = t7082 + t7219 + t7220;
  t6975 = -3.2*t6974*t6801;
  t6979 = -3.2*t6978*t6797;
  t6980 = t6975 + t6929 + t6979 + t6930;
  t6981 = -0.5*var2[3]*t6980;
  t6982 = t6933 + t6934 + t6935 + t6936 + t6939 + t6942;
  t6983 = -0.5*var2[1]*t6982;
  t6984 = t6945 + t6946 + t6947 + t6948;
  t6985 = -0.5*var2[0]*t6984;
  t6993 = -3.2*t6797*t6992;
  t6997 = -3.2*t6801*t6996;
  t6998 = t6951 + t6993 + t6961 + t6997;
  t6999 = -0.5*var2[2]*t6998;
  t7000 = t6928 + t6981 + t6983 + t6985 + t6999;
  t7001 = var2[0]*t7000;
  t7186 = -3.2*t6974*t6804;
  t7187 = -3.2*t6978*t6941;
  t7188 = t7186 + t7139 + t7140 + t7187;
  t7189 = -0.5*var2[3]*t7188;
  t7190 = t7095 + t7143 + t7144 + t7146 + t7147 + t7148;
  t7191 = -0.5*var2[1]*t7190;
  t7192 = t7152 + t7153 + t7154 + t7156;
  t7193 = -0.5*var2[0]*t7192;
  t7194 = -3.2*t6959*t6941;
  t7195 = -3.2*t6992*t6941;
  t7196 = -1.*t6987*t6497;
  t7197 = -1.*t6492*t6990;
  t7200 = -1.*t6492*t7199;
  t7201 = -1.*t6954*t6925;
  t7202 = -1.*t6987*t6925;
  t7203 = t7196 + t6892 + t7164 + t7197 + t7200 + t7201 + t7202 + t7170;
  t7204 = -3.2*t6812*t7203;
  t7205 = -3.2*t6804*t6966;
  t7206 = -3.2*t6804*t6996;
  t7207 = t6492*t6954;
  t7208 = t6492*t6987;
  t7209 = t6987*t6673;
  t7210 = t6497*t6990;
  t7211 = t6497*t7199;
  t7212 = t7207 + t7208 + t7175 + t7209 + t6896 + t7210 + t7211 + t7179;
  t7213 = -3.2*t6804*t7212;
  t7214 = t7159 + t7160 + t7194 + t7195 + t7204 + t7205 + t7206 + t7213;
  t7215 = -0.5*var2[2]*t7214;
  t7216 = t7138 + t7189 + t7191 + t7193 + t7215;
  t7217 = var2[0]*t7216;
  t7218 = 0.384*var2[4]*t6941;
  t7223 = -6.4*t6804*t6812;
  t7224 = -6.4*t6804*t6941;
  t7273 = t7227 + t7228 + t7229 + t7230;
  t7275 = -3.2*t6804*t6992;
  t7276 = -3.2*t6812*t6996;
  t7277 = t7233 + t7275 + t7235 + t7276;
  t7267 = -3.2*t6978*t6804;
  t7268 = -3.2*t6974*t6812;
  t7269 = t7219 + t7267 + t7268 + t7220;
  t7243 = 0.384*var2[0]*t6941;
  t7010 = t6739 + t7008 + t7009;
  t7011 = -0.5*var2[5]*t7010;
  t7022 = t6823 + t6827 + t6828 + t6829 + t7012 + t7013 + t7014 + t7015 + t7018 + t7021;
  t7023 = -0.5*var2[1]*t7022;
  t7028 = t6865 + t6866 + t6868 + t6869 + t7024 + t7025 + t7026 + t7027;
  t7029 = -0.5*var2[0]*t7028;
  t7034 = t7033*t6732;
  t7037 = t6767*t6911;
  t7038 = t7034 + t7035 + t7036 + t7037;
  t7039 = -3.2*t6833*t7038;
  t7041 = -1.*t6725*t7033;
  t7043 = -1.*t6732*t6911;
  t7045 = t7041 + t7042 + t7043 + t7044;
  t7046 = -3.2*t6837*t7045;
  t7047 = t6904 + t7030 + t7039 + t7040 + t7046;
  t7048 = -0.5*var2[2]*t7047;
  t7049 = t7007 + t7011 + t7023 + t7029 + t7048;
  t7050 = var2[0]*t7049;
  t6845 = t284*t6767;
  t7283 = t6845 + t7005;
  t7099 = -6.4*t6840*t6833;
  t7311 = -1.*t6712*t6749;
  t7312 = 0.24*t6710*t6718;
  t7313 = t7311 + t7312;
  t7284 = 0.384*var2[6]*t7283;
  t7051 = Power(t6691,2);
  t7052 = -0.24*t7051;
  t7053 = t6750 + t7052;
  t7285 = -3.2*t6753*t7283;
  t7286 = -3.2*t6764*t7020;
  t7055 = -1.*t6749*t6718;
  t7056 = 0.24*t6691*t6718;
  t7057 = t7055 + t7056;
  t7289 = -3.2*t6848*t7006;
  t7290 = -3.2*t6833*t7283;
  t7291 = t6847 + t7016;
  t7292 = -3.2*t6840*t7291;
  t7293 = -3.2*t6837*t7020;
  t7294 = -6.4*t7006*t7020;
  t7297 = Power(t6840,2);
  t7298 = -6.4*t7297;
  t7299 = -6.4*t6840*t7283;
  t7300 = -6.4*t6848*t7020;
  t7301 = Power(t7020,2);
  t7302 = -6.4*t7301;
  t7305 = -3.2*t6917*t7283;
  t7306 = -3.2*t6913*t7020;
  t7067 = t7066*t6732;
  t7070 = t6767*t7069;
  t7071 = t7067 + t7035 + t7036 + t7070;
  t7310 = -1.*t6767*t6911;
  t7316 = -1.*t6907*t7004;
  t7073 = -1.*t6725*t7066;
  t7074 = -1.*t6732*t7069;
  t7075 = t7073 + t7042 + t7074 + t7044;
  t7321 = t6725*t6907;
  t7344 = -0.24*t6712*t6691;
  t7345 = t7344 + t7312;
  t7325 = t6911*t7004;
  t7097 = -13.6*t6819*t6822;
  t7098 = -13.6*t6826*t6822;
  t7373 = -3.2*t6840*t6837;
  t7374 = -3.2*t6833*t6848;
  t7375 = -3.2*t6840*t7006;
  t7376 = -3.2*t6833*t7020;
  t7377 = t7111 + t7112 + t7113 + t7114 + t7373 + t7374 + t7375 + t7376;
  t7379 = -3.2*t6840*t6913;
  t7380 = -3.2*t6840*t7038;
  t7381 = -3.2*t6917*t7020;
  t7382 = -3.2*t6848*t7045;
  t7383 = t7125 + t7379 + t7380 + t7381 + t7382;
  t7365 = -3.2*t6764*t6840;
  t7366 = -3.2*t6753*t7020;
  t7367 = t7088 + t7365 + t7366;
  t7054 = -3.2*t7053*t6837;
  t7058 = -3.2*t7057*t6833;
  t7059 = t7054 + t7008 + t7058 + t7009;
  t7060 = -0.5*var2[5]*t7059;
  t7061 = t7012 + t7013 + t7014 + t7015 + t7018 + t7021;
  t7062 = -0.5*var2[1]*t7061;
  t7063 = t7024 + t7025 + t7026 + t7027;
  t7064 = -0.5*var2[0]*t7063;
  t7072 = -3.2*t6833*t7071;
  t7076 = -3.2*t6837*t7075;
  t7077 = t7030 + t7072 + t7040 + t7076;
  t7078 = -0.5*var2[2]*t7077;
  t7079 = t7007 + t7060 + t7062 + t7064 + t7078;
  t7080 = var2[0]*t7079;
  t7332 = -3.2*t7053*t6840;
  t7333 = -3.2*t7057*t7020;
  t7334 = t7332 + t7285 + t7286 + t7333;
  t7335 = -0.5*var2[5]*t7334;
  t7336 = t7099 + t7289 + t7290 + t7292 + t7293 + t7294;
  t7337 = -0.5*var2[1]*t7336;
  t7338 = t7298 + t7299 + t7300 + t7302;
  t7339 = -0.5*var2[0]*t7338;
  t7340 = -3.2*t7038*t7020;
  t7341 = -3.2*t7071*t7020;
  t7342 = -1.*t7066*t6732;
  t7343 = -1.*t6725*t7069;
  t7346 = -1.*t6725*t7345;
  t7347 = -1.*t7033*t7004;
  t7348 = -1.*t7066*t7004;
  t7349 = t7342 + t6912 + t7310 + t7343 + t7346 + t7347 + t7348 + t7316;
  t7350 = -3.2*t6848*t7349;
  t7351 = -3.2*t6840*t7045;
  t7352 = -3.2*t6840*t7075;
  t7353 = t6725*t7033;
  t7354 = t6725*t7066;
  t7355 = t7066*t6767;
  t7356 = t6732*t7069;
  t7357 = t6732*t7345;
  t7358 = t7353 + t7354 + t7321 + t7355 + t6916 + t7356 + t7357 + t7325;
  t7359 = -3.2*t6840*t7358;
  t7360 = t7305 + t7306 + t7340 + t7341 + t7350 + t7351 + t7352 + t7359;
  t7361 = -0.5*var2[2]*t7360;
  t7362 = t7284 + t7335 + t7337 + t7339 + t7361;
  t7363 = var2[0]*t7362;
  t7364 = 0.384*var2[6]*t7020;
  t7369 = -6.4*t6840*t6848;
  t7370 = -6.4*t6840*t7020;
  t7419 = t7373 + t7374 + t7375 + t7376;
  t7421 = -3.2*t6840*t7071;
  t7422 = -3.2*t6848*t7075;
  t7423 = t7379 + t7421 + t7381 + t7422;
  t7413 = -3.2*t7057*t6840;
  t7414 = -3.2*t7053*t6848;
  t7415 = t7365 + t7413 + t7414 + t7366;
  t7389 = 0.384*var2[0]*t7020;
  p_output1[0]=var2[0]*(-0.5*(-6.4*t6544*t6804 - 6.4*t6676*t6812 - 6.4*t6734*t6840 - 6.4*t6770*t6848 + t6853 + t6854 + t6856 + t6857 - 6.4*t6859 - 6.4*t6861 + t6865 + t6866 + t6868 + t6869 - 6.4*t6871 - 6.4*t6873)*var2[0] - 0.5*(t6789 + t6793 + t6794 + t6795 - 9.6*t6544*t6797 - 9.6*t6676*t6801 - 3.2*t6804*(t6805 + t6806) - 3.2*(t6543 + t6809)*t6812 + t6823 + t6827 + t6828 + t6829 - 9.6*t6734*t6833 - 9.6*t6770*t6837 - 3.2*t6840*(t6841 + t6842) - 3.2*(t6733 + t6845)*t6848)*var2[1] - 0.5*(2.88*t6494 + t6884 - 3.2*t6676*t6893 - 3.2*t6544*t6897 + t6904 - 3.2*t6770*t6913 - 3.2*t6734*t6917)*var2[2] - 0.5*(t6620 - 3.2*t6544*t6661 - 3.2*t6670*t6676)*var2[3] + 0.384*t6544*var2[4] - 0.5*(t6739 - 3.2*t6734*t6753 - 3.2*t6764*t6770)*var2[5] + 0.384*t6734*var2[6]);
  p_output1[1]=t6971;
  p_output1[2]=t7001;
  p_output1[3]=t7050;
  p_output1[4]=t7080;
  p_output1[5]=-1.*(-6.4*t6801*t6812 - 6.4*t6837*t6848 + t7093 + t7094 + t7095 + t7097 + t7098 + t7099)*var2[0] - 0.5*t7119*var2[1] - 0.5*t7128*var2[2] - 0.5*t7085*var2[3] + 0.384*t6797*var2[4] - 0.5*t7091*var2[5] + 0.384*t6833*var2[6];
  p_output1[6]=-0.5*t7119*var2[0];
  p_output1[7]=-0.5*t7128*var2[0];
  p_output1[8]=-0.5*t7085*var2[0];
  p_output1[9]=0.384*t6797*var2[0];
  p_output1[10]=-0.5*t7091*var2[0];
  p_output1[11]=0.384*t6833*var2[0];
  p_output1[12]=t6971;
  p_output1[13]=var2[0]*(t7138 - 0.5*(t6853 + t6854 + t6856 + t6857 + t7152 + t7153 + t7154 + t7156)*var2[0] - 0.5*(t6789 + t6793 + t6794 + t6795 + t7095 + t7143 + t7144 + t7146 + t7147 + t7148)*var2[1] - 0.5*(t6884 - 6.4*t6941*t6959 - 6.4*t6804*t6966 + t7159 + t7160 - 3.2*t6812*(-2.*t6492*t6891 - 1.*t6497*t6954 - 2.*t6925*t6954 + t7164 - 1.*t6492*t7167 + t7170) - 3.2*t6804*(2.*t6497*t6891 + 2.*t6492*t6954 + t6673*t6954 + t6497*t7167 + t7175 + t7179))*var2[2] - 0.5*(t6620 + t7139 + t7140)*var2[3]);
  p_output1[14]=t7217;
  p_output1[15]=t7218 - 1.*(t7093 + t7094 + t7223 + t7224)*var2[0] - 0.5*t7231*var2[1] - 0.5*t7237*var2[2] - 0.5*t7221*var2[3];
  p_output1[16]=-0.5*t7231*var2[0];
  p_output1[17]=-0.5*t7237*var2[0];
  p_output1[18]=-0.5*t7221*var2[0];
  p_output1[19]=t7243;
  p_output1[20]=t7001;
  p_output1[21]=t7217;
  p_output1[22]=var2[0]*(t7138 + t7191 + t7193 - 0.5*(-6.4*t6941*t6992 - 6.4*t6804*t6996 + t7159 + t7160 - 3.2*t6812*(-2.*t6925*t6987 - 2.*t6492*t6990 + t7164 + t7170 + t7196 + t7200) - 3.2*t6804*(2.*t6492*t6987 + 2.*t6497*t6990 + t7175 + t7179 + t7209 + t7211))*var2[2] - 0.5*(-3.2*t6804*(-1.*t2649*t6657 + 0.24*t6972) - 6.4*t6804*t6974 - 3.2*t6812*t6978 - 6.4*t6941*t6978 + t7139 + t7140)*var2[3]);
  p_output1[23]=t7218 - 1.*(t7223 + t7224)*var2[0] - 0.5*t7273*var2[1] - 0.5*t7277*var2[2] - 0.5*t7269*var2[3];
  p_output1[24]=-0.5*t7273*var2[0];
  p_output1[25]=-0.5*t7277*var2[0];
  p_output1[26]=-0.5*t7269*var2[0];
  p_output1[27]=t7243;
  p_output1[28]=t7050;
  p_output1[29]=var2[0]*(t7284 - 0.5*(t6865 + t6866 + t6868 + t6869 + t7298 + t7299 + t7300 + t7302)*var2[0] - 0.5*(t6823 + t6827 + t6828 + t6829 + t7099 + t7289 + t7290 + t7292 + t7293 + t7294)*var2[1] - 0.5*(t6904 - 6.4*t7020*t7038 - 6.4*t6840*t7045 + t7305 + t7306 - 3.2*t6848*(-2.*t6725*t6911 - 1.*t6732*t7033 - 2.*t7004*t7033 + t7310 - 1.*t6725*t7313 + t7316) - 3.2*t6840*(2.*t6732*t6911 + 2.*t6725*t7033 + t6767*t7033 + t6732*t7313 + t7321 + t7325))*var2[2] - 0.5*(t6739 + t7285 + t7286)*var2[5]);
  p_output1[30]=t7363;
  p_output1[31]=t7364 - 1.*(t7097 + t7098 + t7369 + t7370)*var2[0] - 0.5*t7377*var2[1] - 0.5*t7383*var2[2] - 0.5*t7367*var2[5];
  p_output1[32]=-0.5*t7377*var2[0];
  p_output1[33]=-0.5*t7383*var2[0];
  p_output1[34]=-0.5*t7367*var2[0];
  p_output1[35]=t7389;
  p_output1[36]=t7080;
  p_output1[37]=t7363;
  p_output1[38]=var2[0]*(t7284 + t7337 + t7339 - 0.5*(-6.4*t7020*t7071 - 6.4*t6840*t7075 + t7305 + t7306 - 3.2*t6848*(-2.*t7004*t7066 - 2.*t6725*t7069 + t7310 + t7316 + t7342 + t7346) - 3.2*t6840*(2.*t6725*t7066 + 2.*t6732*t7069 + t7321 + t7325 + t7355 + t7357))*var2[2] - 0.5*(-3.2*t6840*(-1.*t6691*t6749 + 0.24*t7051) - 6.4*t6840*t7053 - 3.2*t6848*t7057 - 6.4*t7020*t7057 + t7285 + t7286)*var2[5]);
  p_output1[39]=t7364 - 1.*(t7369 + t7370)*var2[0] - 0.5*t7419*var2[1] - 0.5*t7423*var2[2] - 0.5*t7415*var2[5];
  p_output1[40]=-0.5*t7419*var2[0];
  p_output1[41]=-0.5*t7423*var2[0];
  p_output1[42]=-0.5*t7415*var2[0];
  p_output1[43]=t7389;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 44, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec1_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce3_vec1_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
