/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 21:06:41 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t4469;
  double t3874;
  double t4771;
  double t4808;
  double t9885;
  double t9888;
  double t9904;
  double t9907;
  double t9909;
  double t10000;
  double t10004;
  double t10033;
  double t10035;
  double t10048;
  double t10052;
  double t10058;
  double t9861;
  double t9864;
  double t9875;
  double t4772;
  double t4826;
  double t9849;
  double t9886;
  double t9889;
  double t9893;
  double t9903;
  double t9912;
  double t9920;
  double t9970;
  double t9971;
  double t9973;
  double t9974;
  double t9978;
  double t9985;
  double t10026;
  double t10027;
  double t10028;
  double t10001;
  double t10012;
  double t10021;
  double t10034;
  double t10036;
  double t10037;
  double t10038;
  double t10059;
  double t10068;
  double t10079;
  double t10083;
  double t10084;
  double t10085;
  double t10086;
  double t10091;
  double t10167;
  double t10168;
  double t10169;
  double t10170;
  double t10171;
  double t10172;
  double t10173;
  double t10174;
  double t10178;
  double t10179;
  double t10180;
  double t10194;
  double t10195;
  double t10196;
  double t10197;
  double t10198;
  double t10199;
  double t10200;
  double t10201;
  double t10203;
  double t10204;
  double t10205;
  double t10104;
  double t10105;
  double t10106;
  double t10099;
  double t10100;
  double t10101;
  double t10222;
  double t10223;
  double t10224;
  double t10108;
  double t10109;
  double t10217;
  double t10218;
  double t10219;
  double t10220;
  double t10133;
  double t10137;
  double t10144;
  double t10111;
  double t10112;
  double t10121;
  double t10234;
  double t10235;
  double t10236;
  double t10152;
  double t10157;
  double t10229;
  double t10230;
  double t10231;
  double t10232;
  double t9876;
  double t10029;
  double t10161;
  double t10162;
  double t10163;
  double t10164;
  double t10165;
  double t10177;
  double t10181;
  double t10182;
  double t10184;
  double t10185;
  double t10186;
  double t10188;
  double t10189;
  double t10190;
  double t10191;
  double t10192;
  double t10202;
  double t10206;
  double t10207;
  double t10211;
  double t10212;
  double t10213;
  double t10240;
  double t10241;
  double t10243;
  double t10244;
  double t10245;
  double t10326;
  double t10327;
  double t10328;
  double t10329;
  double t10330;
  double t10260;
  double t10261;
  double t10262;
  double t10263;
  double t10272;
  double t10273;
  double t10274;
  double t10275;
  double t10276;
  double t10277;
  double t10278;
  double t10279;
  double t10280;
  double t10281;
  double t10282;
  double t10314;
  double t10315;
  double t10317;
  double t10349;
  double t10350;
  double t10351;
  double t10331;
  double t10332;
  double t10333;
  double t10336;
  double t10337;
  double t10340;
  double t10341;
  double t10342;
  double t10343;
  double t10344;
  double t10345;
  double t10348;
  double t10353;
  double t10354;
  double t10358;
  double t10382;
  double t10383;
  double t10360;
  double t10385;
  double t10386;
  double t10362;
  double t10250;
  double t10251;
  double t10253;
  double t10254;
  double t10255;
  double t10397;
  double t10398;
  double t10399;
  double t10400;
  double t10401;
  double t10266;
  double t10267;
  double t10293;
  double t10294;
  double t10295;
  double t10296;
  double t10297;
  double t10298;
  double t10299;
  double t10300;
  double t10301;
  double t10320;
  double t10420;
  double t10421;
  double t10422;
  double t10402;
  double t10403;
  double t10404;
  double t10407;
  double t10408;
  double t10411;
  double t10412;
  double t10413;
  double t10414;
  double t10415;
  double t10416;
  double t10419;
  double t10424;
  double t10425;
  double t10429;
  double t10453;
  double t10454;
  double t10431;
  double t10456;
  double t10457;
  double t10433;
  double t4154;
  double t4545;
  double t9852;
  double t9921;
  double t9986;
  double t10022;
  double t10072;
  double t10092;
  double t10102;
  double t10103;
  double t10107;
  double t10110;
  double t10122;
  double t10126;
  double t10149;
  double t10158;
  double t10159;
  double t4269;
  double t4621;
  double t9881;
  double t10286;
  double t10288;
  double t10030;
  double t10305;
  double t10307;
  double t10283;
  double t10284;
  double t10290;
  double t10291;
  double t10302;
  double t10303;
  double t10309;
  double t10310;
  double t10285;
  double t10287;
  double t10289;
  double t10292;
  double t10304;
  double t10306;
  double t10308;
  double t10311;
  double t10312;
  double t10160;
  double t10530;
  double t10541;
  double t10346;
  double t10550;
  double t10352;
  double t10355;
  double t10356;
  double t10359;
  double t10361;
  double t10363;
  double t10559;
  double t10372;
  double t10373;
  double t10374;
  double t10560;
  double t10368;
  double t10369;
  double t10370;
  double t10561;
  double t10564;
  double t10565;
  double t10380;
  double t10569;
  double t10384;
  double t10387;
  double t10388;
  double t10571;
  double t10390;
  double t10391;
  double t10392;
  double t10536;
  double t10544;
  double t10417;
  double t10553;
  double t10423;
  double t10426;
  double t10427;
  double t10430;
  double t10432;
  double t10434;
  double t10588;
  double t10443;
  double t10444;
  double t10445;
  double t10589;
  double t10439;
  double t10440;
  double t10441;
  double t10590;
  double t10593;
  double t10594;
  double t10451;
  double t10598;
  double t10455;
  double t10458;
  double t10459;
  double t10600;
  double t10461;
  double t10462;
  double t10463;
  double t10477;
  double t10478;
  double t10479;
  double t10480;
  double t10481;
  double t10482;
  double t10483;
  double t10484;
  double t10485;
  double t10468;
  double t10469;
  double t10316;
  double t10318;
  double t10319;
  double t10321;
  double t10322;
  double t10323;
  double t10246;
  double t10247;
  double t10248;
  double t10256;
  double t10257;
  double t10258;
  double t10166;
  double t10183;
  double t10187;
  double t10193;
  double t10210;
  double t10214;
  double t10215;
  double t10511;
  double t10512;
  double t10513;
  double t10514;
  double t10515;
  double t10516;
  double t10517;
  double t10518;
  double t10551;
  double t10552;
  double t10554;
  double t10555;
  double t10556;
  double t10645;
  double t10646;
  double t10647;
  double t10648;
  double t10649;
  double t10650;
  double t10651;
  double t10652;
  double t10653;
  double t10654;
  double t10655;
  double t10656;
  double t10657;
  double t10658;
  double t10659;
  double t10660;
  double t10570;
  double t10572;
  double t10573;
  double t10357;
  double t10364;
  double t10365;
  double t10583;
  double t10584;
  double t10585;
  double t10389;
  double t10393;
  double t10394;
  double t10599;
  double t10601;
  double t10602;
  double t10428;
  double t10435;
  double t10436;
  double t10612;
  double t10613;
  double t10614;
  double t10460;
  double t10464;
  double t10465;
  double t10486;
  double t10487;
  double t10488;
  double t10489;
  double t10490;
  double t10491;
  double t10492;
  double t10493;
  double t10620;
  double t10622;
  double t10624;
  double t10626;
  double t10628;
  double t10630;
  double t10678;
  double t10216;
  double t10221;
  double t10225;
  double t10226;
  double t10519;
  double t10520;
  double t10521;
  double t10522;
  double t10633;
  double t10634;
  double t10635;
  double t10636;
  double t10531;
  double t10532;
  double t10533;
  double t10562;
  double t10334;
  double t10665;
  double t10666;
  double t10667;
  double t10677;
  double t10679;
  double t10680;
  double t10681;
  double t10682;
  double t10683;
  double t10684;
  double t10685;
  double t10686;
  double t10687;
  double t10688;
  double t10689;
  double t10690;
  double t10576;
  double t10577;
  double t10578;
  double t10371;
  double t10375;
  double t10376;
  double t10691;
  double t10692;
  double t10693;
  double t10694;
  double t10695;
  double t10494;
  double t10495;
  double t10496;
  double t10497;
  double t10737;
  double t10738;
  double t10739;
  double t10740;
  double t10759;
  double t10761;
  double t10749;
  double t10750;
  double t10751;
  double t10752;
  double t10753;
  double t10754;
  double t10755;
  double t10756;
  double t10757;
  double t10758;
  double t10227;
  double t10523;
  double t10637;
  double t10638;
  double t10764;
  double t10765;
  double t10791;
  double t10792;
  double t10498;
  double t10618;
  double t10741;
  double t10742;
  double t10785;
  double t10786;
  double t10796;
  double t10228;
  double t10233;
  double t10237;
  double t10238;
  double t10524;
  double t10525;
  double t10526;
  double t10527;
  double t10639;
  double t10640;
  double t10641;
  double t10642;
  double t10537;
  double t10538;
  double t10539;
  double t10591;
  double t10405;
  double t10705;
  double t10706;
  double t10707;
  double t10605;
  double t10606;
  double t10607;
  double t10442;
  double t10446;
  double t10447;
  double t10717;
  double t10718;
  double t10719;
  double t10720;
  double t10721;
  double t10499;
  double t10500;
  double t10501;
  double t10502;
  double t10743;
  double t10744;
  double t10745;
  double t10746;
  double t10817;
  double t10819;
  double t10239;
  double t10528;
  double t10643;
  double t10644;
  double t10822;
  double t10823;
  double t10849;
  double t10850;
  double t10503;
  double t10619;
  double t10747;
  double t10748;
  double t10843;
  double t10844;
  t4469 = Sin(var2[2]);
  t3874 = Cos(var2[2]);
  t4771 = Cos(var2[3]);
  t4808 = Sin(var2[3]);
  t9885 = Cos(var2[4]);
  t9888 = Sin(var2[4]);
  t9904 = t4771*t9885;
  t9907 = -1.*t4808*t9888;
  t9909 = t9904 + t9907;
  t10000 = Cos(var2[5]);
  t10004 = Sin(var2[5]);
  t10033 = Cos(var2[6]);
  t10035 = Sin(var2[6]);
  t10048 = t10000*t10033;
  t10052 = -1.*t10004*t10035;
  t10058 = t10048 + t10052;
  t9861 = t3874*t4771;
  t9864 = -1.*t4469*t4808;
  t9875 = t9861 + t9864;
  t4772 = t4771*t4469;
  t4826 = t3874*t4808;
  t9849 = t4772 + t4826;
  t9886 = -1.*t9885*t4808;
  t9889 = -1.*t4771*t9888;
  t9893 = t9886 + t9889;
  t9903 = t4469*t9893;
  t9912 = t3874*t9909;
  t9920 = t9903 + t9912;
  t9970 = t9885*t4808;
  t9971 = t4771*t9888;
  t9973 = t9970 + t9971;
  t9974 = t3874*t9973;
  t9978 = t4469*t9909;
  t9985 = t9974 + t9978;
  t10026 = t3874*t10000;
  t10027 = -1.*t4469*t10004;
  t10028 = t10026 + t10027;
  t10001 = t10000*t4469;
  t10012 = t3874*t10004;
  t10021 = t10001 + t10012;
  t10034 = -1.*t10033*t10004;
  t10036 = -1.*t10000*t10035;
  t10037 = t10034 + t10036;
  t10038 = t4469*t10037;
  t10059 = t3874*t10058;
  t10068 = t10038 + t10059;
  t10079 = t10033*t10004;
  t10083 = t10000*t10035;
  t10084 = t10079 + t10083;
  t10085 = t3874*t10084;
  t10086 = t4469*t10058;
  t10091 = t10085 + t10086;
  t10167 = -1.*t9885;
  t10168 = 1. + t10167;
  t10169 = 0.4*t10168;
  t10170 = 0.64*t9885;
  t10171 = t10169 + t10170;
  t10172 = t10171*t4808;
  t10173 = 0.24*t4771*t9888;
  t10174 = t10172 + t10173;
  t10178 = t4771*t10171;
  t10179 = -0.24*t4808*t9888;
  t10180 = t10178 + t10179;
  t10194 = -1.*t10033;
  t10195 = 1. + t10194;
  t10196 = 0.4*t10195;
  t10197 = 0.64*t10033;
  t10198 = t10196 + t10197;
  t10199 = t10198*t10004;
  t10200 = 0.24*t10000*t10035;
  t10201 = t10199 + t10200;
  t10203 = t10000*t10198;
  t10204 = -0.24*t10004*t10035;
  t10205 = t10203 + t10204;
  t10104 = t3874*t9893;
  t10105 = -1.*t4469*t9909;
  t10106 = t10104 + t10105;
  t10099 = -1.*t4771*t4469;
  t10100 = -1.*t3874*t4808;
  t10101 = t10099 + t10100;
  t10222 = t10171*t9888;
  t10223 = -0.24*t9885*t9888;
  t10224 = t10222 + t10223;
  t10108 = -1.*t4469*t9973;
  t10109 = t10108 + t9912;
  t10217 = t10171*t9885;
  t10218 = Power(t9888,2);
  t10219 = 0.24*t10218;
  t10220 = t10217 + t10219;
  t10133 = t3874*t10037;
  t10137 = -1.*t4469*t10058;
  t10144 = t10133 + t10137;
  t10111 = -1.*t10000*t4469;
  t10112 = -1.*t3874*t10004;
  t10121 = t10111 + t10112;
  t10234 = t10198*t10035;
  t10235 = -0.24*t10033*t10035;
  t10236 = t10234 + t10235;
  t10152 = -1.*t4469*t10084;
  t10157 = t10152 + t10059;
  t10229 = t10198*t10033;
  t10230 = Power(t10035,2);
  t10231 = 0.24*t10230;
  t10232 = t10229 + t10231;
  t9876 = Power(t9875,2);
  t10029 = Power(t10028,2);
  t10161 = Power(t4771,2);
  t10162 = 0.11*t10161;
  t10163 = Power(t4808,2);
  t10164 = 0.11*t10163;
  t10165 = t10162 + t10164;
  t10177 = -1.*t10174*t9909;
  t10181 = -1.*t9893*t10180;
  t10182 = t10177 + t10181;
  t10184 = t10174*t9973;
  t10185 = t9909*t10180;
  t10186 = t10184 + t10185;
  t10188 = Power(t10000,2);
  t10189 = 0.11*t10188;
  t10190 = Power(t10004,2);
  t10191 = 0.11*t10190;
  t10192 = t10189 + t10191;
  t10202 = -1.*t10201*t10058;
  t10206 = -1.*t10037*t10205;
  t10207 = t10202 + t10206;
  t10211 = t10201*t10084;
  t10212 = t10058*t10205;
  t10213 = t10211 + t10212;
  t10240 = -1.*var1[4];
  t10241 = var3[4] + t10240;
  t10243 = -1.*var1[3];
  t10244 = var3[3] + t10243;
  t10245 = 0.748*t10101;
  t10326 = -1.*t4771*t9885;
  t10327 = t4808*t9888;
  t10328 = t10326 + t10327;
  t10329 = t4469*t10328;
  t10330 = t10104 + t10329;
  t10260 = -1.*var1[0];
  t10261 = var3[0] + t10260;
  t10262 = 13.6*t10101*t9875;
  t10263 = 13.6*t9849*t9875;
  t10272 = -1.*var1[1];
  t10273 = var3[1] + t10272;
  t10274 = Power(t10101,2);
  t10275 = 6.8*t10274;
  t10276 = 6.8*t10101*t9849;
  t10277 = 6.8*t9876;
  t10278 = -1.*t3874*t4771;
  t10279 = t4469*t4808;
  t10280 = t10278 + t10279;
  t10281 = 6.8*t9875*t10280;
  t10282 = -1.*t4469*t9893;
  t10314 = -1.*var1[2];
  t10315 = var3[2] + t10314;
  t10317 = 6.8*t10101*t10165;
  t10349 = -1.*t10171*t4808;
  t10350 = -0.24*t4771*t9888;
  t10351 = t10349 + t10350;
  t10331 = 0.768*t10241*t10330;
  t10332 = 3.2*t10224*t9920;
  t10333 = 3.2*t10220*t10330;
  t10336 = 6.4*t9920*t9985;
  t10337 = 6.4*t9920*t10330;
  t10340 = 3.2*t9920*t10109;
  t10341 = 3.2*t10106*t9985;
  t10342 = t3874*t10328;
  t10343 = t10282 + t10342;
  t10344 = 3.2*t9920*t10343;
  t10345 = 3.2*t10106*t10330;
  t10348 = 3.2*t9920*t10182;
  t10353 = t10174*t9909;
  t10354 = t9893*t10180;
  t10358 = 3.2*t10186*t10330;
  t10382 = -0.24*t9885*t4808;
  t10383 = t10382 + t10350;
  t10360 = -1.*t9893*t10174;
  t10385 = 0.24*t4771*t9885;
  t10386 = t10385 + t10179;
  t10362 = -1.*t10180*t10328;
  t10250 = -1.*var1[6];
  t10251 = var3[6] + t10250;
  t10253 = -1.*var1[5];
  t10254 = var3[5] + t10253;
  t10255 = 0.748*t10121;
  t10397 = -1.*t10000*t10033;
  t10398 = t10004*t10035;
  t10399 = t10397 + t10398;
  t10400 = t4469*t10399;
  t10401 = t10133 + t10400;
  t10266 = 13.6*t10121*t10028;
  t10267 = 13.6*t10021*t10028;
  t10293 = Power(t10121,2);
  t10294 = 6.8*t10293;
  t10295 = 6.8*t10121*t10021;
  t10296 = 6.8*t10029;
  t10297 = -1.*t3874*t10000;
  t10298 = t4469*t10004;
  t10299 = t10297 + t10298;
  t10300 = 6.8*t10028*t10299;
  t10301 = -1.*t4469*t10037;
  t10320 = 6.8*t10121*t10192;
  t10420 = -1.*t10198*t10004;
  t10421 = -0.24*t10000*t10035;
  t10422 = t10420 + t10421;
  t10402 = 0.768*t10251*t10401;
  t10403 = 3.2*t10236*t10068;
  t10404 = 3.2*t10232*t10401;
  t10407 = 6.4*t10068*t10091;
  t10408 = 6.4*t10068*t10401;
  t10411 = 3.2*t10068*t10157;
  t10412 = 3.2*t10144*t10091;
  t10413 = t3874*t10399;
  t10414 = t10301 + t10413;
  t10415 = 3.2*t10068*t10414;
  t10416 = 3.2*t10144*t10401;
  t10419 = 3.2*t10068*t10207;
  t10424 = t10201*t10058;
  t10425 = t10037*t10205;
  t10429 = 3.2*t10213*t10401;
  t10453 = -0.24*t10033*t10004;
  t10454 = t10453 + t10421;
  t10431 = -1.*t10037*t10201;
  t10456 = 0.24*t10000*t10033;
  t10457 = t10456 + t10204;
  t10433 = -1.*t10205*t10399;
  t4154 = Power(t3874,2);
  t4545 = Power(t4469,2);
  t9852 = Power(t9849,2);
  t9921 = Power(t9920,2);
  t9986 = Power(t9985,2);
  t10022 = Power(t10021,2);
  t10072 = Power(t10068,2);
  t10092 = Power(t10091,2);
  t10102 = -6.8*t10101*t9875;
  t10103 = -6.8*t9849*t9875;
  t10107 = -3.2*t9920*t10106;
  t10110 = -3.2*t10109*t9985;
  t10122 = -6.8*t10121*t10028;
  t10126 = -6.8*t10021*t10028;
  t10149 = -3.2*t10068*t10144;
  t10158 = -3.2*t10157*t10091;
  t10159 = t10102 + t10103 + t10107 + t10110 + t10122 + t10126 + t10149 + t10158;
  t4269 = -12.*t4154;
  t4621 = -12.*t4545;
  t9881 = -6.8*t9876;
  t10286 = Power(t10109,2);
  t10288 = Power(t10106,2);
  t10030 = -6.8*t10029;
  t10305 = Power(t10157,2);
  t10307 = Power(t10144,2);
  t10283 = -1.*t3874*t9909;
  t10284 = t10282 + t10283;
  t10290 = -1.*t3874*t9973;
  t10291 = t10290 + t10105;
  t10302 = -1.*t3874*t10058;
  t10303 = t10301 + t10302;
  t10309 = -1.*t3874*t10084;
  t10310 = t10309 + t10137;
  t10285 = 3.2*t10284*t9920;
  t10287 = 3.2*t10286;
  t10289 = 3.2*t10288;
  t10292 = 3.2*t10291*t9985;
  t10304 = 3.2*t10303*t10068;
  t10306 = 3.2*t10305;
  t10308 = 3.2*t10307;
  t10311 = 3.2*t10310*t10091;
  t10312 = t10275 + t10276 + t10277 + t10281 + t10285 + t10287 + t10289 + t10292 + t10294 + t10295 + t10296 + t10300 + t10304 + t10306 + t10308 + t10311;
  t10160 = -2.88*t3874;
  t10530 = 0.748*t10280;
  t10541 = 13.6*t10101*t10280;
  t10346 = t10275 + t10276 + t10277 + t10281 + t10340 + t10341 + t10344 + t10345;
  t10550 = 6.8*t10280*t10165;
  t10352 = t10351*t9909;
  t10355 = t9973*t10180;
  t10356 = t10352 + t10353 + t10354 + t10355;
  t10359 = -1.*t9893*t10351;
  t10361 = -1.*t9909*t10180;
  t10363 = t10359 + t10360 + t10361 + t10362;
  t10559 = 0.768*t10241*t10343;
  t10372 = Power(t9885,2);
  t10373 = -0.24*t10372;
  t10374 = t10217 + t10373;
  t10560 = 3.2*t10224*t10106;
  t10368 = -1.*t10171*t9888;
  t10369 = 0.24*t9885*t9888;
  t10370 = t10368 + t10369;
  t10561 = 3.2*t10220*t10343;
  t10564 = 6.4*t10109*t10106;
  t10565 = 6.4*t10106*t10343;
  t10380 = t10340 + t10341 + t10344 + t10345;
  t10569 = 3.2*t10106*t10182;
  t10384 = t10383*t9909;
  t10387 = t9973*t10386;
  t10388 = t10384 + t10353 + t10354 + t10387;
  t10571 = 3.2*t10186*t10343;
  t10390 = -1.*t9893*t10383;
  t10391 = -1.*t9909*t10386;
  t10392 = t10390 + t10360 + t10391 + t10362;
  t10536 = 0.748*t10299;
  t10544 = 13.6*t10121*t10299;
  t10417 = t10294 + t10295 + t10296 + t10300 + t10411 + t10412 + t10415 + t10416;
  t10553 = 6.8*t10299*t10192;
  t10423 = t10422*t10058;
  t10426 = t10084*t10205;
  t10427 = t10423 + t10424 + t10425 + t10426;
  t10430 = -1.*t10037*t10422;
  t10432 = -1.*t10058*t10205;
  t10434 = t10430 + t10431 + t10432 + t10433;
  t10588 = 0.768*t10251*t10414;
  t10443 = Power(t10033,2);
  t10444 = -0.24*t10443;
  t10445 = t10229 + t10444;
  t10589 = 3.2*t10236*t10144;
  t10439 = -1.*t10198*t10035;
  t10440 = 0.24*t10033*t10035;
  t10441 = t10439 + t10440;
  t10590 = 3.2*t10232*t10414;
  t10593 = 6.4*t10157*t10144;
  t10594 = 6.4*t10144*t10414;
  t10451 = t10411 + t10412 + t10415 + t10416;
  t10598 = 3.2*t10144*t10207;
  t10455 = t10454*t10058;
  t10458 = t10084*t10457;
  t10459 = t10455 + t10424 + t10425 + t10458;
  t10600 = 3.2*t10213*t10414;
  t10461 = -1.*t10037*t10454;
  t10462 = -1.*t10058*t10457;
  t10463 = t10461 + t10431 + t10462 + t10433;
  t10477 = 6.8*t10101*t9875;
  t10478 = 6.8*t9849*t9875;
  t10479 = 3.2*t9920*t10106;
  t10480 = 3.2*t10109*t9985;
  t10481 = 6.8*t10121*t10028;
  t10482 = 6.8*t10021*t10028;
  t10483 = 3.2*t10068*t10144;
  t10484 = 3.2*t10157*t10091;
  t10485 = t10477 + t10478 + t10479 + t10480 + t10481 + t10482 + t10483 + t10484;
  t10468 = 12.*t4154;
  t10469 = 12.*t4545;
  t10316 = -2.88*t4469;
  t10318 = 3.2*t10109*t10182;
  t10319 = 3.2*t10106*t10186;
  t10321 = 3.2*t10157*t10207;
  t10322 = 3.2*t10144*t10213;
  t10323 = t10316 + t10317 + t10318 + t10319 + t10320 + t10321 + t10322;
  t10246 = 3.2*t10224*t10109;
  t10247 = 3.2*t10220*t10106;
  t10248 = t10245 + t10246 + t10247;
  t10256 = 3.2*t10236*t10157;
  t10257 = 3.2*t10232*t10144;
  t10258 = t10255 + t10256 + t10257;
  t10166 = -6.8*t9875*t10165;
  t10183 = -3.2*t9985*t10182;
  t10187 = -3.2*t9920*t10186;
  t10193 = -6.8*t10028*t10192;
  t10210 = -3.2*t10091*t10207;
  t10214 = -3.2*t10068*t10213;
  t10215 = t10160 + t10166 + t10183 + t10187 + t10193 + t10210 + t10214;
  t10511 = 2.88*t4469;
  t10512 = -6.8*t10101*t10165;
  t10513 = -3.2*t10109*t10182;
  t10514 = -3.2*t10106*t10186;
  t10515 = -6.8*t10121*t10192;
  t10516 = -3.2*t10157*t10207;
  t10517 = -3.2*t10144*t10213;
  t10518 = t10511 + t10512 + t10513 + t10514 + t10515 + t10516 + t10517;
  t10551 = 3.2*t10291*t10182;
  t10552 = 3.2*t10284*t10186;
  t10554 = 3.2*t10310*t10207;
  t10555 = 3.2*t10303*t10213;
  t10556 = t10160 + t10550 + t10551 + t10552 + t10553 + t10554 + t10555;
  t10645 = 0.4*t10168*t10280;
  t10646 = -0.4*t9849*t9888;
  t10647 = t9885*t10280;
  t10648 = t9849*t9888;
  t10649 = t10647 + t10648;
  t10650 = 0.8*t10649;
  t10651 = t10645 + t10646 + t10650;
  t10652 = -1.*var4[2]*t10651;
  t10653 = 0.4*t10168*t10101;
  t10654 = -0.4*t10280*t9888;
  t10655 = t9885*t10101;
  t10656 = t10280*t9888;
  t10657 = t10655 + t10656;
  t10658 = 0.8*t10657;
  t10659 = t10653 + t10654 + t10658;
  t10660 = -1.*var4[0]*t10659;
  t10570 = 3.2*t10106*t10356;
  t10572 = 3.2*t10109*t10363;
  t10573 = t10550 + t10569 + t10570 + t10571 + t10572;
  t10357 = 3.2*t9920*t10356;
  t10364 = 3.2*t9985*t10363;
  t10365 = t10317 + t10348 + t10357 + t10358 + t10364;
  t10583 = 3.2*t10106*t10388;
  t10584 = 3.2*t10109*t10392;
  t10585 = t10569 + t10583 + t10571 + t10584;
  t10389 = 3.2*t9920*t10388;
  t10393 = 3.2*t9985*t10392;
  t10394 = t10348 + t10389 + t10358 + t10393;
  t10599 = 3.2*t10144*t10427;
  t10601 = 3.2*t10157*t10434;
  t10602 = t10553 + t10598 + t10599 + t10600 + t10601;
  t10428 = 3.2*t10068*t10427;
  t10435 = 3.2*t10091*t10434;
  t10436 = t10320 + t10419 + t10428 + t10429 + t10435;
  t10612 = 3.2*t10144*t10459;
  t10613 = 3.2*t10157*t10463;
  t10614 = t10598 + t10612 + t10600 + t10613;
  t10460 = 3.2*t10068*t10459;
  t10464 = 3.2*t10091*t10463;
  t10465 = t10419 + t10460 + t10429 + t10464;
  t10486 = 2.88*t3874;
  t10487 = 6.8*t9875*t10165;
  t10488 = 3.2*t9985*t10182;
  t10489 = 3.2*t9920*t10186;
  t10490 = 6.8*t10028*t10192;
  t10491 = 3.2*t10091*t10207;
  t10492 = 3.2*t10068*t10213;
  t10493 = t10486 + t10487 + t10488 + t10489 + t10490 + t10491 + t10492;
  t10620 = Power(t10165,2);
  t10622 = Power(t10182,2);
  t10624 = Power(t10186,2);
  t10626 = Power(t10192,2);
  t10628 = Power(t10207,2);
  t10630 = Power(t10213,2);
  t10678 = 0.4*t10101*t9888;
  t10216 = -0.748*t9875;
  t10221 = -3.2*t10220*t9920;
  t10225 = -3.2*t10224*t9985;
  t10226 = t10216 + t10221 + t10225;
  t10519 = -0.748*t10101;
  t10520 = -3.2*t10224*t10109;
  t10521 = -3.2*t10220*t10106;
  t10522 = t10519 + t10520 + t10521;
  t10633 = -0.748*t10165;
  t10634 = -3.2*t10224*t10182;
  t10635 = -3.2*t10220*t10186;
  t10636 = -0.67 + t10633 + t10634 + t10635;
  t10531 = 3.2*t10220*t10284;
  t10532 = 3.2*t10224*t10291;
  t10533 = t10530 + t10531 + t10532;
  t10562 = t10530 + t10560 + t10561;
  t10334 = t10245 + t10332 + t10333;
  t10665 = 3.2*t10220*t10356;
  t10666 = 3.2*t10224*t10363;
  t10667 = t10665 + t10666;
  t10677 = -0.4*t9885*t10280;
  t10679 = -1.*t10101*t9888;
  t10680 = t10647 + t10679;
  t10681 = 0.8*t10680;
  t10682 = t10677 + t10678 + t10681;
  t10683 = -1.*var4[2]*t10682;
  t10684 = -0.4*t9885*t10101;
  t10685 = 0.4*t9875*t9888;
  t10686 = -1.*t9875*t9888;
  t10687 = t10655 + t10686;
  t10688 = 0.8*t10687;
  t10689 = t10684 + t10685 + t10688;
  t10690 = -1.*var4[0]*t10689;
  t10576 = 3.2*t10374*t10109;
  t10577 = 3.2*t10370*t10106;
  t10578 = t10576 + t10560 + t10577 + t10561;
  t10371 = 3.2*t10370*t9920;
  t10375 = 3.2*t10374*t9985;
  t10376 = t10332 + t10371 + t10375 + t10333;
  t10691 = 3.2*t10374*t10182;
  t10692 = 3.2*t10370*t10186;
  t10693 = 3.2*t10220*t10388;
  t10694 = 3.2*t10224*t10392;
  t10695 = t10691 + t10692 + t10693 + t10694;
  t10494 = 0.748*t9875;
  t10495 = 3.2*t10220*t9920;
  t10496 = 3.2*t10224*t9985;
  t10497 = t10494 + t10495 + t10496;
  t10737 = 0.748*t10165;
  t10738 = 3.2*t10224*t10182;
  t10739 = 3.2*t10220*t10186;
  t10740 = 0.67 + t10737 + t10738 + t10739;
  t10759 = Power(t10224,2);
  t10761 = Power(t10220,2);
  t10749 = -0.4*t10168*t9875;
  t10750 = t9885*t9875;
  t10751 = t10101*t9888;
  t10752 = t10750 + t10751;
  t10753 = -0.8*t10752;
  t10754 = t10749 + t10678 + t10753;
  t10755 = -0.4*t10168*t10101;
  t10756 = 0.4*t10280*t9888;
  t10757 = -0.8*t10657;
  t10758 = t10755 + t10756 + t10757;
  t10227 = -0.768*t9920;
  t10523 = -0.768*t10106;
  t10637 = -0.768*t10186;
  t10638 = -0.2 + t10637;
  t10764 = -0.768*t10220;
  t10765 = -0.2 + t10764;
  t10791 = 0.768*t10273*t10343;
  t10792 = 0.768*t10261*t10330;
  t10498 = 0.768*t9920;
  t10618 = 0.768*t10106;
  t10741 = 0.768*t10186;
  t10742 = 0.2 + t10741;
  t10785 = 0.768*t10220;
  t10786 = 0.2 + t10785;
  t10796 = 0.4*t9885*t9875;
  t10228 = -0.748*t10028;
  t10233 = -3.2*t10232*t10068;
  t10237 = -3.2*t10236*t10091;
  t10238 = t10228 + t10233 + t10237;
  t10524 = -0.748*t10121;
  t10525 = -3.2*t10236*t10157;
  t10526 = -3.2*t10232*t10144;
  t10527 = t10524 + t10525 + t10526;
  t10639 = -0.748*t10192;
  t10640 = -3.2*t10236*t10207;
  t10641 = -3.2*t10232*t10213;
  t10642 = -0.67 + t10639 + t10640 + t10641;
  t10537 = 3.2*t10232*t10303;
  t10538 = 3.2*t10236*t10310;
  t10539 = t10536 + t10537 + t10538;
  t10591 = t10536 + t10589 + t10590;
  t10405 = t10255 + t10403 + t10404;
  t10705 = 3.2*t10232*t10427;
  t10706 = 3.2*t10236*t10434;
  t10707 = t10705 + t10706;
  t10605 = 3.2*t10445*t10157;
  t10606 = 3.2*t10441*t10144;
  t10607 = t10605 + t10589 + t10606 + t10590;
  t10442 = 3.2*t10441*t10068;
  t10446 = 3.2*t10445*t10091;
  t10447 = t10403 + t10442 + t10446 + t10404;
  t10717 = 3.2*t10445*t10207;
  t10718 = 3.2*t10441*t10213;
  t10719 = 3.2*t10232*t10459;
  t10720 = 3.2*t10236*t10463;
  t10721 = t10717 + t10718 + t10719 + t10720;
  t10499 = 0.748*t10028;
  t10500 = 3.2*t10232*t10068;
  t10501 = 3.2*t10236*t10091;
  t10502 = t10499 + t10500 + t10501;
  t10743 = 0.748*t10192;
  t10744 = 3.2*t10236*t10207;
  t10745 = 3.2*t10232*t10213;
  t10746 = 0.67 + t10743 + t10744 + t10745;
  t10817 = Power(t10236,2);
  t10819 = Power(t10232,2);
  t10239 = -0.768*t10068;
  t10528 = -0.768*t10144;
  t10643 = -0.768*t10213;
  t10644 = -0.2 + t10643;
  t10822 = -0.768*t10232;
  t10823 = -0.2 + t10822;
  t10849 = 0.768*t10273*t10414;
  t10850 = 0.768*t10261*t10401;
  t10503 = 0.768*t10068;
  t10619 = 0.768*t10144;
  t10747 = 0.768*t10213;
  t10748 = 0.2 + t10747;
  t10843 = 0.768*t10232;
  t10844 = 0.2 + t10843;
  p_output1[0]=-6.8*t10022 + t10030 - 3.2*t10072 - 3.2*t10092 + t4269 + t4621 - 6.8*t9852 + t9881 - 3.2*t9921 - 3.2*t9986;
  p_output1[1]=t10159;
  p_output1[2]=t10215;
  p_output1[3]=t10226;
  p_output1[4]=t10227;
  p_output1[5]=t10238;
  p_output1[6]=t10239;
  p_output1[7]=0.768*t10106*t10241 + t10244*t10248 + 0.768*t10144*t10251 + t10254*t10258 + t10273*t10312 + t10315*t10323 + t10261*(6.4*t10068*t10144 + 6.4*t10091*t10157 + t10262 + t10263 + t10266 + t10267 + 6.4*t10106*t9920 + 6.4*t10109*t9985);
  p_output1[8]=t10331 + t10244*t10334 + t10261*(t10262 + t10263 + t10336 + t10337) + t10273*t10346 + t10315*t10365;
  p_output1[9]=t10331 + t10261*(t10336 + t10337) + t10244*t10376 + t10273*t10380 + t10315*t10394;
  p_output1[10]=t10402 + t10254*t10405 + t10261*(t10266 + t10267 + t10407 + t10408) + t10273*t10417 + t10315*t10436;
  p_output1[11]=t10402 + t10261*(t10407 + t10408) + t10254*t10447 + t10273*t10451 + t10315*t10465;
  p_output1[12]=6.8*t10022 + 3.2*t10072 + 3.2*t10092 + t10277 + t10296 + t10468 + t10469 + 6.8*t9852 + 3.2*t9921 + 3.2*t9986;
  p_output1[13]=t10485;
  p_output1[14]=t10493;
  p_output1[15]=t10497;
  p_output1[16]=t10498;
  p_output1[17]=t10502;
  p_output1[18]=t10503;
  p_output1[19]=-1.;
  p_output1[20]=t10159;
  p_output1[21]=t10030 - 6.8*t10274 - 3.2*t10286 - 3.2*t10288 - 6.8*t10293 - 3.2*t10305 - 3.2*t10307 + t4269 + t4621 + t9881;
  p_output1[22]=t10518;
  p_output1[23]=t10522;
  p_output1[24]=t10523;
  p_output1[25]=t10527;
  p_output1[26]=t10528;
  p_output1[27]=0.768*t10241*t10284 + 0.768*t10251*t10303 + t10261*t10312 + t10244*t10533 + t10254*t10539 + t10273*(t10262 + t10266 + 6.4*t10106*t10284 + 6.4*t10109*t10291 + 6.4*t10144*t10303 + 6.4*t10157*t10310 + t10541 + t10544) + t10315*t10556;
  p_output1[28]=t10261*t10346 + t10559 + t10244*t10562 + t10273*(t10262 + t10541 + t10564 + t10565) + t10315*t10573;
  p_output1[29]=t10261*t10380 + t10559 + t10273*(t10564 + t10565) + t10244*t10578 + t10315*t10585;
  p_output1[30]=t10261*t10417 + t10588 + t10254*t10591 + t10273*(t10266 + t10544 + t10593 + t10594) + t10315*t10602;
  p_output1[31]=t10261*t10451 + t10588 + t10273*(t10593 + t10594) + t10254*t10607 + t10315*t10614;
  p_output1[32]=t10485;
  p_output1[33]=t10275 + t10277 + t10287 + t10289 + t10294 + t10296 + t10306 + t10308 + t10468 + t10469;
  p_output1[34]=t10323;
  p_output1[35]=t10248;
  p_output1[36]=t10618;
  p_output1[37]=t10258;
  p_output1[38]=t10619;
  p_output1[39]=-1.;
  p_output1[40]=t10215;
  p_output1[41]=t10518;
  p_output1[42]=-3.3612 - 6.8*t10620 - 3.2*t10622 - 3.2*t10624 - 6.8*t10626 - 3.2*t10628 - 3.2*t10630;
  p_output1[43]=t10636;
  p_output1[44]=t10638;
  p_output1[45]=t10642;
  p_output1[46]=t10644;
  p_output1[47]=t10261*t10323 + t10273*t10556 + t10652 + t10660;
  p_output1[48]=0.768*t10241*t10356 + t10315*(6.4*t10186*t10356 + 6.4*t10182*t10363) + t10261*t10365 + t10273*t10573 + t10652 + t10660 + t10244*t10667;
  p_output1[49]=0.768*t10241*t10388 + t10315*(6.4*t10186*t10388 + 6.4*t10182*t10392) + t10261*t10394 + t10273*t10585 + t10683 + t10690 + t10244*t10695;
  p_output1[50]=0.768*t10251*t10427 + t10315*(6.4*t10213*t10427 + 6.4*t10207*t10434) + t10261*t10436 + t10273*t10602 + t10254*t10707;
  p_output1[51]=0.768*t10251*t10459 + t10315*(6.4*t10213*t10459 + 6.4*t10207*t10463) + t10261*t10465 + t10273*t10614 + t10254*t10721;
  p_output1[52]=t10493;
  p_output1[53]=t10323;
  p_output1[54]=3.3612 + 6.8*t10620 + 3.2*t10622 + 3.2*t10624 + 6.8*t10626 + 3.2*t10628 + 3.2*t10630;
  p_output1[55]=t10740;
  p_output1[56]=t10742;
  p_output1[57]=t10746;
  p_output1[58]=t10748;
  p_output1[59]=t10754;
  p_output1[60]=t10758;
  p_output1[61]=t10226;
  p_output1[62]=t10522;
  p_output1[63]=t10636;
  p_output1[64]=-1.58228 - 3.2*t10759 - 3.2*t10761;
  p_output1[65]=t10765;
  p_output1[66]=t10248*t10261 + t10273*t10533 + t10652 + t10660;
  p_output1[67]=t10261*t10334 + t10273*t10562 + t10652 + t10660 + t10315*t10667;
  p_output1[68]=0.768*t10241*t10370 + t10244*(6.4*t10220*t10370 + 6.4*t10224*t10374) + t10261*t10376 + t10273*t10578 + t10683 + t10690 + t10315*t10695;
  p_output1[69]=t10497;
  p_output1[70]=t10248;
  p_output1[71]=t10740;
  p_output1[72]=1.58228 + 3.2*t10759 + 3.2*t10761;
  p_output1[73]=t10786;
  p_output1[74]=t10754;
  p_output1[75]=t10758;
  p_output1[76]=t10227;
  p_output1[77]=t10523;
  p_output1[78]=t10638;
  p_output1[79]=t10765;
  p_output1[80]=-1.2143199999999998;
  p_output1[81]=0.768*t10106*t10261 + 0.768*t10273*t10284 + t10683 + t10690;
  p_output1[82]=0.768*t10315*t10356 + t10683 + t10690 + t10791 + t10792;
  p_output1[83]=0.768*t10244*t10370 + 0.768*t10315*t10388 + t10791 + t10792 - 1.*(t10685 + 0.4*t9849*t9885 + 0.8*(t10686 - 1.*t9849*t9885))*var4[0] - 1.*(t10678 + t10796 + 0.8*(t10679 - 1.*t9875*t9885))*var4[2];
  p_output1[84]=t10498;
  p_output1[85]=t10618;
  p_output1[86]=t10742;
  p_output1[87]=t10786;
  p_output1[88]=1.2143199999999998;
  p_output1[89]=t10646 + t10796 - 0.8*(t10750 - 1.*t9849*t9888);
  p_output1[90]=-0.8*t10687 + 0.4*t10101*t9885 - 0.4*t9875*t9888;
  p_output1[91]=t10238;
  p_output1[92]=t10527;
  p_output1[93]=t10642;
  p_output1[94]=-1.58228 - 3.2*t10817 - 3.2*t10819;
  p_output1[95]=t10823;
  p_output1[96]=t10258*t10261 + t10273*t10539;
  p_output1[97]=t10261*t10405 + t10273*t10591 + t10315*t10707;
  p_output1[98]=0.768*t10251*t10441 + t10254*(6.4*t10232*t10441 + 6.4*t10236*t10445) + t10261*t10447 + t10273*t10607 + t10315*t10721;
  p_output1[99]=t10502;
  p_output1[100]=t10258;
  p_output1[101]=t10746;
  p_output1[102]=1.58228 + 3.2*t10817 + 3.2*t10819;
  p_output1[103]=t10844;
  p_output1[104]=t10239;
  p_output1[105]=t10528;
  p_output1[106]=t10644;
  p_output1[107]=t10823;
  p_output1[108]=-1.2143199999999998;
  p_output1[109]=0.768*t10144*t10261 + 0.768*t10273*t10303;
  p_output1[110]=0.768*t10315*t10427 + t10849 + t10850;
  p_output1[111]=0.768*t10254*t10441 + 0.768*t10315*t10459 + t10849 + t10850;
  p_output1[112]=t10503;
  p_output1[113]=t10619;
  p_output1[114]=t10748;
  p_output1[115]=t10844;
  p_output1[116]=1.2143199999999998;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapleftLiftOff.hh"

namespace leftLiftOff
{

void J_dxDiscreteMapleftLiftOff_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
