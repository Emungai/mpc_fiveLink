/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:40:37 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t3297;
  double t6874;
  double t6914;
  double t6898;
  double t7255;
  double t7259;
  double t7315;
  double t7317;
  double t7320;
  double t7329;
  double t7330;
  double t7371;
  double t7384;
  double t7390;
  double t7399;
  double t7400;
  double t7420;
  double t7391;
  double t7394;
  double t7397;
  double t7256;
  double t7288;
  double t7295;
  double t7427;
  double t7443;
  double t7447;
  double t7649;
  double t7653;
  double t7670;
  double t7676;
  double t7692;
  double t7693;
  double t7695;
  double t7703;
  double t7704;
  double t7706;
  double t7707;
  double t7708;
  double t7715;
  double t7716;
  double t7717;
  double t7709;
  double t7711;
  double t7712;
  double t7671;
  double t7677;
  double t7683;
  double t7718;
  double t7719;
  double t7720;
  double t7176;
  double t7177;
  double t7178;
  double t7246;
  double t7247;
  double t7633;
  double t7398;
  double t7448;
  double t7449;
  double t7639;
  double t7640;
  double t7645;
  double t7656;
  double t7665;
  double t7666;
  double t7667;
  double t7668;
  double t7766;
  double t7713;
  double t7758;
  double t7763;
  double t7773;
  double t7774;
  double t7775;
  double t6894;
  double t7120;
  double t7169;
  double t7251;
  double t7322;
  double t7814;
  double t7815;
  double t7451;
  double t7821;
  double t7827;
  double t7828;
  double t7848;
  double t7850;
  double t7851;
  double t7781;
  double t7782;
  double t7783;
  double t7784;
  double t7634;
  double t7836;
  double t7837;
  double t7839;
  double t7841;
  double t7842;
  double t7788;
  double t7307;
  double t7323;
  double t7860;
  double t7861;
  double t7862;
  double t7863;
  double t7864;
  double t7820;
  double t7852;
  double t7853;
  double t7855;
  double t7856;
  double t7857;
  double t7859;
  double t7925;
  double t7926;
  double t7928;
  double t7929;
  double t7909;
  double t7927;
  double t7930;
  double t7931;
  double t7916;
  double t7917;
  double t7918;
  double t7933;
  double t7934;
  double t7935;
  double t7652;
  double t7654;
  double t7655;
  double t7669;
  double t7697;
  double t7949;
  double t7950;
  double t7765;
  double t7952;
  double t7956;
  double t7957;
  double t7964;
  double t7965;
  double t7966;
  double t7792;
  double t7793;
  double t7794;
  double t7795;
  double t7772;
  double t7958;
  double t7959;
  double t7960;
  double t7961;
  double t7962;
  double t7799;
  double t7684;
  double t7698;
  double t7973;
  double t7974;
  double t7975;
  double t7976;
  double t7977;
  double t7951;
  double t7967;
  double t7968;
  double t7969;
  double t7970;
  double t7971;
  double t7972;
  double t7991;
  double t7992;
  double t7994;
  double t7995;
  double t7981;
  double t7993;
  double t7996;
  double t7997;
  double t7983;
  double t7984;
  double t7985;
  double t7999;
  double t8000;
  double t8001;
  double t6802;
  double t7450;
  double t7648;
  double t7764;
  double t7777;
  double t7778;
  double t8011;
  double t8012;
  double t8013;
  double t8014;
  double t8015;
  double t8016;
  double t8017;
  double t8018;
  double t8019;
  double t8020;
  double t8021;
  double t8022;
  double t8023;
  double t8024;
  double t7847;
  double t7902;
  double t7907;
  double t7908;
  double t7910;
  double t7919;
  double t7921;
  double t7922;
  double t7923;
  double t7924;
  double t8034;
  double t8035;
  double t8036;
  double t8030;
  double t8031;
  double t8032;
  double t8033;
  double t8037;
  double t8038;
  double t8039;
  double t7785;
  double t8061;
  double t8062;
  double t7789;
  double t8044;
  double t8045;
  double t8046;
  double t8047;
  double t8048;
  double t8049;
  double t8050;
  double t8068;
  double t8069;
  double t8065;
  double t8041;
  double t8042;
  double t8043;
  double t8097;
  double t8098;
  double t8052;
  double t8053;
  double t8054;
  double t8055;
  double t8093;
  double t8094;
  double t8095;
  double t8096;
  double t8099;
  double t8100;
  double t8059;
  double t8060;
  double t8063;
  double t8066;
  double t8106;
  double t8107;
  double t8108;
  double t8109;
  double t8110;
  double t8111;
  double t8074;
  double t8076;
  double t8077;
  double t8144;
  double t8145;
  double t8146;
  double t8147;
  double t8148;
  double t8152;
  double t8153;
  double t8154;
  double t7932;
  double t7936;
  double t7937;
  double t7938;
  double t7939;
  double t7940;
  double t7941;
  double t7942;
  double t7943;
  double t7945;
  double t8101;
  double t8102;
  double t8103;
  double t8104;
  double t8105;
  double t8112;
  double t8113;
  double t8114;
  double t8115;
  double t8116;
  double t8117;
  double t8118;
  double t8119;
  double t8120;
  double t8121;
  double t8122;
  double t8123;
  double t8124;
  double t8125;
  double t8126;
  double t8127;
  double t8128;
  double t8129;
  double t8130;
  double t8131;
  double t8132;
  double t8133;
  double t8134;
  double t8135;
  double t8136;
  double t8137;
  double t8138;
  double t8139;
  double t8140;
  double t8141;
  double t8142;
  double t8143;
  double t8165;
  double t8166;
  double t8167;
  double t8175;
  double t8176;
  double t8177;
  double t8205;
  double t8206;
  double t8207;
  double t8211;
  double t8212;
  double t8213;
  double t8214;
  double t8215;
  double t7963;
  double t7978;
  double t7979;
  double t7980;
  double t7982;
  double t7986;
  double t7987;
  double t7988;
  double t7989;
  double t7990;
  double t8230;
  double t8231;
  double t8232;
  double t8226;
  double t8227;
  double t8228;
  double t8229;
  double t8233;
  double t8234;
  double t8235;
  double t7796;
  double t8257;
  double t8258;
  double t7801;
  double t8240;
  double t8241;
  double t8242;
  double t8243;
  double t8244;
  double t8245;
  double t8246;
  double t8264;
  double t8265;
  double t8261;
  double t8237;
  double t8238;
  double t8239;
  double t8293;
  double t8294;
  double t8248;
  double t8249;
  double t8250;
  double t8251;
  double t8289;
  double t8290;
  double t8291;
  double t8292;
  double t8295;
  double t8296;
  double t8255;
  double t8256;
  double t8259;
  double t8262;
  double t8302;
  double t8303;
  double t8304;
  double t8305;
  double t8306;
  double t8307;
  double t8270;
  double t8272;
  double t8273;
  double t8340;
  double t8341;
  double t8342;
  double t8343;
  double t8344;
  double t8348;
  double t8349;
  double t8350;
  double t7998;
  double t8002;
  double t8003;
  double t8004;
  double t8005;
  double t8006;
  double t8007;
  double t8008;
  double t8009;
  double t8010;
  double t8297;
  double t8298;
  double t8299;
  double t8300;
  double t8301;
  double t8308;
  double t8309;
  double t8310;
  double t8311;
  double t8312;
  double t8313;
  double t8314;
  double t8315;
  double t8316;
  double t8317;
  double t8318;
  double t8319;
  double t8320;
  double t8321;
  double t8322;
  double t8323;
  double t8324;
  double t8325;
  double t8326;
  double t8327;
  double t8328;
  double t8329;
  double t8330;
  double t8331;
  double t8332;
  double t8333;
  double t8334;
  double t8335;
  double t8336;
  double t8337;
  double t8338;
  double t8339;
  double t8361;
  double t8362;
  double t8363;
  double t8371;
  double t8372;
  double t8373;
  double t8401;
  double t8402;
  double t8403;
  double t8407;
  double t8408;
  double t8409;
  double t8410;
  double t8411;
  t3297 = Cos(var1[2]);
  t6874 = Cos(var1[3]);
  t6914 = Sin(var1[3]);
  t6898 = Sin(var1[2]);
  t7255 = Cos(var1[4]);
  t7259 = Sin(var1[4]);
  t7315 = t6874*t7255;
  t7317 = -1.*t6914*t7259;
  t7320 = t7315 + t7317;
  t7329 = -1.*t7255;
  t7330 = 1. + t7329;
  t7371 = 0.4*t7330;
  t7384 = 0.64*t7255;
  t7390 = t7371 + t7384;
  t7399 = -1.*t7255*t6914;
  t7400 = -1.*t6874*t7259;
  t7420 = t7399 + t7400;
  t7391 = t7390*t6914;
  t7394 = 0.24*t6874*t7259;
  t7397 = t7391 + t7394;
  t7256 = t7255*t6914;
  t7288 = t6874*t7259;
  t7295 = t7256 + t7288;
  t7427 = t6874*t7390;
  t7443 = -0.24*t6914*t7259;
  t7447 = t7427 + t7443;
  t7649 = Cos(var1[5]);
  t7653 = Sin(var1[5]);
  t7670 = Cos(var1[6]);
  t7676 = Sin(var1[6]);
  t7692 = t7649*t7670;
  t7693 = -1.*t7653*t7676;
  t7695 = t7692 + t7693;
  t7703 = -1.*t7670;
  t7704 = 1. + t7703;
  t7706 = 0.4*t7704;
  t7707 = 0.64*t7670;
  t7708 = t7706 + t7707;
  t7715 = -1.*t7670*t7653;
  t7716 = -1.*t7649*t7676;
  t7717 = t7715 + t7716;
  t7709 = t7708*t7653;
  t7711 = 0.24*t7649*t7676;
  t7712 = t7709 + t7711;
  t7671 = t7670*t7653;
  t7677 = t7649*t7676;
  t7683 = t7671 + t7677;
  t7718 = t7649*t7708;
  t7719 = -0.24*t7653*t7676;
  t7720 = t7718 + t7719;
  t7176 = Power(t6874,2);
  t7177 = 0.11*t7176;
  t7178 = Power(t6914,2);
  t7246 = 0.11*t7178;
  t7247 = t7177 + t7246;
  t7633 = -1.*t3297*t7320;
  t7398 = -1.*t7397*t7320;
  t7448 = -1.*t7420*t7447;
  t7449 = t7398 + t7448;
  t7639 = t7397*t7295;
  t7640 = t7320*t7447;
  t7645 = t7639 + t7640;
  t7656 = Power(t7649,2);
  t7665 = 0.11*t7656;
  t7666 = Power(t7653,2);
  t7667 = 0.11*t7666;
  t7668 = t7665 + t7667;
  t7766 = -1.*t3297*t7695;
  t7713 = -1.*t7712*t7695;
  t7758 = -1.*t7717*t7720;
  t7763 = t7713 + t7758;
  t7773 = t7712*t7683;
  t7774 = t7695*t7720;
  t7775 = t7773 + t7774;
  t6894 = -1.*t3297*t6874;
  t7120 = t6898*t6914;
  t7169 = t6894 + t7120;
  t7251 = -6.8*t7169*t7247;
  t7322 = -1.*t6898*t7320;
  t7814 = t3297*t7420;
  t7815 = t7814 + t7322;
  t7451 = -1.*t6898*t7420;
  t7821 = -1.*t7390*t6914;
  t7827 = -0.24*t6874*t7259;
  t7828 = t7821 + t7827;
  t7848 = -1.*t6874*t7255;
  t7850 = t6914*t7259;
  t7851 = t7848 + t7850;
  t7781 = t6874*t6898;
  t7782 = t3297*t6914;
  t7783 = t7781 + t7782;
  t7784 = -6.8*t7783*t7247;
  t7634 = t7451 + t7633;
  t7836 = t7828*t7320;
  t7837 = t7397*t7320;
  t7839 = t7420*t7447;
  t7841 = t7295*t7447;
  t7842 = t7836 + t7837 + t7839 + t7841;
  t7788 = -1.*t3297*t7420;
  t7307 = -1.*t3297*t7295;
  t7323 = t7307 + t7322;
  t7860 = -1.*t7420*t7828;
  t7861 = -1.*t7420*t7397;
  t7862 = -1.*t7320*t7447;
  t7863 = -1.*t7447*t7851;
  t7864 = t7860 + t7861 + t7862 + t7863;
  t7820 = -3.2*t7815*t7449;
  t7852 = t3297*t7851;
  t7853 = t7451 + t7852;
  t7855 = -3.2*t7645*t7853;
  t7856 = -1.*t6898*t7295;
  t7857 = t3297*t7320;
  t7859 = t7856 + t7857;
  t7925 = -0.24*t7255*t6914;
  t7926 = t7925 + t7827;
  t7928 = 0.24*t6874*t7255;
  t7929 = t7928 + t7443;
  t7909 = -3.2*t7634*t7449;
  t7927 = t7926*t7320;
  t7930 = t7295*t7929;
  t7931 = t7927 + t7837 + t7839 + t7930;
  t7916 = -1.*t6898*t7851;
  t7917 = t7788 + t7916;
  t7918 = -3.2*t7645*t7917;
  t7933 = -1.*t7420*t7926;
  t7934 = -1.*t7320*t7929;
  t7935 = t7933 + t7861 + t7934 + t7863;
  t7652 = -1.*t3297*t7649;
  t7654 = t6898*t7653;
  t7655 = t7652 + t7654;
  t7669 = -6.8*t7655*t7668;
  t7697 = -1.*t6898*t7695;
  t7949 = t3297*t7717;
  t7950 = t7949 + t7697;
  t7765 = -1.*t6898*t7717;
  t7952 = -1.*t7708*t7653;
  t7956 = -0.24*t7649*t7676;
  t7957 = t7952 + t7956;
  t7964 = -1.*t7649*t7670;
  t7965 = t7653*t7676;
  t7966 = t7964 + t7965;
  t7792 = t7649*t6898;
  t7793 = t3297*t7653;
  t7794 = t7792 + t7793;
  t7795 = -6.8*t7794*t7668;
  t7772 = t7765 + t7766;
  t7958 = t7957*t7695;
  t7959 = t7712*t7695;
  t7960 = t7717*t7720;
  t7961 = t7683*t7720;
  t7962 = t7958 + t7959 + t7960 + t7961;
  t7799 = -1.*t3297*t7717;
  t7684 = -1.*t3297*t7683;
  t7698 = t7684 + t7697;
  t7973 = -1.*t7717*t7957;
  t7974 = -1.*t7717*t7712;
  t7975 = -1.*t7695*t7720;
  t7976 = -1.*t7720*t7966;
  t7977 = t7973 + t7974 + t7975 + t7976;
  t7951 = -3.2*t7950*t7763;
  t7967 = t3297*t7966;
  t7968 = t7765 + t7967;
  t7969 = -3.2*t7775*t7968;
  t7970 = -1.*t6898*t7683;
  t7971 = t3297*t7695;
  t7972 = t7970 + t7971;
  t7991 = -0.24*t7670*t7653;
  t7992 = t7991 + t7956;
  t7994 = 0.24*t7649*t7670;
  t7995 = t7994 + t7719;
  t7981 = -3.2*t7772*t7763;
  t7993 = t7992*t7695;
  t7996 = t7683*t7995;
  t7997 = t7993 + t7959 + t7960 + t7996;
  t7983 = -1.*t6898*t7966;
  t7984 = t7799 + t7983;
  t7985 = -3.2*t7775*t7984;
  t7999 = -1.*t7717*t7992;
  t8000 = -1.*t7695*t7995;
  t8001 = t7999 + t7974 + t8000 + t7976;
  t6802 = 2.88*t3297;
  t7450 = -3.2*t7323*t7449;
  t7648 = -3.2*t7634*t7645;
  t7764 = -3.2*t7698*t7763;
  t7777 = -3.2*t7772*t7775;
  t7778 = t6802 + t7251 + t7450 + t7648 + t7669 + t7764 + t7777;
  t8011 = 2.88*t6898;
  t8012 = -1.*t6874*t6898;
  t8013 = -1.*t3297*t6914;
  t8014 = t8012 + t8013;
  t8015 = -6.8*t8014*t7247;
  t8016 = -3.2*t7859*t7449;
  t8017 = -3.2*t7815*t7645;
  t8018 = -1.*t7649*t6898;
  t8019 = -1.*t3297*t7653;
  t8020 = t8018 + t8019;
  t8021 = -6.8*t8020*t7668;
  t8022 = -3.2*t7972*t7763;
  t8023 = -3.2*t7950*t7775;
  t8024 = t8011 + t8015 + t8016 + t8017 + t8021 + t8022 + t8023;
  t7847 = -3.2*t7815*t7842;
  t7902 = -3.2*t7859*t7864;
  t7907 = t7251 + t7820 + t7847 + t7855 + t7902;
  t7908 = -0.5*var2[0]*t7907;
  t7910 = -3.2*t7634*t7842;
  t7919 = -3.2*t7323*t7864;
  t7921 = t7784 + t7909 + t7910 + t7918 + t7919;
  t7922 = -0.5*var2[1]*t7921;
  t7923 = t7908 + t7922;
  t7924 = var2[2]*t7923;
  t8034 = -1.*t6874*t7390;
  t8035 = 0.24*t6914*t7259;
  t8036 = t8034 + t8035;
  t8030 = 2.*t7420*t7828;
  t8031 = t7420*t7397;
  t8032 = t7828*t7295;
  t8033 = 2.*t7320*t7447;
  t8037 = t7320*t8036;
  t8038 = t7447*t7851;
  t8039 = t8030 + t8031 + t8032 + t8033 + t8037 + t8038;
  t7785 = t6898*t7295;
  t8061 = t6898*t7851;
  t8062 = t7814 + t8061;
  t7789 = t6898*t7320;
  t8044 = -1.*t7828*t7320;
  t8045 = -2.*t7420*t7447;
  t8046 = -1.*t7295*t7447;
  t8047 = -1.*t7420*t8036;
  t8048 = -2.*t7828*t7851;
  t8049 = -1.*t7397*t7851;
  t8050 = t8044 + t8045 + t8046 + t8047 + t8048 + t8049;
  t8068 = t6898*t7420;
  t8069 = t8068 + t7857;
  t8065 = t3297*t7295;
  t8041 = t7390*t7259;
  t8042 = -0.24*t7255*t7259;
  t8043 = t8041 + t8042;
  t8097 = -0.24*t6874*t7255;
  t8098 = t8097 + t8035;
  t8052 = t7390*t7255;
  t8053 = Power(t7259,2);
  t8054 = 0.24*t8053;
  t8055 = t8052 + t8054;
  t8093 = t7420*t7828;
  t8094 = t7420*t7926;
  t8095 = t7926*t7295;
  t8096 = t7320*t7929;
  t8099 = t7320*t8098;
  t8100 = t8093 + t8094 + t8031 + t8095 + t7640 + t8096 + t8099 + t8038;
  t8059 = t7785 + t7852;
  t8060 = -3.2*t7645*t8059;
  t8063 = -3.2*t7449*t8062;
  t8066 = t8065 + t7789;
  t8106 = -1.*t7926*t7320;
  t8107 = -1.*t7420*t7929;
  t8108 = -1.*t7420*t8098;
  t8109 = -1.*t7828*t7851;
  t8110 = -1.*t7926*t7851;
  t8111 = t8106 + t7448 + t8046 + t8107 + t8108 + t8109 + t8110 + t8049;
  t8074 = -3.2*t7449*t7853;
  t8076 = t8065 + t7916;
  t8077 = -3.2*t7645*t8076;
  t8144 = -3.2*t8069*t7449;
  t8145 = -3.2*t8069*t7842;
  t8146 = -3.2*t7645*t8062;
  t8147 = -3.2*t8066*t7864;
  t8148 = t8015 + t8144 + t8145 + t8146 + t8147;
  t8152 = -3.2*t8055*t7842;
  t8153 = -3.2*t8043*t7864;
  t8154 = t8152 + t8153;
  t7932 = -3.2*t7815*t7931;
  t7936 = -3.2*t7859*t7935;
  t7937 = t7820 + t7932 + t7855 + t7936;
  t7938 = -0.5*var2[0]*t7937;
  t7939 = -3.2*t7634*t7931;
  t7940 = -3.2*t7323*t7935;
  t7941 = t7909 + t7939 + t7918 + t7940;
  t7942 = -0.5*var2[1]*t7941;
  t7943 = t7938 + t7942;
  t7945 = var2[2]*t7943;
  t8101 = 0.384*var2[4]*t8100;
  t8102 = -1.*t7390*t7259;
  t8103 = 0.24*t7255*t7259;
  t8104 = t8102 + t8103;
  t8105 = -3.2*t8104*t7842;
  t8112 = -3.2*t8043*t8111;
  t8113 = Power(t7255,2);
  t8114 = -0.24*t8113;
  t8115 = t8052 + t8114;
  t8116 = -3.2*t8115*t7864;
  t8117 = -3.2*t8055*t8100;
  t8118 = t8105 + t8112 + t8116 + t8117;
  t8119 = -0.5*var2[3]*t8118;
  t8120 = -3.2*t7842*t8062;
  t8121 = -3.2*t7931*t8062;
  t8122 = -3.2*t8066*t8111;
  t8123 = -3.2*t8069*t7864;
  t8124 = -3.2*t8069*t7935;
  t8125 = -3.2*t8069*t8100;
  t8126 = t8060 + t8063 + t8120 + t8121 + t8122 + t8123 + t8124 + t8125;
  t8127 = -0.5*var2[0]*t8126;
  t8128 = -3.2*t7842*t7853;
  t8129 = -3.2*t7931*t7853;
  t8130 = -3.2*t7859*t8111;
  t8131 = -3.2*t7815*t7864;
  t8132 = -3.2*t7815*t7935;
  t8133 = -3.2*t7815*t8100;
  t8134 = t8074 + t8128 + t8129 + t8077 + t8130 + t8131 + t8132 + t8133;
  t8135 = -0.5*var2[1]*t8134;
  t8136 = -6.4*t7842*t7931;
  t8137 = -6.4*t7449*t8111;
  t8138 = -6.4*t7864*t7935;
  t8139 = -6.4*t7645*t8100;
  t8140 = t8136 + t8137 + t8138 + t8139;
  t8141 = -0.5*var2[2]*t8140;
  t8142 = t8101 + t8119 + t8127 + t8135 + t8141;
  t8143 = var2[2]*t8142;
  t8165 = 2.*t7420*t7926;
  t8166 = 2.*t7320*t7929;
  t8167 = t8165 + t8031 + t8095 + t8166 + t8099 + t8038;
  t8175 = -2.*t7420*t7929;
  t8176 = -2.*t7926*t7851;
  t8177 = t8106 + t8046 + t8175 + t8108 + t8176 + t8049;
  t8205 = -3.2*t8069*t7931;
  t8206 = -3.2*t8066*t7935;
  t8207 = t8144 + t8205 + t8146 + t8206;
  t8211 = -3.2*t8115*t7449;
  t8212 = -3.2*t8104*t7645;
  t8213 = -3.2*t8055*t7931;
  t8214 = -3.2*t8043*t7935;
  t8215 = t8211 + t8212 + t8213 + t8214;
  t7963 = -3.2*t7950*t7962;
  t7978 = -3.2*t7972*t7977;
  t7979 = t7669 + t7951 + t7963 + t7969 + t7978;
  t7980 = -0.5*var2[0]*t7979;
  t7982 = -3.2*t7772*t7962;
  t7986 = -3.2*t7698*t7977;
  t7987 = t7795 + t7981 + t7982 + t7985 + t7986;
  t7988 = -0.5*var2[1]*t7987;
  t7989 = t7980 + t7988;
  t7990 = var2[2]*t7989;
  t8230 = -1.*t7649*t7708;
  t8231 = 0.24*t7653*t7676;
  t8232 = t8230 + t8231;
  t8226 = 2.*t7717*t7957;
  t8227 = t7717*t7712;
  t8228 = t7957*t7683;
  t8229 = 2.*t7695*t7720;
  t8233 = t7695*t8232;
  t8234 = t7720*t7966;
  t8235 = t8226 + t8227 + t8228 + t8229 + t8233 + t8234;
  t7796 = t6898*t7683;
  t8257 = t6898*t7966;
  t8258 = t7949 + t8257;
  t7801 = t6898*t7695;
  t8240 = -1.*t7957*t7695;
  t8241 = -2.*t7717*t7720;
  t8242 = -1.*t7683*t7720;
  t8243 = -1.*t7717*t8232;
  t8244 = -2.*t7957*t7966;
  t8245 = -1.*t7712*t7966;
  t8246 = t8240 + t8241 + t8242 + t8243 + t8244 + t8245;
  t8264 = t6898*t7717;
  t8265 = t8264 + t7971;
  t8261 = t3297*t7683;
  t8237 = t7708*t7676;
  t8238 = -0.24*t7670*t7676;
  t8239 = t8237 + t8238;
  t8293 = -0.24*t7649*t7670;
  t8294 = t8293 + t8231;
  t8248 = t7708*t7670;
  t8249 = Power(t7676,2);
  t8250 = 0.24*t8249;
  t8251 = t8248 + t8250;
  t8289 = t7717*t7957;
  t8290 = t7717*t7992;
  t8291 = t7992*t7683;
  t8292 = t7695*t7995;
  t8295 = t7695*t8294;
  t8296 = t8289 + t8290 + t8227 + t8291 + t7774 + t8292 + t8295 + t8234;
  t8255 = t7796 + t7967;
  t8256 = -3.2*t7775*t8255;
  t8259 = -3.2*t7763*t8258;
  t8262 = t8261 + t7801;
  t8302 = -1.*t7992*t7695;
  t8303 = -1.*t7717*t7995;
  t8304 = -1.*t7717*t8294;
  t8305 = -1.*t7957*t7966;
  t8306 = -1.*t7992*t7966;
  t8307 = t8302 + t7758 + t8242 + t8303 + t8304 + t8305 + t8306 + t8245;
  t8270 = -3.2*t7763*t7968;
  t8272 = t8261 + t7983;
  t8273 = -3.2*t7775*t8272;
  t8340 = -3.2*t8265*t7763;
  t8341 = -3.2*t8265*t7962;
  t8342 = -3.2*t7775*t8258;
  t8343 = -3.2*t8262*t7977;
  t8344 = t8021 + t8340 + t8341 + t8342 + t8343;
  t8348 = -3.2*t8251*t7962;
  t8349 = -3.2*t8239*t7977;
  t8350 = t8348 + t8349;
  t7998 = -3.2*t7950*t7997;
  t8002 = -3.2*t7972*t8001;
  t8003 = t7951 + t7998 + t7969 + t8002;
  t8004 = -0.5*var2[0]*t8003;
  t8005 = -3.2*t7772*t7997;
  t8006 = -3.2*t7698*t8001;
  t8007 = t7981 + t8005 + t7985 + t8006;
  t8008 = -0.5*var2[1]*t8007;
  t8009 = t8004 + t8008;
  t8010 = var2[2]*t8009;
  t8297 = 0.384*var2[6]*t8296;
  t8298 = -1.*t7708*t7676;
  t8299 = 0.24*t7670*t7676;
  t8300 = t8298 + t8299;
  t8301 = -3.2*t8300*t7962;
  t8308 = -3.2*t8239*t8307;
  t8309 = Power(t7670,2);
  t8310 = -0.24*t8309;
  t8311 = t8248 + t8310;
  t8312 = -3.2*t8311*t7977;
  t8313 = -3.2*t8251*t8296;
  t8314 = t8301 + t8308 + t8312 + t8313;
  t8315 = -0.5*var2[5]*t8314;
  t8316 = -3.2*t7962*t8258;
  t8317 = -3.2*t7997*t8258;
  t8318 = -3.2*t8262*t8307;
  t8319 = -3.2*t8265*t7977;
  t8320 = -3.2*t8265*t8001;
  t8321 = -3.2*t8265*t8296;
  t8322 = t8256 + t8259 + t8316 + t8317 + t8318 + t8319 + t8320 + t8321;
  t8323 = -0.5*var2[0]*t8322;
  t8324 = -3.2*t7962*t7968;
  t8325 = -3.2*t7997*t7968;
  t8326 = -3.2*t7972*t8307;
  t8327 = -3.2*t7950*t7977;
  t8328 = -3.2*t7950*t8001;
  t8329 = -3.2*t7950*t8296;
  t8330 = t8270 + t8324 + t8325 + t8273 + t8326 + t8327 + t8328 + t8329;
  t8331 = -0.5*var2[1]*t8330;
  t8332 = -6.4*t7962*t7997;
  t8333 = -6.4*t7763*t8307;
  t8334 = -6.4*t7977*t8001;
  t8335 = -6.4*t7775*t8296;
  t8336 = t8332 + t8333 + t8334 + t8335;
  t8337 = -0.5*var2[2]*t8336;
  t8338 = t8297 + t8315 + t8323 + t8331 + t8337;
  t8339 = var2[2]*t8338;
  t8361 = 2.*t7717*t7992;
  t8362 = 2.*t7695*t7995;
  t8363 = t8361 + t8227 + t8291 + t8362 + t8295 + t8234;
  t8371 = -2.*t7717*t7995;
  t8372 = -2.*t7992*t7966;
  t8373 = t8302 + t8242 + t8371 + t8304 + t8372 + t8245;
  t8401 = -3.2*t8265*t7997;
  t8402 = -3.2*t8262*t8001;
  t8403 = t8340 + t8401 + t8342 + t8402;
  t8407 = -3.2*t8311*t7763;
  t8408 = -3.2*t8300*t7775;
  t8409 = -3.2*t8251*t7997;
  t8410 = -3.2*t8239*t8001;
  t8411 = t8407 + t8408 + t8409 + t8410;
  p_output1[0]=(-0.5*t7778*var2[0] - 0.5*(-2.88*t6898 + t7784 - 3.2*t7449*(t7633 + t7785) - 3.2*t7645*(t7788 + t7789) + t7795 - 3.2*t7763*(t7766 + t7796) - 3.2*t7775*(t7799 + t7801))*var2[1])*var2[2];
  p_output1[1]=t7924;
  p_output1[2]=t7945;
  p_output1[3]=t7990;
  p_output1[4]=t8010;
  p_output1[5]=-0.5*t8024*var2[2];
  p_output1[6]=-0.5*t7778*var2[2];
  p_output1[7]=-0.5*t8024*var2[0] - 0.5*t7778*var2[1];
  p_output1[8]=t7924;
  p_output1[9]=var2[2]*(-0.5*(t7251 + t8060 - 6.4*t7842*t8062 + t8063 - 3.2*t8050*t8066 - 6.4*t7864*t8069 - 3.2*t8039*t8069)*var2[0] - 0.5*(t7784 - 6.4*t7842*t7853 - 6.4*t7815*t7864 - 3.2*t7815*t8039 - 3.2*t7859*t8050 + t8074 + t8077)*var2[1] - 0.5*(-6.4*Power(t7842,2) - 6.4*Power(t7864,2) - 6.4*t7645*t8039 - 6.4*t7449*t8050)*var2[2] - 0.5*(-3.2*t8043*t8050 - 3.2*t8039*t8055)*var2[3] + 0.384*t8039*var2[4]);
  p_output1[10]=t8143;
  p_output1[11]=-0.5*t8148*var2[2];
  p_output1[12]=-0.5*t7907*var2[2];
  p_output1[13]=-0.5*t8148*var2[0] - 0.5*t7907*var2[1] - 1.*(-6.4*t7645*t7842 - 6.4*t7449*t7864)*var2[2] - 0.5*t8154*var2[3] + 0.384*t7842*var2[4];
  p_output1[14]=-0.5*t8154*var2[2];
  p_output1[15]=0.384*t7842*var2[2];
  p_output1[16]=t7945;
  p_output1[17]=t8143;
  p_output1[18]=var2[2]*(-0.5*(t8060 - 6.4*t7931*t8062 + t8063 - 6.4*t7935*t8069 - 3.2*t8069*t8167 - 3.2*t8066*t8177)*var2[0] - 0.5*(-6.4*t7853*t7931 - 6.4*t7815*t7935 + t8074 + t8077 - 3.2*t7815*t8167 - 3.2*t7859*t8177)*var2[1] - 0.5*(-6.4*Power(t7931,2) - 6.4*Power(t7935,2) - 6.4*t7645*t8167 - 6.4*t7449*t8177)*var2[2] - 0.5*(-3.2*t7449*t8104 - 6.4*t7931*t8104 - 3.2*t7645*(-1.*t7255*t7390 + 0.24*t8113) - 6.4*t7935*t8115 - 3.2*t8055*t8167 - 3.2*t8043*t8177)*var2[3] + 0.384*t8167*var2[4]);
  p_output1[19]=-0.5*t8207*var2[2];
  p_output1[20]=-0.5*t7937*var2[2];
  p_output1[21]=-0.5*t8207*var2[0] - 0.5*t7937*var2[1] - 1.*(-6.4*t7645*t7931 - 6.4*t7449*t7935)*var2[2] - 0.5*t8215*var2[3] + 0.384*t7931*var2[4];
  p_output1[22]=-0.5*t8215*var2[2];
  p_output1[23]=0.384*t7931*var2[2];
  p_output1[24]=t7990;
  p_output1[25]=var2[2]*(-0.5*(t7669 + t8256 - 6.4*t7962*t8258 + t8259 - 3.2*t8246*t8262 - 6.4*t7977*t8265 - 3.2*t8235*t8265)*var2[0] - 0.5*(t7795 - 6.4*t7962*t7968 - 6.4*t7950*t7977 - 3.2*t7950*t8235 - 3.2*t7972*t8246 + t8270 + t8273)*var2[1] - 0.5*(-6.4*Power(t7962,2) - 6.4*Power(t7977,2) - 6.4*t7775*t8235 - 6.4*t7763*t8246)*var2[2] - 0.5*(-3.2*t8239*t8246 - 3.2*t8235*t8251)*var2[5] + 0.384*t8235*var2[6]);
  p_output1[26]=t8339;
  p_output1[27]=-0.5*t8344*var2[2];
  p_output1[28]=-0.5*t7979*var2[2];
  p_output1[29]=-0.5*t8344*var2[0] - 0.5*t7979*var2[1] - 1.*(-6.4*t7775*t7962 - 6.4*t7763*t7977)*var2[2] - 0.5*t8350*var2[5] + 0.384*t7962*var2[6];
  p_output1[30]=-0.5*t8350*var2[2];
  p_output1[31]=0.384*t7962*var2[2];
  p_output1[32]=t8010;
  p_output1[33]=t8339;
  p_output1[34]=var2[2]*(-0.5*(t8256 - 6.4*t7997*t8258 + t8259 - 6.4*t8001*t8265 - 3.2*t8265*t8363 - 3.2*t8262*t8373)*var2[0] - 0.5*(-6.4*t7968*t7997 - 6.4*t7950*t8001 + t8270 + t8273 - 3.2*t7950*t8363 - 3.2*t7972*t8373)*var2[1] - 0.5*(-6.4*Power(t7997,2) - 6.4*Power(t8001,2) - 6.4*t7775*t8363 - 6.4*t7763*t8373)*var2[2] - 0.5*(-3.2*t7763*t8300 - 6.4*t7997*t8300 - 3.2*t7775*(-1.*t7670*t7708 + 0.24*t8309) - 6.4*t8001*t8311 - 3.2*t8251*t8363 - 3.2*t8239*t8373)*var2[5] + 0.384*t8363*var2[6]);
  p_output1[35]=-0.5*t8403*var2[2];
  p_output1[36]=-0.5*t8003*var2[2];
  p_output1[37]=-0.5*t8403*var2[0] - 0.5*t8003*var2[1] - 1.*(-6.4*t7775*t7997 - 6.4*t7763*t8001)*var2[2] - 0.5*t8411*var2[5] + 0.384*t7997*var2[6];
  p_output1[38]=-0.5*t8411*var2[2];
  p_output1[39]=0.384*t7997*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec3_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce3_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
