/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:21:11 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t148;
  double t283;
  double t300;
  double t297;
  double t430;
  double t443;
  double t461;
  double t464;
  double t479;
  double t488;
  double t524;
  double t526;
  double t542;
  double t551;
  double t2726;
  double t2762;
  double t3185;
  double t552;
  double t578;
  double t579;
  double t438;
  double t444;
  double t448;
  double t3192;
  double t3231;
  double t4389;
  double t6714;
  double t6733;
  double t7068;
  double t7413;
  double t7425;
  double t7428;
  double t7429;
  double t7434;
  double t7435;
  double t7436;
  double t7445;
  double t7446;
  double t7451;
  double t7456;
  double t7457;
  double t7447;
  double t7448;
  double t7449;
  double t7073;
  double t7414;
  double t7419;
  double t7463;
  double t7464;
  double t7472;
  double t389;
  double t407;
  double t408;
  double t409;
  double t410;
  double t4518;
  double t2613;
  double t4453;
  double t4466;
  double t4747;
  double t4824;
  double t6639;
  double t6808;
  double t6830;
  double t7061;
  double t7065;
  double t7066;
  double t7483;
  double t7450;
  double t7473;
  double t7475;
  double t7486;
  double t7487;
  double t7488;
  double t296;
  double t343;
  double t354;
  double t428;
  double t483;
  double t7568;
  double t7569;
  double t4491;
  double t7571;
  double t7572;
  double t7573;
  double t7581;
  double t7585;
  double t7586;
  double t7495;
  double t7496;
  double t7497;
  double t7498;
  double t4567;
  double t7574;
  double t7575;
  double t7576;
  double t7577;
  double t7578;
  double t7543;
  double t449;
  double t484;
  double t7600;
  double t7601;
  double t7607;
  double t7608;
  double t7616;
  double t7570;
  double t7587;
  double t7588;
  double t7592;
  double t7593;
  double t7594;
  double t7595;
  double t7639;
  double t7640;
  double t7642;
  double t7643;
  double t7622;
  double t7641;
  double t7644;
  double t7682;
  double t7628;
  double t7630;
  double t7631;
  double t7688;
  double t7689;
  double t7690;
  double t6731;
  double t6736;
  double t6761;
  double t7067;
  double t7432;
  double t7706;
  double t7707;
  double t7478;
  double t7709;
  double t7710;
  double t7711;
  double t7718;
  double t7719;
  double t7720;
  double t7552;
  double t7553;
  double t7554;
  double t7555;
  double t7484;
  double t7712;
  double t7713;
  double t7714;
  double t7715;
  double t7716;
  double t7560;
  double t7420;
  double t7433;
  double t7731;
  double t7732;
  double t7736;
  double t7737;
  double t7738;
  double t7708;
  double t7721;
  double t7722;
  double t7723;
  double t7725;
  double t7729;
  double t7730;
  double t7752;
  double t7753;
  double t7755;
  double t7756;
  double t7742;
  double t7754;
  double t7757;
  double t7758;
  double t7744;
  double t7745;
  double t7746;
  double t7760;
  double t7761;
  double t7762;
  double t183;
  double t4490;
  double t6688;
  double t7477;
  double t7489;
  double t7491;
  double t7772;
  double t7773;
  double t7774;
  double t7775;
  double t7776;
  double t7777;
  double t7778;
  double t7779;
  double t7780;
  double t7781;
  double t7782;
  double t7783;
  double t7784;
  double t7785;
  double t7579;
  double t7617;
  double t7619;
  double t7621;
  double t7627;
  double t7632;
  double t7633;
  double t7635;
  double t7636;
  double t7637;
  double t7795;
  double t7796;
  double t7797;
  double t7791;
  double t7792;
  double t7793;
  double t7794;
  double t7798;
  double t7799;
  double t7800;
  double t7499;
  double t7822;
  double t7823;
  double t7544;
  double t7805;
  double t7806;
  double t7807;
  double t7808;
  double t7809;
  double t7810;
  double t7811;
  double t7829;
  double t7830;
  double t7826;
  double t7802;
  double t7803;
  double t7804;
  double t7858;
  double t7859;
  double t7813;
  double t7814;
  double t7815;
  double t7816;
  double t7854;
  double t7855;
  double t7856;
  double t7857;
  double t7860;
  double t7861;
  double t7820;
  double t7821;
  double t7824;
  double t7827;
  double t7867;
  double t7868;
  double t7869;
  double t7870;
  double t7871;
  double t7872;
  double t7835;
  double t7837;
  double t7838;
  double t7905;
  double t7906;
  double t7907;
  double t7908;
  double t7909;
  double t7913;
  double t7914;
  double t7915;
  double t7687;
  double t7696;
  double t7697;
  double t7698;
  double t7699;
  double t7701;
  double t7702;
  double t7703;
  double t7704;
  double t7705;
  double t7862;
  double t7863;
  double t7864;
  double t7865;
  double t7866;
  double t7873;
  double t7874;
  double t7875;
  double t7876;
  double t7877;
  double t7878;
  double t7879;
  double t7880;
  double t7881;
  double t7882;
  double t7883;
  double t7884;
  double t7885;
  double t7886;
  double t7887;
  double t7888;
  double t7889;
  double t7890;
  double t7891;
  double t7892;
  double t7893;
  double t7894;
  double t7895;
  double t7896;
  double t7897;
  double t7898;
  double t7899;
  double t7900;
  double t7901;
  double t7902;
  double t7903;
  double t7904;
  double t7926;
  double t7927;
  double t7928;
  double t7936;
  double t7937;
  double t7938;
  double t7966;
  double t7967;
  double t7968;
  double t7972;
  double t7973;
  double t7974;
  double t7975;
  double t7976;
  double t7717;
  double t7739;
  double t7740;
  double t7741;
  double t7743;
  double t7747;
  double t7748;
  double t7749;
  double t7750;
  double t7751;
  double t7991;
  double t7992;
  double t7993;
  double t7987;
  double t7988;
  double t7989;
  double t7990;
  double t7994;
  double t7995;
  double t7996;
  double t7557;
  double t8018;
  double t8019;
  double t7561;
  double t8001;
  double t8002;
  double t8003;
  double t8004;
  double t8005;
  double t8006;
  double t8007;
  double t8025;
  double t8026;
  double t8022;
  double t7998;
  double t7999;
  double t8000;
  double t8054;
  double t8055;
  double t8009;
  double t8010;
  double t8011;
  double t8012;
  double t8050;
  double t8051;
  double t8052;
  double t8053;
  double t8056;
  double t8057;
  double t8016;
  double t8017;
  double t8020;
  double t8023;
  double t8063;
  double t8064;
  double t8065;
  double t8066;
  double t8067;
  double t8068;
  double t8031;
  double t8033;
  double t8034;
  double t8101;
  double t8102;
  double t8103;
  double t8104;
  double t8105;
  double t8109;
  double t8110;
  double t8111;
  double t7759;
  double t7763;
  double t7764;
  double t7765;
  double t7766;
  double t7767;
  double t7768;
  double t7769;
  double t7770;
  double t7771;
  double t8058;
  double t8059;
  double t8060;
  double t8061;
  double t8062;
  double t8069;
  double t8070;
  double t8071;
  double t8072;
  double t8073;
  double t8074;
  double t8075;
  double t8076;
  double t8077;
  double t8078;
  double t8079;
  double t8080;
  double t8081;
  double t8082;
  double t8083;
  double t8084;
  double t8085;
  double t8086;
  double t8087;
  double t8088;
  double t8089;
  double t8090;
  double t8091;
  double t8092;
  double t8093;
  double t8094;
  double t8095;
  double t8096;
  double t8097;
  double t8098;
  double t8099;
  double t8100;
  double t8122;
  double t8123;
  double t8124;
  double t8132;
  double t8133;
  double t8134;
  double t8162;
  double t8163;
  double t8164;
  double t8168;
  double t8169;
  double t8170;
  double t8171;
  double t8172;
  t148 = Cos(var1[2]);
  t283 = Cos(var1[3]);
  t300 = Sin(var1[3]);
  t297 = Sin(var1[2]);
  t430 = Cos(var1[4]);
  t443 = Sin(var1[4]);
  t461 = t283*t430;
  t464 = -1.*t300*t443;
  t479 = t461 + t464;
  t488 = -1.*t430;
  t524 = 1. + t488;
  t526 = 0.4*t524;
  t542 = 0.64*t430;
  t551 = t526 + t542;
  t2726 = -1.*t430*t300;
  t2762 = -1.*t283*t443;
  t3185 = t2726 + t2762;
  t552 = t551*t300;
  t578 = 0.24*t283*t443;
  t579 = t552 + t578;
  t438 = t430*t300;
  t444 = t283*t443;
  t448 = t438 + t444;
  t3192 = t283*t551;
  t3231 = -0.24*t300*t443;
  t4389 = t3192 + t3231;
  t6714 = Cos(var1[5]);
  t6733 = Sin(var1[5]);
  t7068 = Cos(var1[6]);
  t7413 = Sin(var1[6]);
  t7425 = t6714*t7068;
  t7428 = -1.*t6733*t7413;
  t7429 = t7425 + t7428;
  t7434 = -1.*t7068;
  t7435 = 1. + t7434;
  t7436 = 0.4*t7435;
  t7445 = 0.64*t7068;
  t7446 = t7436 + t7445;
  t7451 = -1.*t7068*t6733;
  t7456 = -1.*t6714*t7413;
  t7457 = t7451 + t7456;
  t7447 = t7446*t6733;
  t7448 = 0.24*t6714*t7413;
  t7449 = t7447 + t7448;
  t7073 = t7068*t6733;
  t7414 = t6714*t7413;
  t7419 = t7073 + t7414;
  t7463 = t6714*t7446;
  t7464 = -0.24*t6733*t7413;
  t7472 = t7463 + t7464;
  t389 = Power(t283,2);
  t407 = 0.11*t389;
  t408 = Power(t300,2);
  t409 = 0.11*t408;
  t410 = t407 + t409;
  t4518 = -1.*t148*t479;
  t2613 = -1.*t579*t479;
  t4453 = -1.*t3185*t4389;
  t4466 = t2613 + t4453;
  t4747 = t579*t448;
  t4824 = t479*t4389;
  t6639 = t4747 + t4824;
  t6808 = Power(t6714,2);
  t6830 = 0.11*t6808;
  t7061 = Power(t6733,2);
  t7065 = 0.11*t7061;
  t7066 = t6830 + t7065;
  t7483 = -1.*t148*t7429;
  t7450 = -1.*t7449*t7429;
  t7473 = -1.*t7457*t7472;
  t7475 = t7450 + t7473;
  t7486 = t7449*t7419;
  t7487 = t7429*t7472;
  t7488 = t7486 + t7487;
  t296 = -1.*t148*t283;
  t343 = t297*t300;
  t354 = t296 + t343;
  t428 = -6.8*t354*t410;
  t483 = -1.*t297*t479;
  t7568 = t148*t3185;
  t7569 = t7568 + t483;
  t4491 = -1.*t297*t3185;
  t7571 = -1.*t551*t300;
  t7572 = -0.24*t283*t443;
  t7573 = t7571 + t7572;
  t7581 = -1.*t283*t430;
  t7585 = t300*t443;
  t7586 = t7581 + t7585;
  t7495 = t283*t297;
  t7496 = t148*t300;
  t7497 = t7495 + t7496;
  t7498 = -6.8*t7497*t410;
  t4567 = t4491 + t4518;
  t7574 = t7573*t479;
  t7575 = t579*t479;
  t7576 = t3185*t4389;
  t7577 = t448*t4389;
  t7578 = t7574 + t7575 + t7576 + t7577;
  t7543 = -1.*t148*t3185;
  t449 = -1.*t148*t448;
  t484 = t449 + t483;
  t7600 = -1.*t3185*t7573;
  t7601 = -1.*t3185*t579;
  t7607 = -1.*t479*t4389;
  t7608 = -1.*t4389*t7586;
  t7616 = t7600 + t7601 + t7607 + t7608;
  t7570 = -3.2*t7569*t4466;
  t7587 = t148*t7586;
  t7588 = t4491 + t7587;
  t7592 = -3.2*t6639*t7588;
  t7593 = -1.*t297*t448;
  t7594 = t148*t479;
  t7595 = t7593 + t7594;
  t7639 = -0.24*t430*t300;
  t7640 = t7639 + t7572;
  t7642 = 0.24*t283*t430;
  t7643 = t7642 + t3231;
  t7622 = -3.2*t4567*t4466;
  t7641 = t7640*t479;
  t7644 = t448*t7643;
  t7682 = t7641 + t7575 + t7576 + t7644;
  t7628 = -1.*t297*t7586;
  t7630 = t7543 + t7628;
  t7631 = -3.2*t6639*t7630;
  t7688 = -1.*t3185*t7640;
  t7689 = -1.*t479*t7643;
  t7690 = t7688 + t7601 + t7689 + t7608;
  t6731 = -1.*t148*t6714;
  t6736 = t297*t6733;
  t6761 = t6731 + t6736;
  t7067 = -6.8*t6761*t7066;
  t7432 = -1.*t297*t7429;
  t7706 = t148*t7457;
  t7707 = t7706 + t7432;
  t7478 = -1.*t297*t7457;
  t7709 = -1.*t7446*t6733;
  t7710 = -0.24*t6714*t7413;
  t7711 = t7709 + t7710;
  t7718 = -1.*t6714*t7068;
  t7719 = t6733*t7413;
  t7720 = t7718 + t7719;
  t7552 = t6714*t297;
  t7553 = t148*t6733;
  t7554 = t7552 + t7553;
  t7555 = -6.8*t7554*t7066;
  t7484 = t7478 + t7483;
  t7712 = t7711*t7429;
  t7713 = t7449*t7429;
  t7714 = t7457*t7472;
  t7715 = t7419*t7472;
  t7716 = t7712 + t7713 + t7714 + t7715;
  t7560 = -1.*t148*t7457;
  t7420 = -1.*t148*t7419;
  t7433 = t7420 + t7432;
  t7731 = -1.*t7457*t7711;
  t7732 = -1.*t7457*t7449;
  t7736 = -1.*t7429*t7472;
  t7737 = -1.*t7472*t7720;
  t7738 = t7731 + t7732 + t7736 + t7737;
  t7708 = -3.2*t7707*t7475;
  t7721 = t148*t7720;
  t7722 = t7478 + t7721;
  t7723 = -3.2*t7488*t7722;
  t7725 = -1.*t297*t7419;
  t7729 = t148*t7429;
  t7730 = t7725 + t7729;
  t7752 = -0.24*t7068*t6733;
  t7753 = t7752 + t7710;
  t7755 = 0.24*t6714*t7068;
  t7756 = t7755 + t7464;
  t7742 = -3.2*t7484*t7475;
  t7754 = t7753*t7429;
  t7757 = t7419*t7756;
  t7758 = t7754 + t7713 + t7714 + t7757;
  t7744 = -1.*t297*t7720;
  t7745 = t7560 + t7744;
  t7746 = -3.2*t7488*t7745;
  t7760 = -1.*t7457*t7753;
  t7761 = -1.*t7429*t7756;
  t7762 = t7760 + t7732 + t7761 + t7737;
  t183 = 2.88*t148;
  t4490 = -3.2*t484*t4466;
  t6688 = -3.2*t4567*t6639;
  t7477 = -3.2*t7433*t7475;
  t7489 = -3.2*t7484*t7488;
  t7491 = t183 + t428 + t4490 + t6688 + t7067 + t7477 + t7489;
  t7772 = 2.88*t297;
  t7773 = -1.*t283*t297;
  t7774 = -1.*t148*t300;
  t7775 = t7773 + t7774;
  t7776 = -6.8*t7775*t410;
  t7777 = -3.2*t7595*t4466;
  t7778 = -3.2*t7569*t6639;
  t7779 = -1.*t6714*t297;
  t7780 = -1.*t148*t6733;
  t7781 = t7779 + t7780;
  t7782 = -6.8*t7781*t7066;
  t7783 = -3.2*t7730*t7475;
  t7784 = -3.2*t7707*t7488;
  t7785 = t7772 + t7776 + t7777 + t7778 + t7782 + t7783 + t7784;
  t7579 = -3.2*t7569*t7578;
  t7617 = -3.2*t7595*t7616;
  t7619 = t428 + t7570 + t7579 + t7592 + t7617;
  t7621 = -0.5*var2[0]*t7619;
  t7627 = -3.2*t4567*t7578;
  t7632 = -3.2*t484*t7616;
  t7633 = t7498 + t7622 + t7627 + t7631 + t7632;
  t7635 = -0.5*var2[1]*t7633;
  t7636 = t7621 + t7635;
  t7637 = var2[2]*t7636;
  t7795 = -1.*t283*t551;
  t7796 = 0.24*t300*t443;
  t7797 = t7795 + t7796;
  t7791 = 2.*t3185*t7573;
  t7792 = t3185*t579;
  t7793 = t7573*t448;
  t7794 = 2.*t479*t4389;
  t7798 = t479*t7797;
  t7799 = t4389*t7586;
  t7800 = t7791 + t7792 + t7793 + t7794 + t7798 + t7799;
  t7499 = t297*t448;
  t7822 = t297*t7586;
  t7823 = t7568 + t7822;
  t7544 = t297*t479;
  t7805 = -1.*t7573*t479;
  t7806 = -2.*t3185*t4389;
  t7807 = -1.*t448*t4389;
  t7808 = -1.*t3185*t7797;
  t7809 = -2.*t7573*t7586;
  t7810 = -1.*t579*t7586;
  t7811 = t7805 + t7806 + t7807 + t7808 + t7809 + t7810;
  t7829 = t297*t3185;
  t7830 = t7829 + t7594;
  t7826 = t148*t448;
  t7802 = t551*t443;
  t7803 = -0.24*t430*t443;
  t7804 = t7802 + t7803;
  t7858 = -0.24*t283*t430;
  t7859 = t7858 + t7796;
  t7813 = t551*t430;
  t7814 = Power(t443,2);
  t7815 = 0.24*t7814;
  t7816 = t7813 + t7815;
  t7854 = t3185*t7573;
  t7855 = t3185*t7640;
  t7856 = t7640*t448;
  t7857 = t479*t7643;
  t7860 = t479*t7859;
  t7861 = t7854 + t7855 + t7792 + t7856 + t4824 + t7857 + t7860 + t7799;
  t7820 = t7499 + t7587;
  t7821 = -3.2*t6639*t7820;
  t7824 = -3.2*t4466*t7823;
  t7827 = t7826 + t7544;
  t7867 = -1.*t7640*t479;
  t7868 = -1.*t3185*t7643;
  t7869 = -1.*t3185*t7859;
  t7870 = -1.*t7573*t7586;
  t7871 = -1.*t7640*t7586;
  t7872 = t7867 + t4453 + t7807 + t7868 + t7869 + t7870 + t7871 + t7810;
  t7835 = -3.2*t4466*t7588;
  t7837 = t7826 + t7628;
  t7838 = -3.2*t6639*t7837;
  t7905 = -3.2*t7830*t4466;
  t7906 = -3.2*t7830*t7578;
  t7907 = -3.2*t6639*t7823;
  t7908 = -3.2*t7827*t7616;
  t7909 = t7776 + t7905 + t7906 + t7907 + t7908;
  t7913 = -3.2*t7816*t7578;
  t7914 = -3.2*t7804*t7616;
  t7915 = t7913 + t7914;
  t7687 = -3.2*t7569*t7682;
  t7696 = -3.2*t7595*t7690;
  t7697 = t7570 + t7687 + t7592 + t7696;
  t7698 = -0.5*var2[0]*t7697;
  t7699 = -3.2*t4567*t7682;
  t7701 = -3.2*t484*t7690;
  t7702 = t7622 + t7699 + t7631 + t7701;
  t7703 = -0.5*var2[1]*t7702;
  t7704 = t7698 + t7703;
  t7705 = var2[2]*t7704;
  t7862 = 0.384*var2[4]*t7861;
  t7863 = -1.*t551*t443;
  t7864 = 0.24*t430*t443;
  t7865 = t7863 + t7864;
  t7866 = -3.2*t7865*t7578;
  t7873 = -3.2*t7804*t7872;
  t7874 = Power(t430,2);
  t7875 = -0.24*t7874;
  t7876 = t7813 + t7875;
  t7877 = -3.2*t7876*t7616;
  t7878 = -3.2*t7816*t7861;
  t7879 = t7866 + t7873 + t7877 + t7878;
  t7880 = -0.5*var2[3]*t7879;
  t7881 = -3.2*t7578*t7823;
  t7882 = -3.2*t7682*t7823;
  t7883 = -3.2*t7827*t7872;
  t7884 = -3.2*t7830*t7616;
  t7885 = -3.2*t7830*t7690;
  t7886 = -3.2*t7830*t7861;
  t7887 = t7821 + t7824 + t7881 + t7882 + t7883 + t7884 + t7885 + t7886;
  t7888 = -0.5*var2[0]*t7887;
  t7889 = -3.2*t7578*t7588;
  t7890 = -3.2*t7682*t7588;
  t7891 = -3.2*t7595*t7872;
  t7892 = -3.2*t7569*t7616;
  t7893 = -3.2*t7569*t7690;
  t7894 = -3.2*t7569*t7861;
  t7895 = t7835 + t7889 + t7890 + t7838 + t7891 + t7892 + t7893 + t7894;
  t7896 = -0.5*var2[1]*t7895;
  t7897 = -6.4*t7578*t7682;
  t7898 = -6.4*t4466*t7872;
  t7899 = -6.4*t7616*t7690;
  t7900 = -6.4*t6639*t7861;
  t7901 = t7897 + t7898 + t7899 + t7900;
  t7902 = -0.5*var2[2]*t7901;
  t7903 = t7862 + t7880 + t7888 + t7896 + t7902;
  t7904 = var2[2]*t7903;
  t7926 = 2.*t3185*t7640;
  t7927 = 2.*t479*t7643;
  t7928 = t7926 + t7792 + t7856 + t7927 + t7860 + t7799;
  t7936 = -2.*t3185*t7643;
  t7937 = -2.*t7640*t7586;
  t7938 = t7867 + t7807 + t7936 + t7869 + t7937 + t7810;
  t7966 = -3.2*t7830*t7682;
  t7967 = -3.2*t7827*t7690;
  t7968 = t7905 + t7966 + t7907 + t7967;
  t7972 = -3.2*t7876*t4466;
  t7973 = -3.2*t7865*t6639;
  t7974 = -3.2*t7816*t7682;
  t7975 = -3.2*t7804*t7690;
  t7976 = t7972 + t7973 + t7974 + t7975;
  t7717 = -3.2*t7707*t7716;
  t7739 = -3.2*t7730*t7738;
  t7740 = t7067 + t7708 + t7717 + t7723 + t7739;
  t7741 = -0.5*var2[0]*t7740;
  t7743 = -3.2*t7484*t7716;
  t7747 = -3.2*t7433*t7738;
  t7748 = t7555 + t7742 + t7743 + t7746 + t7747;
  t7749 = -0.5*var2[1]*t7748;
  t7750 = t7741 + t7749;
  t7751 = var2[2]*t7750;
  t7991 = -1.*t6714*t7446;
  t7992 = 0.24*t6733*t7413;
  t7993 = t7991 + t7992;
  t7987 = 2.*t7457*t7711;
  t7988 = t7457*t7449;
  t7989 = t7711*t7419;
  t7990 = 2.*t7429*t7472;
  t7994 = t7429*t7993;
  t7995 = t7472*t7720;
  t7996 = t7987 + t7988 + t7989 + t7990 + t7994 + t7995;
  t7557 = t297*t7419;
  t8018 = t297*t7720;
  t8019 = t7706 + t8018;
  t7561 = t297*t7429;
  t8001 = -1.*t7711*t7429;
  t8002 = -2.*t7457*t7472;
  t8003 = -1.*t7419*t7472;
  t8004 = -1.*t7457*t7993;
  t8005 = -2.*t7711*t7720;
  t8006 = -1.*t7449*t7720;
  t8007 = t8001 + t8002 + t8003 + t8004 + t8005 + t8006;
  t8025 = t297*t7457;
  t8026 = t8025 + t7729;
  t8022 = t148*t7419;
  t7998 = t7446*t7413;
  t7999 = -0.24*t7068*t7413;
  t8000 = t7998 + t7999;
  t8054 = -0.24*t6714*t7068;
  t8055 = t8054 + t7992;
  t8009 = t7446*t7068;
  t8010 = Power(t7413,2);
  t8011 = 0.24*t8010;
  t8012 = t8009 + t8011;
  t8050 = t7457*t7711;
  t8051 = t7457*t7753;
  t8052 = t7753*t7419;
  t8053 = t7429*t7756;
  t8056 = t7429*t8055;
  t8057 = t8050 + t8051 + t7988 + t8052 + t7487 + t8053 + t8056 + t7995;
  t8016 = t7557 + t7721;
  t8017 = -3.2*t7488*t8016;
  t8020 = -3.2*t7475*t8019;
  t8023 = t8022 + t7561;
  t8063 = -1.*t7753*t7429;
  t8064 = -1.*t7457*t7756;
  t8065 = -1.*t7457*t8055;
  t8066 = -1.*t7711*t7720;
  t8067 = -1.*t7753*t7720;
  t8068 = t8063 + t7473 + t8003 + t8064 + t8065 + t8066 + t8067 + t8006;
  t8031 = -3.2*t7475*t7722;
  t8033 = t8022 + t7744;
  t8034 = -3.2*t7488*t8033;
  t8101 = -3.2*t8026*t7475;
  t8102 = -3.2*t8026*t7716;
  t8103 = -3.2*t7488*t8019;
  t8104 = -3.2*t8023*t7738;
  t8105 = t7782 + t8101 + t8102 + t8103 + t8104;
  t8109 = -3.2*t8012*t7716;
  t8110 = -3.2*t8000*t7738;
  t8111 = t8109 + t8110;
  t7759 = -3.2*t7707*t7758;
  t7763 = -3.2*t7730*t7762;
  t7764 = t7708 + t7759 + t7723 + t7763;
  t7765 = -0.5*var2[0]*t7764;
  t7766 = -3.2*t7484*t7758;
  t7767 = -3.2*t7433*t7762;
  t7768 = t7742 + t7766 + t7746 + t7767;
  t7769 = -0.5*var2[1]*t7768;
  t7770 = t7765 + t7769;
  t7771 = var2[2]*t7770;
  t8058 = 0.384*var2[6]*t8057;
  t8059 = -1.*t7446*t7413;
  t8060 = 0.24*t7068*t7413;
  t8061 = t8059 + t8060;
  t8062 = -3.2*t8061*t7716;
  t8069 = -3.2*t8000*t8068;
  t8070 = Power(t7068,2);
  t8071 = -0.24*t8070;
  t8072 = t8009 + t8071;
  t8073 = -3.2*t8072*t7738;
  t8074 = -3.2*t8012*t8057;
  t8075 = t8062 + t8069 + t8073 + t8074;
  t8076 = -0.5*var2[5]*t8075;
  t8077 = -3.2*t7716*t8019;
  t8078 = -3.2*t7758*t8019;
  t8079 = -3.2*t8023*t8068;
  t8080 = -3.2*t8026*t7738;
  t8081 = -3.2*t8026*t7762;
  t8082 = -3.2*t8026*t8057;
  t8083 = t8017 + t8020 + t8077 + t8078 + t8079 + t8080 + t8081 + t8082;
  t8084 = -0.5*var2[0]*t8083;
  t8085 = -3.2*t7716*t7722;
  t8086 = -3.2*t7758*t7722;
  t8087 = -3.2*t7730*t8068;
  t8088 = -3.2*t7707*t7738;
  t8089 = -3.2*t7707*t7762;
  t8090 = -3.2*t7707*t8057;
  t8091 = t8031 + t8085 + t8086 + t8034 + t8087 + t8088 + t8089 + t8090;
  t8092 = -0.5*var2[1]*t8091;
  t8093 = -6.4*t7716*t7758;
  t8094 = -6.4*t7475*t8068;
  t8095 = -6.4*t7738*t7762;
  t8096 = -6.4*t7488*t8057;
  t8097 = t8093 + t8094 + t8095 + t8096;
  t8098 = -0.5*var2[2]*t8097;
  t8099 = t8058 + t8076 + t8084 + t8092 + t8098;
  t8100 = var2[2]*t8099;
  t8122 = 2.*t7457*t7753;
  t8123 = 2.*t7429*t7756;
  t8124 = t8122 + t7988 + t8052 + t8123 + t8056 + t7995;
  t8132 = -2.*t7457*t7756;
  t8133 = -2.*t7753*t7720;
  t8134 = t8063 + t8003 + t8132 + t8065 + t8133 + t8006;
  t8162 = -3.2*t8026*t7758;
  t8163 = -3.2*t8023*t7762;
  t8164 = t8101 + t8162 + t8103 + t8163;
  t8168 = -3.2*t8072*t7475;
  t8169 = -3.2*t8061*t7488;
  t8170 = -3.2*t8012*t7758;
  t8171 = -3.2*t8000*t7762;
  t8172 = t8168 + t8169 + t8170 + t8171;
  p_output1[0]=(-0.5*t7491*var2[0] - 0.5*(-2.88*t297 + t7498 - 3.2*t4466*(t4518 + t7499) - 3.2*t6639*(t7543 + t7544) + t7555 - 3.2*t7475*(t7483 + t7557) - 3.2*t7488*(t7560 + t7561))*var2[1])*var2[2];
  p_output1[1]=t7637;
  p_output1[2]=t7705;
  p_output1[3]=t7751;
  p_output1[4]=t7771;
  p_output1[5]=-0.5*t7785*var2[2];
  p_output1[6]=-0.5*t7491*var2[2];
  p_output1[7]=-0.5*t7785*var2[0] - 0.5*t7491*var2[1];
  p_output1[8]=t7637;
  p_output1[9]=var2[2]*(-0.5*(t428 + t7821 - 6.4*t7578*t7823 + t7824 - 3.2*t7811*t7827 - 6.4*t7616*t7830 - 3.2*t7800*t7830)*var2[0] - 0.5*(t7498 - 6.4*t7578*t7588 - 6.4*t7569*t7616 - 3.2*t7569*t7800 - 3.2*t7595*t7811 + t7835 + t7838)*var2[1] - 0.5*(-6.4*Power(t7578,2) - 6.4*Power(t7616,2) - 6.4*t6639*t7800 - 6.4*t4466*t7811)*var2[2] - 0.5*(-3.2*t7804*t7811 - 3.2*t7800*t7816)*var2[3] + 0.384*t7800*var2[4]);
  p_output1[10]=t7904;
  p_output1[11]=-0.5*t7909*var2[2];
  p_output1[12]=-0.5*t7619*var2[2];
  p_output1[13]=-0.5*t7909*var2[0] - 0.5*t7619*var2[1] - 1.*(-6.4*t6639*t7578 - 6.4*t4466*t7616)*var2[2] - 0.5*t7915*var2[3] + 0.384*t7578*var2[4];
  p_output1[14]=-0.5*t7915*var2[2];
  p_output1[15]=0.384*t7578*var2[2];
  p_output1[16]=t7705;
  p_output1[17]=t7904;
  p_output1[18]=var2[2]*(-0.5*(t7821 - 6.4*t7682*t7823 + t7824 - 6.4*t7690*t7830 - 3.2*t7830*t7928 - 3.2*t7827*t7938)*var2[0] - 0.5*(-6.4*t7588*t7682 - 6.4*t7569*t7690 + t7835 + t7838 - 3.2*t7569*t7928 - 3.2*t7595*t7938)*var2[1] - 0.5*(-6.4*Power(t7682,2) - 6.4*Power(t7690,2) - 6.4*t6639*t7928 - 6.4*t4466*t7938)*var2[2] - 0.5*(-3.2*t4466*t7865 - 6.4*t7682*t7865 - 3.2*t6639*(-1.*t430*t551 + 0.24*t7874) - 6.4*t7690*t7876 - 3.2*t7816*t7928 - 3.2*t7804*t7938)*var2[3] + 0.384*t7928*var2[4]);
  p_output1[19]=-0.5*t7968*var2[2];
  p_output1[20]=-0.5*t7697*var2[2];
  p_output1[21]=-0.5*t7968*var2[0] - 0.5*t7697*var2[1] - 1.*(-6.4*t6639*t7682 - 6.4*t4466*t7690)*var2[2] - 0.5*t7976*var2[3] + 0.384*t7682*var2[4];
  p_output1[22]=-0.5*t7976*var2[2];
  p_output1[23]=0.384*t7682*var2[2];
  p_output1[24]=t7751;
  p_output1[25]=var2[2]*(-0.5*(t7067 + t8017 - 6.4*t7716*t8019 + t8020 - 3.2*t8007*t8023 - 6.4*t7738*t8026 - 3.2*t7996*t8026)*var2[0] - 0.5*(t7555 - 6.4*t7716*t7722 - 6.4*t7707*t7738 - 3.2*t7707*t7996 - 3.2*t7730*t8007 + t8031 + t8034)*var2[1] - 0.5*(-6.4*Power(t7716,2) - 6.4*Power(t7738,2) - 6.4*t7488*t7996 - 6.4*t7475*t8007)*var2[2] - 0.5*(-3.2*t8000*t8007 - 3.2*t7996*t8012)*var2[5] + 0.384*t7996*var2[6]);
  p_output1[26]=t8100;
  p_output1[27]=-0.5*t8105*var2[2];
  p_output1[28]=-0.5*t7740*var2[2];
  p_output1[29]=-0.5*t8105*var2[0] - 0.5*t7740*var2[1] - 1.*(-6.4*t7488*t7716 - 6.4*t7475*t7738)*var2[2] - 0.5*t8111*var2[5] + 0.384*t7716*var2[6];
  p_output1[30]=-0.5*t8111*var2[2];
  p_output1[31]=0.384*t7716*var2[2];
  p_output1[32]=t7771;
  p_output1[33]=t8100;
  p_output1[34]=var2[2]*(-0.5*(t8017 - 6.4*t7758*t8019 + t8020 - 6.4*t7762*t8026 - 3.2*t8026*t8124 - 3.2*t8023*t8134)*var2[0] - 0.5*(-6.4*t7722*t7758 - 6.4*t7707*t7762 + t8031 + t8034 - 3.2*t7707*t8124 - 3.2*t7730*t8134)*var2[1] - 0.5*(-6.4*Power(t7758,2) - 6.4*Power(t7762,2) - 6.4*t7488*t8124 - 6.4*t7475*t8134)*var2[2] - 0.5*(-3.2*t7475*t8061 - 6.4*t7758*t8061 - 3.2*t7488*(-1.*t7068*t7446 + 0.24*t8070) - 6.4*t7762*t8072 - 3.2*t8012*t8124 - 3.2*t8000*t8134)*var2[5] + 0.384*t8124*var2[6]);
  p_output1[35]=-0.5*t8164*var2[2];
  p_output1[36]=-0.5*t7764*var2[2];
  p_output1[37]=-0.5*t8164*var2[0] - 0.5*t7764*var2[1] - 1.*(-6.4*t7488*t7758 - 6.4*t7475*t7762)*var2[2] - 0.5*t8172*var2[5] + 0.384*t7758*var2[6];
  p_output1[38]=-0.5*t8172*var2[2];
  p_output1[39]=0.384*t7758*var2[2];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 40, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce3_vec3_five_link_walker.hh"

namespace LeftStance
{

void J_Ce3_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
