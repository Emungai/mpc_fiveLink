/*
 * Automatically Generated from Mathematica.
 * Wed 6 Nov 2019 23:19:54 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2382;
  double t223;
  double t239;
  double t2403;
  double t2806;
  double t134;
  double t2924;
  double t2925;
  double t3172;
  double t4547;
  double t5851;
  double t5854;
  double t3200;
  double t2373;
  double t2544;
  double t2695;
  double t6010;
  double t5970;
  double t6015;
  double t7791;
  double t6027;
  double t6147;
  double t7937;
  double t7969;
  double t8009;
  double t7853;
  double t7864;
  double t9256;
  double t9257;
  double t9298;
  double t8938;
  double t9242;
  double t9243;
  double t9516;
  double t9517;
  double t9527;
  double t9603;
  double t9699;
  double t9700;
  double t2793;
  double t3208;
  double t6018;
  double t6159;
  double t7227;
  double t7719;
  double t7866;
  double t7896;
  double t7899;
  double t7908;
  double t8010;
  double t8012;
  double t8031;
  double t8060;
  double t8074;
  double t8168;
  double t8171;
  double t8197;
  double t8256;
  double t8840;
  double t9419;
  double t9537;
  double t9709;
  double t9712;
  double t10773;
  double t10854;
  double t11019;
  double t11045;
  double t11046;
  double t10798;
  double t10860;
  double t10910;
  double t11195;
  double t11243;
  double t11247;
  double t11299;
  double t11309;
  double t11310;
  double t13459;
  double t13514;
  double t13507;
  double t13529;
  double t13666;
  double t13701;
  double t13720;
  double t13725;
  double t13800;
  double t13801;
  double t13802;
  double t13772;
  double t13804;
  double t13726;
  double t13866;
  double t13803;
  double t13813;
  double t13771;
  double t13775;
  double t13852;
  double t13861;
  double t13821;
  double t13825;
  double t13687;
  double t13769;
  double t13884;
  double t13891;
  double t13862;
  double t13927;
  double t13931;
  double t13932;
  double t11193;
  double t11279;
  double t11652;
  double t13416;
  double t13924;
  double t13925;
  double t13926;
  double t13948;
  double t13957;
  double t13958;
  double t13959;
  double t13960;
  double t13961;
  double t13962;
  double t13963;
  double t13973;
  double t9713;
  double t10254;
  double t13991;
  double t14005;
  double t14006;
  double t14007;
  double t14008;
  double t14017;
  double t14018;
  double t14019;
  double t8872;
  double t14020;
  double t14021;
  double t13977;
  double t13871;
  double t14043;
  double t14044;
  double t14045;
  double t14051;
  double t14057;
  double t14075;
  double t14081;
  double t14083;
  double t13974;
  double t14084;
  double t14085;
  double t14148;
  double t14169;
  double t14173;
  double t14174;
  double t14208;
  double t14209;
  double t14210;
  double t14211;
  double t14214;
  double t14215;
  double t14230;
  double t14231;
  double t14233;
  double t14234;
  double t14235;
  double t14236;
  double t14266;
  double t14267;
  double t14268;
  double t14269;
  double t14222;
  double t14224;
  double t14225;
  double t14226;
  double t14227;
  double t14229;
  double t14258;
  double t14259;
  double t14260;
  double t14261;
  double t14262;
  double t14263;
  double t14264;
  double t14216;
  double t14175;
  double t14272;
  double t14270;
  double t14282;
  double t14287;
  double t14288;
  double t14290;
  double t14293;
  double t14295;
  double t14296;
  double t14297;
  double t14299;
  double t10651;
  double t10227;
  double t13872;
  double t13867;
  double t14329;
  double t14330;
  double t14331;
  double t14332;
  double t14333;
  double t14342;
  double t14349;
  double t14353;
  double t14361;
  double t14300;
  double t14377;
  double t14383;
  double t14387;
  double t14388;
  double t14389;
  double t14291;
  double t14393;
  double t14403;
  double t14372;
  double t14418;
  double t14419;
  double t14420;
  double t14421;
  double t14422;
  double t14367;
  double t14423;
  double t14424;
  double t14445;
  double t14446;
  double t14451;
  double t14457;
  double t14449;
  double t14450;
  double t14458;
  double t14459;
  double t14460;
  double t14447;
  double t14443;
  double t14473;
  double t14468;
  double t14504;
  double t14505;
  double t14506;
  double t14507;
  double t14508;
  double t14509;
  double t14510;
  double t14511;
  double t14513;
  double t14514;
  double t14519;
  double t14529;
  double t14530;
  double t14531;
  double t14512;
  double t14523;
  double t14527;
  double t14528;
  double t14533;
  double t14534;
  double t14543;
  double t14544;
  double t14545;
  double t14546;
  double t14556;
  double t14557;
  double t14549;
  double t14559;
  double t14560;
  double t14551;
  double t14495;
  double t14499;
  double t14500;
  double t14501;
  double t14502;
  double t14503;
  double t14579;
  double t14580;
  double t14581;
  double t14582;
  double t14583;
  double t14584;
  double t14585;
  double t14586;
  double t14588;
  double t14589;
  double t14590;
  double t14573;
  double t14574;
  double t14575;
  double t14576;
  double t14577;
  double t14578;
  double t14587;
  double t14591;
  double t14592;
  double t14594;
  double t14595;
  double t14596;
  double t14601;
  double t14602;
  double t14603;
  double t14600;
  double t14605;
  double t14606;
  double t14610;
  double t14619;
  double t14620;
  double t14612;
  double t14622;
  double t14623;
  double t14614;
  double t14532;
  double t14535;
  double t14536;
  double t14542;
  double t14548;
  double t14550;
  double t14552;
  double t14553;
  double t14554;
  double t14642;
  double t14643;
  double t14644;
  double t14636;
  double t14558;
  double t14561;
  double t14562;
  double t14638;
  double t14641;
  double t14647;
  double t14564;
  double t14565;
  double t14566;
  double t14652;
  double t14665;
  double t14666;
  double t14656;
  double t14563;
  double t14567;
  double t14568;
  double t14661;
  double t14662;
  double t14663;
  double t14664;
  double t14667;
  double t14668;
  double t14669;
  double t14670;
  double t14671;
  double t14672;
  double t14673;
  double t14674;
  double t14675;
  double t14676;
  double t14677;
  double t14678;
  double t14679;
  double t14680;
  double t14681;
  double t14604;
  double t14607;
  double t14608;
  double t14609;
  double t14611;
  double t14613;
  double t14615;
  double t14616;
  double t14617;
  double t14708;
  double t14709;
  double t14710;
  double t14702;
  double t14621;
  double t14624;
  double t14625;
  double t14704;
  double t14707;
  double t14713;
  double t14627;
  double t14628;
  double t14629;
  double t14718;
  double t14731;
  double t14732;
  double t14722;
  double t14626;
  double t14630;
  double t14631;
  double t14727;
  double t14728;
  double t14729;
  double t14730;
  double t14733;
  double t14734;
  double t14735;
  double t14736;
  double t14737;
  double t14738;
  double t14739;
  double t14740;
  double t14741;
  double t14742;
  double t14743;
  double t14744;
  double t14745;
  double t14746;
  double t14747;
  double t14768;
  double t14770;
  double t14767;
  double t14781;
  double t14786;
  double t14788;
  double t14778;
  double t14779;
  double t14780;
  double t14782;
  double t14783;
  double t14784;
  double t14769;
  double t14771;
  double t14772;
  double t14774;
  double t14775;
  double t14776;
  double t14787;
  double t14789;
  double t14790;
  double t14792;
  double t14793;
  double t14794;
  double t14802;
  double t14803;
  double t14804;
  double t14805;
  double t14807;
  double t14808;
  double t14809;
  double t14810;
  double t14814;
  double t14815;
  double t14816;
  double t14822;
  double t14823;
  double t14824;
  double t14831;
  double t14818;
  double t14819;
  double t14820;
  double t14832;
  double t14821;
  double t14825;
  double t14826;
  double t14835;
  double t14836;
  double t14837;
  double t14854;
  double t14859;
  double t14860;
  double t14855;
  double t14856;
  double t14857;
  double t14861;
  double t14863;
  double t14864;
  double t14865;
  double t14876;
  double t14877;
  double t14878;
  double t14879;
  double t14880;
  double t14886;
  double t14887;
  double t14888;
  double t14889;
  double t14890;
  double t14892;
  double t14893;
  double t14894;
  double t14895;
  double t14899;
  double t14900;
  double t14901;
  double t14907;
  double t14908;
  double t14909;
  double t14916;
  double t14903;
  double t14904;
  double t14905;
  double t14917;
  double t14906;
  double t14910;
  double t14911;
  double t14920;
  double t14921;
  double t14922;
  double t14939;
  double t14944;
  double t14945;
  double t14940;
  double t14941;
  double t14942;
  double t14946;
  double t14948;
  double t14949;
  double t14950;
  double t14961;
  double t14962;
  double t14963;
  double t14964;
  double t14965;
  double t14971;
  t2382 = Cos(var1[3]);
  t223 = Cos(var1[4]);
  t239 = Sin(var1[3]);
  t2403 = Sin(var1[4]);
  t2806 = Cos(var1[2]);
  t134 = Sin(var1[2]);
  t2924 = t2382*t223;
  t2925 = -1.*t239*t2403;
  t3172 = t2924 + t2925;
  t4547 = -1.*t223*t239;
  t5851 = -1.*t2382*t2403;
  t5854 = t4547 + t5851;
  t3200 = t2806*t3172;
  t2373 = t223*t239;
  t2544 = t2382*t2403;
  t2695 = t2373 + t2544;
  t6010 = -1.*t134*t3172;
  t5970 = t2806*t5854;
  t6015 = t5970 + t6010;
  t7791 = -1.*t134*t5854;
  t6027 = t134*t5854;
  t6147 = t6027 + t3200;
  t7937 = -1.*t2382*t223;
  t7969 = t239*t2403;
  t8009 = t7937 + t7969;
  t7853 = -1.*t2806*t3172;
  t7864 = t7791 + t7853;
  t9256 = t2806*t2382;
  t9257 = -1.*t134*t239;
  t9298 = t9256 + t9257;
  t8938 = -1.*t2382*t134;
  t9242 = -1.*t2806*t239;
  t9243 = t8938 + t9242;
  t9516 = t2382*t134;
  t9517 = t2806*t239;
  t9527 = t9516 + t9517;
  t9603 = -1.*t2806*t2382;
  t9699 = t134*t239;
  t9700 = t9603 + t9699;
  t2793 = -1.*t134*t2695;
  t3208 = t2793 + t3200;
  t6018 = 6.4*t3208*t6015;
  t6159 = -1.*t2806*t2695;
  t7227 = t6159 + t6010;
  t7719 = 3.2*t6147*t7227;
  t7866 = t2806*t2695;
  t7896 = t134*t3172;
  t7899 = t7866 + t7896;
  t7908 = 3.2*t7864*t7899;
  t8010 = t2806*t8009;
  t8012 = t7791 + t8010;
  t8031 = 6.4*t6015*t8012;
  t8060 = -1.*t2806*t5854;
  t8074 = -1.*t134*t8009;
  t8168 = t8060 + t8074;
  t8171 = 3.2*t6147*t8168;
  t8197 = t134*t8009;
  t8256 = t5970 + t8197;
  t8840 = 3.2*t7864*t8256;
  t9419 = 20.4*t9243*t9298;
  t9537 = 6.8*t9527*t9298;
  t9709 = 20.4*t9243*t9700;
  t9712 = 6.8*t9527*t9700;
  t10773 = Cos(var1[5]);
  t10854 = Sin(var1[5]);
  t11019 = t2806*t10773;
  t11045 = -1.*t134*t10854;
  t11046 = t11019 + t11045;
  t10798 = -1.*t10773*t134;
  t10860 = -1.*t2806*t10854;
  t10910 = t10798 + t10860;
  t11195 = t10773*t134;
  t11243 = t2806*t10854;
  t11247 = t11195 + t11243;
  t11299 = -1.*t2806*t10773;
  t11309 = t134*t10854;
  t11310 = t11299 + t11309;
  t13459 = Cos(var1[6]);
  t13514 = Sin(var1[6]);
  t13507 = -1.*t13459*t10854;
  t13529 = -1.*t10773*t13514;
  t13666 = t13507 + t13529;
  t13701 = t10773*t13459;
  t13720 = -1.*t10854*t13514;
  t13725 = t13701 + t13720;
  t13800 = t13459*t10854;
  t13801 = t10773*t13514;
  t13802 = t13800 + t13801;
  t13772 = -1.*t134*t13725;
  t13804 = t2806*t13725;
  t13726 = -1.*t2806*t13725;
  t13866 = t134*t13725;
  t13803 = -1.*t134*t13802;
  t13813 = t13803 + t13804;
  t13771 = t2806*t13666;
  t13775 = t13771 + t13772;
  t13852 = t134*t13666;
  t13861 = t13852 + t13804;
  t13821 = -1.*t2806*t13802;
  t13825 = t13821 + t13772;
  t13687 = -1.*t134*t13666;
  t13769 = t13687 + t13726;
  t13884 = t2806*t13802;
  t13891 = t13884 + t13866;
  t13862 = -1.*t2806*t13666;
  t13927 = -1.*t10773*t13459;
  t13931 = t10854*t13514;
  t13932 = t13927 + t13931;
  t11193 = 20.4*t10910*t11046;
  t11279 = 6.8*t11247*t11046;
  t11652 = 20.4*t10910*t11310;
  t13416 = 6.8*t11247*t11310;
  t13924 = 6.4*t13813*t13775;
  t13925 = 3.2*t13861*t13825;
  t13926 = 3.2*t13769*t13891;
  t13948 = t2806*t13932;
  t13957 = t13687 + t13948;
  t13958 = 6.4*t13775*t13957;
  t13959 = -1.*t134*t13932;
  t13960 = t13862 + t13959;
  t13961 = 3.2*t13861*t13960;
  t13962 = t134*t13932;
  t13963 = t13771 + t13962;
  t13973 = 3.2*t13769*t13963;
  t9713 = t9419 + t9537 + t9709 + t9712 + t6018 + t7719 + t7908 + t8031 + t8171 + t8840;
  t10254 = t134*t2695;
  t13991 = 6.4*t6147*t6015;
  t14005 = 3.2*t7899*t8012;
  t14006 = t10254 + t8010;
  t14007 = 3.2*t6015*t14006;
  t14008 = t7866 + t8074;
  t14017 = 3.2*t6147*t14008;
  t14018 = 3.2*t3208*t8256;
  t14019 = 6.4*t8012*t8256;
  t8872 = t6018 + t7719 + t7908 + t8031 + t8171 + t8840;
  t14020 = t13991 + t14005 + t14007 + t14017 + t14018 + t14019;
  t14021 = -0.5*var2[4]*t14020;
  t13977 = t11193 + t11279 + t11652 + t13416 + t13924 + t13925 + t13926 + t13958 + t13961 + t13973;
  t13871 = t134*t13802;
  t14043 = 6.4*t13861*t13775;
  t14044 = 3.2*t13891*t13957;
  t14045 = t13871 + t13948;
  t14051 = 3.2*t13775*t14045;
  t14057 = t13884 + t13959;
  t14075 = 3.2*t13861*t14057;
  t14081 = 3.2*t13813*t13963;
  t14083 = 6.4*t13957*t13963;
  t13974 = t13924 + t13925 + t13926 + t13958 + t13961 + t13973;
  t14084 = t14043 + t14044 + t14051 + t14075 + t14081 + t14083;
  t14085 = -0.5*var2[6]*t14084;
  t14148 = 3.2*t6147*t3208;
  t14169 = 3.2*t6015*t7899;
  t14173 = 3.2*t6147*t8012;
  t14174 = 3.2*t6015*t8256;
  t14208 = Power(t9243,2);
  t14209 = 6.8*t14208;
  t14210 = 6.8*t9243*t9527;
  t14211 = Power(t9298,2);
  t14214 = 6.8*t14211;
  t14215 = 6.8*t9298*t9700;
  t14230 = Power(t10910,2);
  t14231 = 6.8*t14230;
  t14233 = 6.8*t10910*t11247;
  t14234 = Power(t11046,2);
  t14235 = 6.8*t14234;
  t14236 = 6.8*t11046*t11310;
  t14266 = 3.2*t13861*t13813;
  t14267 = 3.2*t13775*t13891;
  t14268 = 3.2*t13861*t13957;
  t14269 = 3.2*t13775*t13963;
  t14222 = 3.2*t7864*t6147;
  t14224 = Power(t3208,2);
  t14225 = 3.2*t14224;
  t14226 = Power(t6015,2);
  t14227 = 3.2*t14226;
  t14229 = 3.2*t7227*t7899;
  t14258 = 3.2*t13769*t13861;
  t14259 = Power(t13813,2);
  t14260 = 3.2*t14259;
  t14261 = Power(t13775,2);
  t14262 = 3.2*t14261;
  t14263 = 3.2*t13825*t13891;
  t14264 = t14209 + t14210 + t14214 + t14215 + t14222 + t14225 + t14227 + t14229 + t14231 + t14233 + t14235 + t14236 + t14258 + t14260 + t14262 + t14263;
  t14216 = t14209 + t14210 + t14214 + t14215 + t14148 + t14169 + t14173 + t14174;
  t14175 = t14148 + t14169 + t14173 + t14174;
  t14272 = t14231 + t14233 + t14235 + t14236 + t14266 + t14267 + t14268 + t14269;
  t14270 = t14266 + t14267 + t14268 + t14269;
  t14282 = 6.4*t7864*t3208;
  t14287 = 6.4*t6015*t7227;
  t14288 = 6.4*t7864*t8012;
  t14290 = 6.4*t6015*t8168;
  t14293 = 13.6*t14208;
  t14295 = 13.6*t9243*t9527;
  t14296 = 13.6*t9298*t9700;
  t14297 = Power(t9700,2);
  t14299 = 13.6*t14297;
  t10651 = t10254 + t7853;
  t10227 = t8060 + t7896;
  t13872 = t13871 + t13726;
  t13867 = t13862 + t13866;
  t14329 = 13.6*t14230;
  t14330 = 13.6*t10910*t11247;
  t14331 = 13.6*t11046*t11310;
  t14332 = Power(t11310,2);
  t14333 = 13.6*t14332;
  t14342 = 6.4*t13769*t13813;
  t14349 = 6.4*t13775*t13825;
  t14353 = 6.4*t13769*t13957;
  t14361 = 6.4*t13775*t13960;
  t14300 = t14293 + t14295 + t14296 + t14299 + t14282 + t14287 + t14288 + t14290;
  t14377 = 6.4*t14226;
  t14383 = 6.4*t3208*t8012;
  t14387 = Power(t8012,2);
  t14388 = 6.4*t14387;
  t14389 = 6.4*t6015*t14008;
  t14291 = t14282 + t14287 + t14288 + t14290;
  t14393 = t14377 + t14383 + t14388 + t14389;
  t14403 = -0.5*var2[4]*t14393;
  t14372 = t14329 + t14330 + t14331 + t14333 + t14342 + t14349 + t14353 + t14361;
  t14418 = 6.4*t14261;
  t14419 = 6.4*t13813*t13957;
  t14420 = Power(t13957,2);
  t14421 = 6.4*t14420;
  t14422 = 6.4*t13775*t14057;
  t14367 = t14342 + t14349 + t14353 + t14361;
  t14423 = t14418 + t14419 + t14421 + t14422;
  t14424 = -0.5*var2[6]*t14423;
  t14445 = 13.6*t9243*t9298;
  t14446 = 13.6*t9243*t9700;
  t14451 = 13.6*t10910*t11046;
  t14457 = 13.6*t10910*t11310;
  t14449 = 6.4*t7864*t6015;
  t14450 = 6.4*t3208*t7227;
  t14458 = 6.4*t13769*t13775;
  t14459 = 6.4*t13813*t13825;
  t14460 = t14445 + t14446 + t14449 + t14450 + t14451 + t14457 + t14458 + t14459;
  t14447 = t14445 + t14446 + t6018 + t8031;
  t14443 = t6018 + t8031;
  t14473 = t14451 + t14457 + t13924 + t13958;
  t14468 = t13924 + t13958;
  t14504 = -1.*t223;
  t14505 = 1. + t14504;
  t14506 = 0.4*t14505;
  t14507 = 0.64*t223;
  t14508 = t14506 + t14507;
  t14509 = t14508*t239;
  t14510 = 0.24*t2382*t2403;
  t14511 = t14509 + t14510;
  t14513 = t2382*t14508;
  t14514 = -0.24*t239*t2403;
  t14519 = t14513 + t14514;
  t14529 = -1.*t14508*t239;
  t14530 = -0.24*t2382*t2403;
  t14531 = t14529 + t14530;
  t14512 = -1.*t14511*t3172;
  t14523 = -1.*t5854*t14519;
  t14527 = t14512 + t14523;
  t14528 = 3.2*t7864*t14527;
  t14533 = t14511*t3172;
  t14534 = t5854*t14519;
  t14543 = t14511*t2695;
  t14544 = t3172*t14519;
  t14545 = t14543 + t14544;
  t14546 = 3.2*t14545*t8168;
  t14556 = -0.24*t223*t239;
  t14557 = t14556 + t14530;
  t14549 = -1.*t5854*t14511;
  t14559 = 0.24*t2382*t223;
  t14560 = t14559 + t14514;
  t14551 = -1.*t14519*t8009;
  t14495 = Power(t2382,2);
  t14499 = 0.11*t14495;
  t14500 = Power(t239,2);
  t14501 = 0.11*t14500;
  t14502 = t14499 + t14501;
  t14503 = 6.8*t9527*t14502;
  t14579 = -1.*t13459;
  t14580 = 1. + t14579;
  t14581 = 0.4*t14580;
  t14582 = 0.64*t13459;
  t14583 = t14581 + t14582;
  t14584 = t14583*t10854;
  t14585 = 0.24*t10773*t13514;
  t14586 = t14584 + t14585;
  t14588 = t10773*t14583;
  t14589 = -0.24*t10854*t13514;
  t14590 = t14588 + t14589;
  t14573 = Power(t10773,2);
  t14574 = 0.11*t14573;
  t14575 = Power(t10854,2);
  t14576 = 0.11*t14575;
  t14577 = t14574 + t14576;
  t14578 = 6.8*t11247*t14577;
  t14587 = -1.*t14586*t13725;
  t14591 = -1.*t13666*t14590;
  t14592 = t14587 + t14591;
  t14594 = t14586*t13802;
  t14595 = t13725*t14590;
  t14596 = t14594 + t14595;
  t14601 = -1.*t14583*t10854;
  t14602 = -0.24*t10773*t13514;
  t14603 = t14601 + t14602;
  t14600 = 3.2*t13769*t14592;
  t14605 = t14586*t13725;
  t14606 = t13666*t14590;
  t14610 = 3.2*t14596*t13960;
  t14619 = -0.24*t13459*t10854;
  t14620 = t14619 + t14602;
  t14612 = -1.*t13666*t14586;
  t14622 = 0.24*t10773*t13459;
  t14623 = t14622 + t14589;
  t14614 = -1.*t14590*t13932;
  t14532 = t14531*t3172;
  t14535 = t2695*t14519;
  t14536 = t14532 + t14533 + t14534 + t14535;
  t14542 = 3.2*t7864*t14536;
  t14548 = -1.*t5854*t14531;
  t14550 = -1.*t3172*t14519;
  t14552 = t14548 + t14549 + t14550 + t14551;
  t14553 = 3.2*t7227*t14552;
  t14554 = t14503 + t14528 + t14542 + t14546 + t14553;
  t14642 = -1.*t2382*t14508;
  t14643 = 0.24*t239*t2403;
  t14644 = t14642 + t14643;
  t14636 = 3.2*t14527*t8012;
  t14558 = t14557*t3172;
  t14561 = t2695*t14560;
  t14562 = t14558 + t14533 + t14534 + t14561;
  t14638 = 3.2*t14545*t14008;
  t14641 = -1.*t2695*t14519;
  t14647 = -1.*t14511*t8009;
  t14564 = -1.*t5854*t14557;
  t14565 = -1.*t3172*t14560;
  t14566 = t14564 + t14549 + t14565 + t14551;
  t14652 = t5854*t14511;
  t14665 = -0.24*t2382*t223;
  t14666 = t14665 + t14643;
  t14656 = t14519*t8009;
  t14563 = 3.2*t7864*t14562;
  t14567 = 3.2*t7227*t14566;
  t14568 = t14528 + t14563 + t14546 + t14567;
  t14661 = 3.2*t14536*t8012;
  t14662 = 3.2*t14562*t8012;
  t14663 = -1.*t14557*t3172;
  t14664 = -1.*t5854*t14560;
  t14667 = -1.*t5854*t14666;
  t14668 = -1.*t14531*t8009;
  t14669 = -1.*t14557*t8009;
  t14670 = t14663 + t14523 + t14641 + t14664 + t14667 + t14668 + t14669 + t14647;
  t14671 = 3.2*t3208*t14670;
  t14672 = 3.2*t6015*t14552;
  t14673 = 3.2*t6015*t14566;
  t14674 = t5854*t14531;
  t14675 = t5854*t14557;
  t14676 = t14557*t2695;
  t14677 = t3172*t14560;
  t14678 = t3172*t14666;
  t14679 = t14674 + t14675 + t14652 + t14676 + t14544 + t14677 + t14678 + t14656;
  t14680 = 3.2*t6015*t14679;
  t14681 = t14636 + t14661 + t14662 + t14638 + t14671 + t14672 + t14673 + t14680;
  t14604 = t14603*t13725;
  t14607 = t13802*t14590;
  t14608 = t14604 + t14605 + t14606 + t14607;
  t14609 = 3.2*t13769*t14608;
  t14611 = -1.*t13666*t14603;
  t14613 = -1.*t13725*t14590;
  t14615 = t14611 + t14612 + t14613 + t14614;
  t14616 = 3.2*t13825*t14615;
  t14617 = t14578 + t14600 + t14609 + t14610 + t14616;
  t14708 = -1.*t10773*t14583;
  t14709 = 0.24*t10854*t13514;
  t14710 = t14708 + t14709;
  t14702 = 3.2*t14592*t13957;
  t14621 = t14620*t13725;
  t14624 = t13802*t14623;
  t14625 = t14621 + t14605 + t14606 + t14624;
  t14704 = 3.2*t14596*t14057;
  t14707 = -1.*t13802*t14590;
  t14713 = -1.*t14586*t13932;
  t14627 = -1.*t13666*t14620;
  t14628 = -1.*t13725*t14623;
  t14629 = t14627 + t14612 + t14628 + t14614;
  t14718 = t13666*t14586;
  t14731 = -0.24*t10773*t13459;
  t14732 = t14731 + t14709;
  t14722 = t14590*t13932;
  t14626 = 3.2*t13769*t14625;
  t14630 = 3.2*t13825*t14629;
  t14631 = t14600 + t14626 + t14610 + t14630;
  t14727 = 3.2*t14608*t13957;
  t14728 = 3.2*t14625*t13957;
  t14729 = -1.*t14620*t13725;
  t14730 = -1.*t13666*t14623;
  t14733 = -1.*t13666*t14732;
  t14734 = -1.*t14603*t13932;
  t14735 = -1.*t14620*t13932;
  t14736 = t14729 + t14591 + t14707 + t14730 + t14733 + t14734 + t14735 + t14713;
  t14737 = 3.2*t13813*t14736;
  t14738 = 3.2*t13775*t14615;
  t14739 = 3.2*t13775*t14629;
  t14740 = t13666*t14603;
  t14741 = t13666*t14620;
  t14742 = t14620*t13802;
  t14743 = t13725*t14623;
  t14744 = t13725*t14732;
  t14745 = t14740 + t14741 + t14718 + t14742 + t14595 + t14743 + t14744 + t14722;
  t14746 = 3.2*t13775*t14745;
  t14747 = t14702 + t14727 + t14728 + t14704 + t14737 + t14738 + t14739 + t14746;
  t14768 = 3.2*t6015*t14527;
  t14770 = 3.2*t14545*t8012;
  t14767 = 6.8*t9700*t14502;
  t14781 = 6.8*t11310*t14577;
  t14786 = 3.2*t13775*t14592;
  t14788 = 3.2*t14596*t13957;
  t14778 = -2.88*t2806;
  t14779 = 3.2*t7227*t14527;
  t14780 = 3.2*t7864*t14545;
  t14782 = 3.2*t13825*t14592;
  t14783 = 3.2*t13769*t14596;
  t14784 = t14778 + t14767 + t14779 + t14780 + t14781 + t14782 + t14783;
  t14769 = 3.2*t6015*t14536;
  t14771 = 3.2*t3208*t14552;
  t14772 = t14767 + t14768 + t14769 + t14770 + t14771;
  t14774 = 3.2*t6015*t14562;
  t14775 = 3.2*t3208*t14566;
  t14776 = t14768 + t14774 + t14770 + t14775;
  t14787 = 3.2*t13775*t14608;
  t14789 = 3.2*t13813*t14615;
  t14790 = t14781 + t14786 + t14787 + t14788 + t14789;
  t14792 = 3.2*t13775*t14625;
  t14793 = 3.2*t13813*t14629;
  t14794 = t14786 + t14792 + t14788 + t14793;
  t14802 = 0.748*t9527;
  t14803 = t14508*t2403;
  t14804 = -0.24*t223*t2403;
  t14805 = t14803 + t14804;
  t14807 = t14508*t223;
  t14808 = Power(t2403,2);
  t14809 = 0.24*t14808;
  t14810 = t14807 + t14809;
  t14814 = 3.2*t14805*t7864;
  t14815 = 3.2*t14810*t8168;
  t14816 = t14802 + t14814 + t14815;
  t14822 = Power(t223,2);
  t14823 = -0.24*t14822;
  t14824 = t14807 + t14823;
  t14831 = 3.2*t14805*t8012;
  t14818 = -1.*t14508*t2403;
  t14819 = 0.24*t223*t2403;
  t14820 = t14818 + t14819;
  t14832 = 3.2*t14810*t14008;
  t14821 = 3.2*t14820*t7864;
  t14825 = 3.2*t14824*t7227;
  t14826 = t14814 + t14821 + t14825 + t14815;
  t14835 = 3.2*t14824*t6015;
  t14836 = 3.2*t14820*t8012;
  t14837 = t14835 + t14831 + t14836 + t14832;
  t14854 = 0.748*t9700;
  t14859 = 3.2*t14805*t6015;
  t14860 = 3.2*t14810*t8012;
  t14855 = 3.2*t14810*t7864;
  t14856 = 3.2*t14805*t7227;
  t14857 = t14854 + t14855 + t14856;
  t14861 = t14854 + t14859 + t14860;
  t14863 = 3.2*t14824*t3208;
  t14864 = 3.2*t14820*t6015;
  t14865 = t14863 + t14859 + t14864 + t14860;
  t14876 = -0.384*var2[2]*t8168;
  t14877 = -0.384*var2[3]*t14008;
  t14878 = -0.384*var2[4]*t14008;
  t14879 = t14876 + t14877 + t14878;
  t14880 = var2[1]*t14879;
  t14886 = -0.384*var2[1]*t8012;
  t14887 = 0.748*t11247;
  t14888 = t14583*t13514;
  t14889 = -0.24*t13459*t13514;
  t14890 = t14888 + t14889;
  t14892 = t14583*t13459;
  t14893 = Power(t13514,2);
  t14894 = 0.24*t14893;
  t14895 = t14892 + t14894;
  t14899 = 3.2*t14890*t13769;
  t14900 = 3.2*t14895*t13960;
  t14901 = t14887 + t14899 + t14900;
  t14907 = Power(t13459,2);
  t14908 = -0.24*t14907;
  t14909 = t14892 + t14908;
  t14916 = 3.2*t14890*t13957;
  t14903 = -1.*t14583*t13514;
  t14904 = 0.24*t13459*t13514;
  t14905 = t14903 + t14904;
  t14917 = 3.2*t14895*t14057;
  t14906 = 3.2*t14905*t13769;
  t14910 = 3.2*t14909*t13825;
  t14911 = t14899 + t14906 + t14910 + t14900;
  t14920 = 3.2*t14909*t13775;
  t14921 = 3.2*t14905*t13957;
  t14922 = t14920 + t14916 + t14921 + t14917;
  t14939 = 0.748*t11310;
  t14944 = 3.2*t14890*t13775;
  t14945 = 3.2*t14895*t13957;
  t14940 = 3.2*t14895*t13769;
  t14941 = 3.2*t14890*t13825;
  t14942 = t14939 + t14940 + t14941;
  t14946 = t14939 + t14944 + t14945;
  t14948 = 3.2*t14909*t13813;
  t14949 = 3.2*t14905*t13775;
  t14950 = t14948 + t14944 + t14949 + t14945;
  t14961 = -0.384*var2[2]*t13960;
  t14962 = -0.384*var2[5]*t14057;
  t14963 = -0.384*var2[6]*t14057;
  t14964 = t14961 + t14962 + t14963;
  t14965 = var2[1]*t14964;
  t14971 = -0.384*var2[1]*t13957;
  p_output1[0]=var2[1]*(-0.5*(t11193 + t11279 + t11652 + t13416 + 9.6*t13769*t13775 + 9.6*t13813*t13825 + 3.2*t13861*t13867 + 3.2*t13872*t13891 + 3.2*t10227*t6147 + 9.6*t3208*t7227 + 9.6*t6015*t7864 + 3.2*t10651*t7899 + t9419 + t9537 + t9709 + t9712)*var2[2] - 0.5*t9713*var2[3] - 0.5*t8872*var2[4] - 0.5*t13977*var2[5] - 0.5*t13974*var2[6]);
  p_output1[1]=var2[1]*(t14021 - 0.5*t9713*var2[2] - 0.5*(t13991 + t14005 + t14007 + t14017 + t14018 + t14019 + t9419 + t9537 + t9709 + t9712)*var2[3]);
  p_output1[2]=var2[1]*(t14021 - 0.5*t8872*var2[2] - 0.5*t14020*var2[3]);
  p_output1[3]=var2[1]*(t14085 - 0.5*t13977*var2[2] - 0.5*(t11193 + t11279 + t11652 + t13416 + t14043 + t14044 + t14051 + t14075 + t14081 + t14083)*var2[5]);
  p_output1[4]=var2[1]*(t14085 - 0.5*t13974*var2[2] - 0.5*t14084*var2[5]);
  p_output1[5]=-0.5*t14264*var2[2] - 0.5*t14216*var2[3] - 0.5*t14175*var2[4] - 0.5*t14272*var2[5] - 0.5*t14270*var2[6];
  p_output1[6]=-0.5*t14264*var2[1];
  p_output1[7]=-0.5*t14216*var2[1];
  p_output1[8]=-0.5*t14175*var2[1];
  p_output1[9]=-0.5*t14272*var2[1];
  p_output1[10]=-0.5*t14270*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*Power(t13769,2) + 6.4*Power(t13825,2) + 6.4*t13775*t13867 + 6.4*t13813*t13872 + t14293 + t14295 + t14296 + t14299 + t14329 + t14330 + t14331 + t14333 + 6.4*t10651*t3208 + 6.4*t10227*t6015 + 6.4*Power(t7227,2) + 6.4*Power(t7864,2))*var2[2] - 0.5*t14300*var2[3] - 0.5*t14291*var2[4] - 0.5*t14372*var2[5] - 0.5*t14367*var2[6]);
  p_output1[12]=var2[1]*(t14403 - 0.5*t14300*var2[2] - 0.5*(t14293 + t14295 + t14296 + t14299 + t14377 + t14383 + t14388 + t14389)*var2[3]);
  p_output1[13]=var2[1]*(t14403 - 0.5*t14291*var2[2] - 0.5*t14393*var2[3]);
  p_output1[14]=var2[1]*(t14424 - 0.5*t14372*var2[2] - 0.5*(t14329 + t14330 + t14331 + t14333 + t14418 + t14419 + t14421 + t14422)*var2[5]);
  p_output1[15]=var2[1]*(t14424 - 0.5*t14367*var2[2] - 0.5*t14423*var2[5]);
  p_output1[16]=-0.5*t14460*var2[2] - 0.5*t14447*var2[3] - 0.5*t14443*var2[4] - 0.5*t14473*var2[5] - 0.5*t14468*var2[6];
  p_output1[17]=-0.5*t14460*var2[1];
  p_output1[18]=-0.5*t14447*var2[1];
  p_output1[19]=-0.5*t14443*var2[1];
  p_output1[20]=-0.5*t14473*var2[1];
  p_output1[21]=-0.5*t14468*var2[1];
  p_output1[22]=var2[1]*(-0.5*(2.88*t134 + t14503 + 3.2*t10651*t14527 + 3.2*t10227*t14545 + t14578 + 3.2*t13872*t14592 + 3.2*t13867*t14596)*var2[2] - 0.5*t14554*var2[3] - 0.5*t14568*var2[4] - 0.5*t14617*var2[5] - 0.5*t14631*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t14554*var2[2] - 0.5*(t14503 + t14636 + t14638 + 6.4*t14552*t6015 + 3.2*(t14652 + t14656 + t14531*t2695 + 2.*t14519*t3172 + t14644*t3172 + 2.*t14531*t5854)*t6015 + 3.2*t3208*(t14641 + t14647 - 1.*t14531*t3172 - 2.*t14519*t5854 - 1.*t14644*t5854 - 2.*t14531*t8009) + 6.4*t14536*t8012)*var2[3] - 0.5*t14681*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t14568*var2[2] - 0.5*t14681*var2[3] - 0.5*(t14636 + t14638 + 6.4*t14566*t6015 + 3.2*(t14652 + t14656 + t14676 + t14678 + 2.*t14560*t3172 + 2.*t14557*t5854)*t6015 + 3.2*t3208*(t14641 + t14647 + t14663 + t14667 - 2.*t14560*t5854 - 2.*t14557*t8009) + 6.4*t14562*t8012)*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t14617*var2[2] - 0.5*(t14578 + 6.4*t13957*t14608 + 6.4*t13775*t14615 + t14702 + t14704 + 3.2*t13813*(-2.*t13666*t14590 - 1.*t13725*t14603 - 2.*t13932*t14603 + t14707 - 1.*t13666*t14710 + t14713) + 3.2*t13775*(2.*t13725*t14590 + 2.*t13666*t14603 + t13802*t14603 + t13725*t14710 + t14718 + t14722))*var2[5] - 0.5*t14747*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t14631*var2[2] - 0.5*t14747*var2[5] - 0.5*(6.4*t13957*t14625 + 6.4*t13775*t14629 + t14702 + t14704 + 3.2*t13813*(-2.*t13932*t14620 - 2.*t13666*t14623 + t14707 + t14713 + t14729 + t14733) + 3.2*t13775*(2.*t13666*t14620 + 2.*t13725*t14623 + t14718 + t14722 + t14742 + t14744))*var2[6]);
  p_output1[27]=-0.5*t14784*var2[2] - 0.5*t14772*var2[3] - 0.5*t14776*var2[4] - 0.5*t14790*var2[5] - 0.5*t14794*var2[6];
  p_output1[28]=-0.5*t14784*var2[1];
  p_output1[29]=-0.5*t14772*var2[1];
  p_output1[30]=-0.5*t14776*var2[1];
  p_output1[31]=-0.5*t14790*var2[1];
  p_output1[32]=-0.5*t14794*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t14802 + 3.2*t10651*t14805 + 3.2*t10227*t14810)*var2[2] - 0.5*t14816*var2[3] - 0.5*t14826*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t14816*var2[2] - 0.5*(t14802 + t14831 + t14832)*var2[3] - 0.5*t14837*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t14826*var2[2] - 0.5*t14837*var2[3] - 0.5*(t14831 + t14832 + 3.2*t14820*t3208 + 6.4*t14824*t6015 + 3.2*(0.24*t14822 - 1.*t14508*t223)*t6015 + 6.4*t14820*t8012)*var2[4]);
  p_output1[36]=-0.5*t14857*var2[2] - 0.5*t14861*var2[3] - 0.5*t14865*var2[4];
  p_output1[37]=-0.5*t14857*var2[1];
  p_output1[38]=-0.5*t14861*var2[1];
  p_output1[39]=-0.5*t14865*var2[1];
  p_output1[40]=var2[1]*(-0.384*t10227*var2[2] - 0.384*t8168*var2[3] - 0.384*t8168*var2[4]);
  p_output1[41]=t14880;
  p_output1[42]=t14880;
  p_output1[43]=-0.384*t7864*var2[2] - 0.384*t8012*var2[3] - 0.384*t8012*var2[4];
  p_output1[44]=-0.384*t7864*var2[1];
  p_output1[45]=t14886;
  p_output1[46]=t14886;
  p_output1[47]=var2[1]*(-0.5*(t14887 + 3.2*t13872*t14890 + 3.2*t13867*t14895)*var2[2] - 0.5*t14901*var2[5] - 0.5*t14911*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t14901*var2[2] - 0.5*(t14887 + t14916 + t14917)*var2[5] - 0.5*t14922*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t14911*var2[2] - 0.5*t14922*var2[5] - 0.5*(3.2*t13813*t14905 + 6.4*t13957*t14905 + 3.2*t13775*(-1.*t13459*t14583 + 0.24*t14907) + 6.4*t13775*t14909 + t14916 + t14917)*var2[6]);
  p_output1[50]=-0.5*t14942*var2[2] - 0.5*t14946*var2[5] - 0.5*t14950*var2[6];
  p_output1[51]=-0.5*t14942*var2[1];
  p_output1[52]=-0.5*t14946*var2[1];
  p_output1[53]=-0.5*t14950*var2[1];
  p_output1[54]=var2[1]*(-0.384*t13867*var2[2] - 0.384*t13960*var2[5] - 0.384*t13960*var2[6]);
  p_output1[55]=t14965;
  p_output1[56]=t14965;
  p_output1[57]=-0.384*t13769*var2[2] - 0.384*t13957*var2[5] - 0.384*t13957*var2[6];
  p_output1[58]=-0.384*t13769*var2[1];
  p_output1[59]=t14971;
  p_output1[60]=t14971;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace DoubleSupportConstHeight
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
