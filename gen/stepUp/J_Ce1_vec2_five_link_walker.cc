/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:39:22 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2999;
  double t2973;
  double t2986;
  double t3004;
  double t3150;
  double t2909;
  double t3151;
  double t3152;
  double t3186;
  double t3196;
  double t3199;
  double t3221;
  double t3191;
  double t2997;
  double t3099;
  double t3121;
  double t3225;
  double t3224;
  double t3226;
  double t3251;
  double t3231;
  double t3232;
  double t3264;
  double t3273;
  double t3281;
  double t3252;
  double t3253;
  double t3330;
  double t3337;
  double t3338;
  double t3327;
  double t3328;
  double t3329;
  double t3341;
  double t3342;
  double t3343;
  double t3345;
  double t3355;
  double t3357;
  double t3138;
  double t3195;
  double t3227;
  double t3233;
  double t3234;
  double t3250;
  double t3257;
  double t3258;
  double t3259;
  double t3260;
  double t3285;
  double t3287;
  double t3288;
  double t3289;
  double t3290;
  double t3291;
  double t3304;
  double t3305;
  double t3316;
  double t3322;
  double t3340;
  double t3344;
  double t3360;
  double t3361;
  double t3381;
  double t3391;
  double t3394;
  double t3395;
  double t3396;
  double t3390;
  double t3392;
  double t3393;
  double t3403;
  double t3409;
  double t3423;
  double t3431;
  double t3432;
  double t3433;
  double t3436;
  double t3479;
  double t3437;
  double t3493;
  double t3494;
  double t3496;
  double t3517;
  double t3521;
  double t3559;
  double t3562;
  double t3563;
  double t3556;
  double t3569;
  double t3522;
  double t3579;
  double t3564;
  double t3570;
  double t3542;
  double t3557;
  double t3575;
  double t3577;
  double t3572;
  double t3573;
  double t3495;
  double t3523;
  double t3606;
  double t3607;
  double t3578;
  double t3614;
  double t3615;
  double t3616;
  double t3397;
  double t3429;
  double t3434;
  double t3435;
  double t3611;
  double t3612;
  double t3613;
  double t3617;
  double t3618;
  double t3619;
  double t3620;
  double t3621;
  double t3622;
  double t3623;
  double t3624;
  double t3625;
  double t3362;
  double t3378;
  double t3640;
  double t3641;
  double t3643;
  double t3644;
  double t3645;
  double t3647;
  double t3648;
  double t3649;
  double t3323;
  double t3650;
  double t3672;
  double t3630;
  double t3583;
  double t3682;
  double t3683;
  double t3684;
  double t3685;
  double t3686;
  double t3687;
  double t3688;
  double t3689;
  double t3628;
  double t3690;
  double t3697;
  double t3724;
  double t3725;
  double t3731;
  double t3735;
  double t3741;
  double t3751;
  double t3752;
  double t3753;
  double t3754;
  double t3757;
  double t3769;
  double t3770;
  double t3771;
  double t3772;
  double t3773;
  double t3774;
  double t3793;
  double t3794;
  double t3795;
  double t3796;
  double t3763;
  double t3764;
  double t3765;
  double t3766;
  double t3767;
  double t3768;
  double t3775;
  double t3776;
  double t3777;
  double t3782;
  double t3786;
  double t3790;
  double t3791;
  double t3758;
  double t3736;
  double t3799;
  double t3797;
  double t3821;
  double t3822;
  double t3826;
  double t3836;
  double t3839;
  double t3842;
  double t3843;
  double t3847;
  double t3848;
  double t3379;
  double t3376;
  double t3584;
  double t3581;
  double t3857;
  double t3858;
  double t3859;
  double t3860;
  double t3861;
  double t3880;
  double t3881;
  double t3882;
  double t3883;
  double t3849;
  double t3897;
  double t3898;
  double t3899;
  double t3900;
  double t3901;
  double t3837;
  double t3902;
  double t3903;
  double t3891;
  double t3913;
  double t3914;
  double t3915;
  double t3916;
  double t3917;
  double t3884;
  double t3918;
  double t3919;
  double t3930;
  double t3931;
  double t3936;
  double t3937;
  double t3934;
  double t3935;
  double t3938;
  double t3939;
  double t3940;
  double t3932;
  double t3928;
  double t3944;
  double t3942;
  double t3958;
  double t3959;
  double t3960;
  double t3961;
  double t3962;
  double t3963;
  double t3964;
  double t3965;
  double t3967;
  double t3968;
  double t3969;
  double t3973;
  double t3974;
  double t3975;
  double t3966;
  double t3970;
  double t3971;
  double t3972;
  double t3977;
  double t3978;
  double t3982;
  double t3983;
  double t3984;
  double t3985;
  double t3994;
  double t3995;
  double t3987;
  double t3997;
  double t3998;
  double t3989;
  double t3952;
  double t3953;
  double t3954;
  double t3955;
  double t3956;
  double t3957;
  double t4017;
  double t4018;
  double t4019;
  double t4020;
  double t4021;
  double t4022;
  double t4023;
  double t4024;
  double t4026;
  double t4027;
  double t4028;
  double t4011;
  double t4012;
  double t4013;
  double t4014;
  double t4015;
  double t4016;
  double t4025;
  double t4029;
  double t4030;
  double t4032;
  double t4033;
  double t4034;
  double t4039;
  double t4040;
  double t4041;
  double t4038;
  double t4043;
  double t4044;
  double t4048;
  double t4057;
  double t4058;
  double t4050;
  double t4060;
  double t4061;
  double t4052;
  double t3976;
  double t3979;
  double t3980;
  double t3981;
  double t3986;
  double t3988;
  double t3990;
  double t3991;
  double t3992;
  double t4080;
  double t4081;
  double t4082;
  double t4074;
  double t3996;
  double t3999;
  double t4000;
  double t4076;
  double t4079;
  double t4085;
  double t4002;
  double t4003;
  double t4004;
  double t4090;
  double t4103;
  double t4104;
  double t4094;
  double t4001;
  double t4005;
  double t4006;
  double t4099;
  double t4100;
  double t4101;
  double t4102;
  double t4105;
  double t4106;
  double t4107;
  double t4108;
  double t4109;
  double t4110;
  double t4111;
  double t4112;
  double t4113;
  double t4114;
  double t4115;
  double t4116;
  double t4117;
  double t4118;
  double t4119;
  double t4042;
  double t4045;
  double t4046;
  double t4047;
  double t4049;
  double t4051;
  double t4053;
  double t4054;
  double t4055;
  double t4146;
  double t4147;
  double t4148;
  double t4140;
  double t4059;
  double t4062;
  double t4063;
  double t4142;
  double t4145;
  double t4151;
  double t4065;
  double t4066;
  double t4067;
  double t4156;
  double t4169;
  double t4170;
  double t4160;
  double t4064;
  double t4068;
  double t4069;
  double t4165;
  double t4166;
  double t4167;
  double t4168;
  double t4171;
  double t4172;
  double t4173;
  double t4174;
  double t4175;
  double t4176;
  double t4177;
  double t4178;
  double t4179;
  double t4180;
  double t4181;
  double t4182;
  double t4183;
  double t4184;
  double t4185;
  double t4206;
  double t4208;
  double t4205;
  double t4219;
  double t4224;
  double t4226;
  double t4216;
  double t4217;
  double t4218;
  double t4220;
  double t4221;
  double t4222;
  double t4207;
  double t4209;
  double t4210;
  double t4212;
  double t4213;
  double t4214;
  double t4225;
  double t4227;
  double t4228;
  double t4230;
  double t4231;
  double t4232;
  double t4240;
  double t4241;
  double t4242;
  double t4243;
  double t4245;
  double t4246;
  double t4247;
  double t4248;
  double t4252;
  double t4253;
  double t4254;
  double t4260;
  double t4261;
  double t4262;
  double t4269;
  double t4256;
  double t4257;
  double t4258;
  double t4270;
  double t4259;
  double t4263;
  double t4264;
  double t4273;
  double t4274;
  double t4275;
  double t4292;
  double t4297;
  double t4298;
  double t4293;
  double t4294;
  double t4295;
  double t4299;
  double t4301;
  double t4302;
  double t4303;
  double t4314;
  double t4315;
  double t4316;
  double t4317;
  double t4318;
  double t4324;
  double t4325;
  double t4326;
  double t4327;
  double t4328;
  double t4330;
  double t4331;
  double t4332;
  double t4333;
  double t4337;
  double t4338;
  double t4339;
  double t4345;
  double t4346;
  double t4347;
  double t4354;
  double t4341;
  double t4342;
  double t4343;
  double t4355;
  double t4344;
  double t4348;
  double t4349;
  double t4358;
  double t4359;
  double t4360;
  double t4377;
  double t4382;
  double t4383;
  double t4378;
  double t4379;
  double t4380;
  double t4384;
  double t4386;
  double t4387;
  double t4388;
  double t4399;
  double t4400;
  double t4401;
  double t4402;
  double t4403;
  double t4409;
  t2999 = Cos(var1[3]);
  t2973 = Cos(var1[4]);
  t2986 = Sin(var1[3]);
  t3004 = Sin(var1[4]);
  t3150 = Cos(var1[2]);
  t2909 = Sin(var1[2]);
  t3151 = t2999*t2973;
  t3152 = -1.*t2986*t3004;
  t3186 = t3151 + t3152;
  t3196 = -1.*t2973*t2986;
  t3199 = -1.*t2999*t3004;
  t3221 = t3196 + t3199;
  t3191 = t3150*t3186;
  t2997 = t2973*t2986;
  t3099 = t2999*t3004;
  t3121 = t2997 + t3099;
  t3225 = -1.*t2909*t3186;
  t3224 = t3150*t3221;
  t3226 = t3224 + t3225;
  t3251 = -1.*t2909*t3221;
  t3231 = t2909*t3221;
  t3232 = t3231 + t3191;
  t3264 = -1.*t2999*t2973;
  t3273 = t2986*t3004;
  t3281 = t3264 + t3273;
  t3252 = -1.*t3150*t3186;
  t3253 = t3251 + t3252;
  t3330 = t3150*t2999;
  t3337 = -1.*t2909*t2986;
  t3338 = t3330 + t3337;
  t3327 = -1.*t2999*t2909;
  t3328 = -1.*t3150*t2986;
  t3329 = t3327 + t3328;
  t3341 = t2999*t2909;
  t3342 = t3150*t2986;
  t3343 = t3341 + t3342;
  t3345 = -1.*t3150*t2999;
  t3355 = t2909*t2986;
  t3357 = t3345 + t3355;
  t3138 = -1.*t2909*t3121;
  t3195 = t3138 + t3191;
  t3227 = 6.4*t3195*t3226;
  t3233 = -1.*t3150*t3121;
  t3234 = t3233 + t3225;
  t3250 = 3.2*t3232*t3234;
  t3257 = t3150*t3121;
  t3258 = t2909*t3186;
  t3259 = t3257 + t3258;
  t3260 = 3.2*t3253*t3259;
  t3285 = t3150*t3281;
  t3287 = t3251 + t3285;
  t3288 = 6.4*t3226*t3287;
  t3289 = -1.*t3150*t3221;
  t3290 = -1.*t2909*t3281;
  t3291 = t3289 + t3290;
  t3304 = 3.2*t3232*t3291;
  t3305 = t2909*t3281;
  t3316 = t3224 + t3305;
  t3322 = 3.2*t3253*t3316;
  t3340 = 20.4*t3329*t3338;
  t3344 = 6.8*t3343*t3338;
  t3360 = 20.4*t3329*t3357;
  t3361 = 6.8*t3343*t3357;
  t3381 = Cos(var1[5]);
  t3391 = Sin(var1[5]);
  t3394 = t3150*t3381;
  t3395 = -1.*t2909*t3391;
  t3396 = t3394 + t3395;
  t3390 = -1.*t3381*t2909;
  t3392 = -1.*t3150*t3391;
  t3393 = t3390 + t3392;
  t3403 = t3381*t2909;
  t3409 = t3150*t3391;
  t3423 = t3403 + t3409;
  t3431 = -1.*t3150*t3381;
  t3432 = t2909*t3391;
  t3433 = t3431 + t3432;
  t3436 = Cos(var1[6]);
  t3479 = Sin(var1[6]);
  t3437 = -1.*t3436*t3391;
  t3493 = -1.*t3381*t3479;
  t3494 = t3437 + t3493;
  t3496 = t3381*t3436;
  t3517 = -1.*t3391*t3479;
  t3521 = t3496 + t3517;
  t3559 = t3436*t3391;
  t3562 = t3381*t3479;
  t3563 = t3559 + t3562;
  t3556 = -1.*t2909*t3521;
  t3569 = t3150*t3521;
  t3522 = -1.*t3150*t3521;
  t3579 = t2909*t3521;
  t3564 = -1.*t2909*t3563;
  t3570 = t3564 + t3569;
  t3542 = t3150*t3494;
  t3557 = t3542 + t3556;
  t3575 = t2909*t3494;
  t3577 = t3575 + t3569;
  t3572 = -1.*t3150*t3563;
  t3573 = t3572 + t3556;
  t3495 = -1.*t2909*t3494;
  t3523 = t3495 + t3522;
  t3606 = t3150*t3563;
  t3607 = t3606 + t3579;
  t3578 = -1.*t3150*t3494;
  t3614 = -1.*t3381*t3436;
  t3615 = t3391*t3479;
  t3616 = t3614 + t3615;
  t3397 = 20.4*t3393*t3396;
  t3429 = 6.8*t3423*t3396;
  t3434 = 20.4*t3393*t3433;
  t3435 = 6.8*t3423*t3433;
  t3611 = 6.4*t3570*t3557;
  t3612 = 3.2*t3577*t3573;
  t3613 = 3.2*t3523*t3607;
  t3617 = t3150*t3616;
  t3618 = t3495 + t3617;
  t3619 = 6.4*t3557*t3618;
  t3620 = -1.*t2909*t3616;
  t3621 = t3578 + t3620;
  t3622 = 3.2*t3577*t3621;
  t3623 = t2909*t3616;
  t3624 = t3542 + t3623;
  t3625 = 3.2*t3523*t3624;
  t3362 = t3340 + t3344 + t3360 + t3361 + t3227 + t3250 + t3260 + t3288 + t3304 + t3322;
  t3378 = t2909*t3121;
  t3640 = 6.4*t3232*t3226;
  t3641 = 3.2*t3259*t3287;
  t3643 = t3378 + t3285;
  t3644 = 3.2*t3226*t3643;
  t3645 = t3257 + t3290;
  t3647 = 3.2*t3232*t3645;
  t3648 = 3.2*t3195*t3316;
  t3649 = 6.4*t3287*t3316;
  t3323 = t3227 + t3250 + t3260 + t3288 + t3304 + t3322;
  t3650 = t3640 + t3641 + t3644 + t3647 + t3648 + t3649;
  t3672 = -0.5*var2[4]*t3650;
  t3630 = t3397 + t3429 + t3434 + t3435 + t3611 + t3612 + t3613 + t3619 + t3622 + t3625;
  t3583 = t2909*t3563;
  t3682 = 6.4*t3577*t3557;
  t3683 = 3.2*t3607*t3618;
  t3684 = t3583 + t3617;
  t3685 = 3.2*t3557*t3684;
  t3686 = t3606 + t3620;
  t3687 = 3.2*t3577*t3686;
  t3688 = 3.2*t3570*t3624;
  t3689 = 6.4*t3618*t3624;
  t3628 = t3611 + t3612 + t3613 + t3619 + t3622 + t3625;
  t3690 = t3682 + t3683 + t3685 + t3687 + t3688 + t3689;
  t3697 = -0.5*var2[6]*t3690;
  t3724 = 3.2*t3232*t3195;
  t3725 = 3.2*t3226*t3259;
  t3731 = 3.2*t3232*t3287;
  t3735 = 3.2*t3226*t3316;
  t3741 = Power(t3329,2);
  t3751 = 6.8*t3741;
  t3752 = 6.8*t3329*t3343;
  t3753 = Power(t3338,2);
  t3754 = 6.8*t3753;
  t3757 = 6.8*t3338*t3357;
  t3769 = Power(t3393,2);
  t3770 = 6.8*t3769;
  t3771 = 6.8*t3393*t3423;
  t3772 = Power(t3396,2);
  t3773 = 6.8*t3772;
  t3774 = 6.8*t3396*t3433;
  t3793 = 3.2*t3577*t3570;
  t3794 = 3.2*t3557*t3607;
  t3795 = 3.2*t3577*t3618;
  t3796 = 3.2*t3557*t3624;
  t3763 = 3.2*t3253*t3232;
  t3764 = Power(t3195,2);
  t3765 = 3.2*t3764;
  t3766 = Power(t3226,2);
  t3767 = 3.2*t3766;
  t3768 = 3.2*t3234*t3259;
  t3775 = 3.2*t3523*t3577;
  t3776 = Power(t3570,2);
  t3777 = 3.2*t3776;
  t3782 = Power(t3557,2);
  t3786 = 3.2*t3782;
  t3790 = 3.2*t3573*t3607;
  t3791 = t3751 + t3752 + t3754 + t3757 + t3763 + t3765 + t3767 + t3768 + t3770 + t3771 + t3773 + t3774 + t3775 + t3777 + t3786 + t3790;
  t3758 = t3751 + t3752 + t3754 + t3757 + t3724 + t3725 + t3731 + t3735;
  t3736 = t3724 + t3725 + t3731 + t3735;
  t3799 = t3770 + t3771 + t3773 + t3774 + t3793 + t3794 + t3795 + t3796;
  t3797 = t3793 + t3794 + t3795 + t3796;
  t3821 = 6.4*t3253*t3195;
  t3822 = 6.4*t3226*t3234;
  t3826 = 6.4*t3253*t3287;
  t3836 = 6.4*t3226*t3291;
  t3839 = 13.6*t3741;
  t3842 = 13.6*t3329*t3343;
  t3843 = 13.6*t3338*t3357;
  t3847 = Power(t3357,2);
  t3848 = 13.6*t3847;
  t3379 = t3378 + t3252;
  t3376 = t3289 + t3258;
  t3584 = t3583 + t3522;
  t3581 = t3578 + t3579;
  t3857 = 13.6*t3769;
  t3858 = 13.6*t3393*t3423;
  t3859 = 13.6*t3396*t3433;
  t3860 = Power(t3433,2);
  t3861 = 13.6*t3860;
  t3880 = 6.4*t3523*t3570;
  t3881 = 6.4*t3557*t3573;
  t3882 = 6.4*t3523*t3618;
  t3883 = 6.4*t3557*t3621;
  t3849 = t3839 + t3842 + t3843 + t3848 + t3821 + t3822 + t3826 + t3836;
  t3897 = 6.4*t3766;
  t3898 = 6.4*t3195*t3287;
  t3899 = Power(t3287,2);
  t3900 = 6.4*t3899;
  t3901 = 6.4*t3226*t3645;
  t3837 = t3821 + t3822 + t3826 + t3836;
  t3902 = t3897 + t3898 + t3900 + t3901;
  t3903 = -0.5*var2[4]*t3902;
  t3891 = t3857 + t3858 + t3859 + t3861 + t3880 + t3881 + t3882 + t3883;
  t3913 = 6.4*t3782;
  t3914 = 6.4*t3570*t3618;
  t3915 = Power(t3618,2);
  t3916 = 6.4*t3915;
  t3917 = 6.4*t3557*t3686;
  t3884 = t3880 + t3881 + t3882 + t3883;
  t3918 = t3913 + t3914 + t3916 + t3917;
  t3919 = -0.5*var2[6]*t3918;
  t3930 = 13.6*t3329*t3338;
  t3931 = 13.6*t3329*t3357;
  t3936 = 13.6*t3393*t3396;
  t3937 = 13.6*t3393*t3433;
  t3934 = 6.4*t3253*t3226;
  t3935 = 6.4*t3195*t3234;
  t3938 = 6.4*t3523*t3557;
  t3939 = 6.4*t3570*t3573;
  t3940 = t3930 + t3931 + t3934 + t3935 + t3936 + t3937 + t3938 + t3939;
  t3932 = t3930 + t3931 + t3227 + t3288;
  t3928 = t3227 + t3288;
  t3944 = t3936 + t3937 + t3611 + t3619;
  t3942 = t3611 + t3619;
  t3958 = -1.*t2973;
  t3959 = 1. + t3958;
  t3960 = 0.4*t3959;
  t3961 = 0.64*t2973;
  t3962 = t3960 + t3961;
  t3963 = t3962*t2986;
  t3964 = 0.24*t2999*t3004;
  t3965 = t3963 + t3964;
  t3967 = t2999*t3962;
  t3968 = -0.24*t2986*t3004;
  t3969 = t3967 + t3968;
  t3973 = -1.*t3962*t2986;
  t3974 = -0.24*t2999*t3004;
  t3975 = t3973 + t3974;
  t3966 = -1.*t3965*t3186;
  t3970 = -1.*t3221*t3969;
  t3971 = t3966 + t3970;
  t3972 = 3.2*t3253*t3971;
  t3977 = t3965*t3186;
  t3978 = t3221*t3969;
  t3982 = t3965*t3121;
  t3983 = t3186*t3969;
  t3984 = t3982 + t3983;
  t3985 = 3.2*t3984*t3291;
  t3994 = -0.24*t2973*t2986;
  t3995 = t3994 + t3974;
  t3987 = -1.*t3221*t3965;
  t3997 = 0.24*t2999*t2973;
  t3998 = t3997 + t3968;
  t3989 = -1.*t3969*t3281;
  t3952 = Power(t2999,2);
  t3953 = 0.11*t3952;
  t3954 = Power(t2986,2);
  t3955 = 0.11*t3954;
  t3956 = t3953 + t3955;
  t3957 = 6.8*t3343*t3956;
  t4017 = -1.*t3436;
  t4018 = 1. + t4017;
  t4019 = 0.4*t4018;
  t4020 = 0.64*t3436;
  t4021 = t4019 + t4020;
  t4022 = t4021*t3391;
  t4023 = 0.24*t3381*t3479;
  t4024 = t4022 + t4023;
  t4026 = t3381*t4021;
  t4027 = -0.24*t3391*t3479;
  t4028 = t4026 + t4027;
  t4011 = Power(t3381,2);
  t4012 = 0.11*t4011;
  t4013 = Power(t3391,2);
  t4014 = 0.11*t4013;
  t4015 = t4012 + t4014;
  t4016 = 6.8*t3423*t4015;
  t4025 = -1.*t4024*t3521;
  t4029 = -1.*t3494*t4028;
  t4030 = t4025 + t4029;
  t4032 = t4024*t3563;
  t4033 = t3521*t4028;
  t4034 = t4032 + t4033;
  t4039 = -1.*t4021*t3391;
  t4040 = -0.24*t3381*t3479;
  t4041 = t4039 + t4040;
  t4038 = 3.2*t3523*t4030;
  t4043 = t4024*t3521;
  t4044 = t3494*t4028;
  t4048 = 3.2*t4034*t3621;
  t4057 = -0.24*t3436*t3391;
  t4058 = t4057 + t4040;
  t4050 = -1.*t3494*t4024;
  t4060 = 0.24*t3381*t3436;
  t4061 = t4060 + t4027;
  t4052 = -1.*t4028*t3616;
  t3976 = t3975*t3186;
  t3979 = t3121*t3969;
  t3980 = t3976 + t3977 + t3978 + t3979;
  t3981 = 3.2*t3253*t3980;
  t3986 = -1.*t3221*t3975;
  t3988 = -1.*t3186*t3969;
  t3990 = t3986 + t3987 + t3988 + t3989;
  t3991 = 3.2*t3234*t3990;
  t3992 = t3957 + t3972 + t3981 + t3985 + t3991;
  t4080 = -1.*t2999*t3962;
  t4081 = 0.24*t2986*t3004;
  t4082 = t4080 + t4081;
  t4074 = 3.2*t3971*t3287;
  t3996 = t3995*t3186;
  t3999 = t3121*t3998;
  t4000 = t3996 + t3977 + t3978 + t3999;
  t4076 = 3.2*t3984*t3645;
  t4079 = -1.*t3121*t3969;
  t4085 = -1.*t3965*t3281;
  t4002 = -1.*t3221*t3995;
  t4003 = -1.*t3186*t3998;
  t4004 = t4002 + t3987 + t4003 + t3989;
  t4090 = t3221*t3965;
  t4103 = -0.24*t2999*t2973;
  t4104 = t4103 + t4081;
  t4094 = t3969*t3281;
  t4001 = 3.2*t3253*t4000;
  t4005 = 3.2*t3234*t4004;
  t4006 = t3972 + t4001 + t3985 + t4005;
  t4099 = 3.2*t3980*t3287;
  t4100 = 3.2*t4000*t3287;
  t4101 = -1.*t3995*t3186;
  t4102 = -1.*t3221*t3998;
  t4105 = -1.*t3221*t4104;
  t4106 = -1.*t3975*t3281;
  t4107 = -1.*t3995*t3281;
  t4108 = t4101 + t3970 + t4079 + t4102 + t4105 + t4106 + t4107 + t4085;
  t4109 = 3.2*t3195*t4108;
  t4110 = 3.2*t3226*t3990;
  t4111 = 3.2*t3226*t4004;
  t4112 = t3221*t3975;
  t4113 = t3221*t3995;
  t4114 = t3995*t3121;
  t4115 = t3186*t3998;
  t4116 = t3186*t4104;
  t4117 = t4112 + t4113 + t4090 + t4114 + t3983 + t4115 + t4116 + t4094;
  t4118 = 3.2*t3226*t4117;
  t4119 = t4074 + t4099 + t4100 + t4076 + t4109 + t4110 + t4111 + t4118;
  t4042 = t4041*t3521;
  t4045 = t3563*t4028;
  t4046 = t4042 + t4043 + t4044 + t4045;
  t4047 = 3.2*t3523*t4046;
  t4049 = -1.*t3494*t4041;
  t4051 = -1.*t3521*t4028;
  t4053 = t4049 + t4050 + t4051 + t4052;
  t4054 = 3.2*t3573*t4053;
  t4055 = t4016 + t4038 + t4047 + t4048 + t4054;
  t4146 = -1.*t3381*t4021;
  t4147 = 0.24*t3391*t3479;
  t4148 = t4146 + t4147;
  t4140 = 3.2*t4030*t3618;
  t4059 = t4058*t3521;
  t4062 = t3563*t4061;
  t4063 = t4059 + t4043 + t4044 + t4062;
  t4142 = 3.2*t4034*t3686;
  t4145 = -1.*t3563*t4028;
  t4151 = -1.*t4024*t3616;
  t4065 = -1.*t3494*t4058;
  t4066 = -1.*t3521*t4061;
  t4067 = t4065 + t4050 + t4066 + t4052;
  t4156 = t3494*t4024;
  t4169 = -0.24*t3381*t3436;
  t4170 = t4169 + t4147;
  t4160 = t4028*t3616;
  t4064 = 3.2*t3523*t4063;
  t4068 = 3.2*t3573*t4067;
  t4069 = t4038 + t4064 + t4048 + t4068;
  t4165 = 3.2*t4046*t3618;
  t4166 = 3.2*t4063*t3618;
  t4167 = -1.*t4058*t3521;
  t4168 = -1.*t3494*t4061;
  t4171 = -1.*t3494*t4170;
  t4172 = -1.*t4041*t3616;
  t4173 = -1.*t4058*t3616;
  t4174 = t4167 + t4029 + t4145 + t4168 + t4171 + t4172 + t4173 + t4151;
  t4175 = 3.2*t3570*t4174;
  t4176 = 3.2*t3557*t4053;
  t4177 = 3.2*t3557*t4067;
  t4178 = t3494*t4041;
  t4179 = t3494*t4058;
  t4180 = t4058*t3563;
  t4181 = t3521*t4061;
  t4182 = t3521*t4170;
  t4183 = t4178 + t4179 + t4156 + t4180 + t4033 + t4181 + t4182 + t4160;
  t4184 = 3.2*t3557*t4183;
  t4185 = t4140 + t4165 + t4166 + t4142 + t4175 + t4176 + t4177 + t4184;
  t4206 = 3.2*t3226*t3971;
  t4208 = 3.2*t3984*t3287;
  t4205 = 6.8*t3357*t3956;
  t4219 = 6.8*t3433*t4015;
  t4224 = 3.2*t3557*t4030;
  t4226 = 3.2*t4034*t3618;
  t4216 = -2.88*t3150;
  t4217 = 3.2*t3234*t3971;
  t4218 = 3.2*t3253*t3984;
  t4220 = 3.2*t3573*t4030;
  t4221 = 3.2*t3523*t4034;
  t4222 = t4216 + t4205 + t4217 + t4218 + t4219 + t4220 + t4221;
  t4207 = 3.2*t3226*t3980;
  t4209 = 3.2*t3195*t3990;
  t4210 = t4205 + t4206 + t4207 + t4208 + t4209;
  t4212 = 3.2*t3226*t4000;
  t4213 = 3.2*t3195*t4004;
  t4214 = t4206 + t4212 + t4208 + t4213;
  t4225 = 3.2*t3557*t4046;
  t4227 = 3.2*t3570*t4053;
  t4228 = t4219 + t4224 + t4225 + t4226 + t4227;
  t4230 = 3.2*t3557*t4063;
  t4231 = 3.2*t3570*t4067;
  t4232 = t4224 + t4230 + t4226 + t4231;
  t4240 = 0.748*t3343;
  t4241 = t3962*t3004;
  t4242 = -0.24*t2973*t3004;
  t4243 = t4241 + t4242;
  t4245 = t3962*t2973;
  t4246 = Power(t3004,2);
  t4247 = 0.24*t4246;
  t4248 = t4245 + t4247;
  t4252 = 3.2*t4243*t3253;
  t4253 = 3.2*t4248*t3291;
  t4254 = t4240 + t4252 + t4253;
  t4260 = Power(t2973,2);
  t4261 = -0.24*t4260;
  t4262 = t4245 + t4261;
  t4269 = 3.2*t4243*t3287;
  t4256 = -1.*t3962*t3004;
  t4257 = 0.24*t2973*t3004;
  t4258 = t4256 + t4257;
  t4270 = 3.2*t4248*t3645;
  t4259 = 3.2*t4258*t3253;
  t4263 = 3.2*t4262*t3234;
  t4264 = t4252 + t4259 + t4263 + t4253;
  t4273 = 3.2*t4262*t3226;
  t4274 = 3.2*t4258*t3287;
  t4275 = t4273 + t4269 + t4274 + t4270;
  t4292 = 0.748*t3357;
  t4297 = 3.2*t4243*t3226;
  t4298 = 3.2*t4248*t3287;
  t4293 = 3.2*t4248*t3253;
  t4294 = 3.2*t4243*t3234;
  t4295 = t4292 + t4293 + t4294;
  t4299 = t4292 + t4297 + t4298;
  t4301 = 3.2*t4262*t3195;
  t4302 = 3.2*t4258*t3226;
  t4303 = t4301 + t4297 + t4302 + t4298;
  t4314 = -0.384*var2[2]*t3291;
  t4315 = -0.384*var2[3]*t3645;
  t4316 = -0.384*var2[4]*t3645;
  t4317 = t4314 + t4315 + t4316;
  t4318 = var2[1]*t4317;
  t4324 = -0.384*var2[1]*t3287;
  t4325 = 0.748*t3423;
  t4326 = t4021*t3479;
  t4327 = -0.24*t3436*t3479;
  t4328 = t4326 + t4327;
  t4330 = t4021*t3436;
  t4331 = Power(t3479,2);
  t4332 = 0.24*t4331;
  t4333 = t4330 + t4332;
  t4337 = 3.2*t4328*t3523;
  t4338 = 3.2*t4333*t3621;
  t4339 = t4325 + t4337 + t4338;
  t4345 = Power(t3436,2);
  t4346 = -0.24*t4345;
  t4347 = t4330 + t4346;
  t4354 = 3.2*t4328*t3618;
  t4341 = -1.*t4021*t3479;
  t4342 = 0.24*t3436*t3479;
  t4343 = t4341 + t4342;
  t4355 = 3.2*t4333*t3686;
  t4344 = 3.2*t4343*t3523;
  t4348 = 3.2*t4347*t3573;
  t4349 = t4337 + t4344 + t4348 + t4338;
  t4358 = 3.2*t4347*t3557;
  t4359 = 3.2*t4343*t3618;
  t4360 = t4358 + t4354 + t4359 + t4355;
  t4377 = 0.748*t3433;
  t4382 = 3.2*t4328*t3557;
  t4383 = 3.2*t4333*t3618;
  t4378 = 3.2*t4333*t3523;
  t4379 = 3.2*t4328*t3573;
  t4380 = t4377 + t4378 + t4379;
  t4384 = t4377 + t4382 + t4383;
  t4386 = 3.2*t4347*t3570;
  t4387 = 3.2*t4343*t3557;
  t4388 = t4386 + t4382 + t4387 + t4383;
  t4399 = -0.384*var2[2]*t3621;
  t4400 = -0.384*var2[5]*t3686;
  t4401 = -0.384*var2[6]*t3686;
  t4402 = t4399 + t4400 + t4401;
  t4403 = var2[1]*t4402;
  t4409 = -0.384*var2[1]*t3618;
  p_output1[0]=var2[1]*(-0.5*(9.6*t3195*t3234 + 9.6*t3226*t3253 + t3340 + t3344 + t3360 + t3361 + 3.2*t3232*t3376 + 3.2*t3259*t3379 + t3397 + t3429 + t3434 + t3435 + 9.6*t3523*t3557 + 9.6*t3570*t3573 + 3.2*t3577*t3581 + 3.2*t3584*t3607)*var2[2] - 0.5*t3362*var2[3] - 0.5*t3323*var2[4] - 0.5*t3630*var2[5] - 0.5*t3628*var2[6]);
  p_output1[1]=var2[1]*(t3672 - 0.5*t3362*var2[2] - 0.5*(t3340 + t3344 + t3360 + t3361 + t3640 + t3641 + t3644 + t3647 + t3648 + t3649)*var2[3]);
  p_output1[2]=var2[1]*(t3672 - 0.5*t3323*var2[2] - 0.5*t3650*var2[3]);
  p_output1[3]=var2[1]*(t3697 - 0.5*t3630*var2[2] - 0.5*(t3397 + t3429 + t3434 + t3435 + t3682 + t3683 + t3685 + t3687 + t3688 + t3689)*var2[5]);
  p_output1[4]=var2[1]*(t3697 - 0.5*t3628*var2[2] - 0.5*t3690*var2[5]);
  p_output1[5]=-0.5*t3791*var2[2] - 0.5*t3758*var2[3] - 0.5*t3736*var2[4] - 0.5*t3799*var2[5] - 0.5*t3797*var2[6];
  p_output1[6]=-0.5*t3791*var2[1];
  p_output1[7]=-0.5*t3758*var2[1];
  p_output1[8]=-0.5*t3736*var2[1];
  p_output1[9]=-0.5*t3799*var2[1];
  p_output1[10]=-0.5*t3797*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*Power(t3234,2) + 6.4*Power(t3253,2) + 6.4*t3226*t3376 + 6.4*t3195*t3379 + 6.4*Power(t3523,2) + 6.4*Power(t3573,2) + 6.4*t3557*t3581 + 6.4*t3570*t3584 + t3839 + t3842 + t3843 + t3848 + t3857 + t3858 + t3859 + t3861)*var2[2] - 0.5*t3849*var2[3] - 0.5*t3837*var2[4] - 0.5*t3891*var2[5] - 0.5*t3884*var2[6]);
  p_output1[12]=var2[1]*(t3903 - 0.5*t3849*var2[2] - 0.5*(t3839 + t3842 + t3843 + t3848 + t3897 + t3898 + t3900 + t3901)*var2[3]);
  p_output1[13]=var2[1]*(t3903 - 0.5*t3837*var2[2] - 0.5*t3902*var2[3]);
  p_output1[14]=var2[1]*(t3919 - 0.5*t3891*var2[2] - 0.5*(t3857 + t3858 + t3859 + t3861 + t3913 + t3914 + t3916 + t3917)*var2[5]);
  p_output1[15]=var2[1]*(t3919 - 0.5*t3884*var2[2] - 0.5*t3918*var2[5]);
  p_output1[16]=-0.5*t3940*var2[2] - 0.5*t3932*var2[3] - 0.5*t3928*var2[4] - 0.5*t3944*var2[5] - 0.5*t3942*var2[6];
  p_output1[17]=-0.5*t3940*var2[1];
  p_output1[18]=-0.5*t3932*var2[1];
  p_output1[19]=-0.5*t3928*var2[1];
  p_output1[20]=-0.5*t3944*var2[1];
  p_output1[21]=-0.5*t3942*var2[1];
  p_output1[22]=var2[1]*(-0.5*(2.88*t2909 + t3957 + 3.2*t3379*t3971 + 3.2*t3376*t3984 + t4016 + 3.2*t3584*t4030 + 3.2*t3581*t4034)*var2[2] - 0.5*t3992*var2[3] - 0.5*t4006*var2[4] - 0.5*t4055*var2[5] - 0.5*t4069*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t3992*var2[2] - 0.5*(t3957 + 6.4*t3287*t3980 + 6.4*t3226*t3990 + t4074 + t4076 + 3.2*t3195*(-2.*t3221*t3969 - 1.*t3186*t3975 - 2.*t3281*t3975 + t4079 - 1.*t3221*t4082 + t4085) + 3.2*t3226*(2.*t3186*t3969 + t3121*t3975 + 2.*t3221*t3975 + t3186*t4082 + t4090 + t4094))*var2[3] - 0.5*t4119*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t4006*var2[2] - 0.5*t4119*var2[3] - 0.5*(6.4*t3287*t4000 + 6.4*t3226*t4004 + t4074 + t4076 + 3.2*t3195*(-2.*t3281*t3995 - 2.*t3221*t3998 + t4079 + t4085 + t4101 + t4105) + 3.2*t3226*(2.*t3221*t3995 + 2.*t3186*t3998 + t4090 + t4094 + t4114 + t4116))*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t4055*var2[2] - 0.5*(t4016 + 6.4*t3618*t4046 + 6.4*t3557*t4053 + t4140 + t4142 + 3.2*t3570*(-2.*t3494*t4028 - 1.*t3521*t4041 - 2.*t3616*t4041 + t4145 - 1.*t3494*t4148 + t4151) + 3.2*t3557*(2.*t3521*t4028 + 2.*t3494*t4041 + t3563*t4041 + t3521*t4148 + t4156 + t4160))*var2[5] - 0.5*t4185*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t4069*var2[2] - 0.5*t4185*var2[5] - 0.5*(6.4*t3618*t4063 + 6.4*t3557*t4067 + t4140 + t4142 + 3.2*t3570*(-2.*t3616*t4058 - 2.*t3494*t4061 + t4145 + t4151 + t4167 + t4171) + 3.2*t3557*(2.*t3494*t4058 + 2.*t3521*t4061 + t4156 + t4160 + t4180 + t4182))*var2[6]);
  p_output1[27]=-0.5*t4222*var2[2] - 0.5*t4210*var2[3] - 0.5*t4214*var2[4] - 0.5*t4228*var2[5] - 0.5*t4232*var2[6];
  p_output1[28]=-0.5*t4222*var2[1];
  p_output1[29]=-0.5*t4210*var2[1];
  p_output1[30]=-0.5*t4214*var2[1];
  p_output1[31]=-0.5*t4228*var2[1];
  p_output1[32]=-0.5*t4232*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t4240 + 3.2*t3379*t4243 + 3.2*t3376*t4248)*var2[2] - 0.5*t4254*var2[3] - 0.5*t4264*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t4254*var2[2] - 0.5*(t4240 + t4269 + t4270)*var2[3] - 0.5*t4275*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t4264*var2[2] - 0.5*t4275*var2[3] - 0.5*(3.2*t3195*t4258 + 6.4*t3287*t4258 + 3.2*t3226*(-1.*t2973*t3962 + 0.24*t4260) + 6.4*t3226*t4262 + t4269 + t4270)*var2[4]);
  p_output1[36]=-0.5*t4295*var2[2] - 0.5*t4299*var2[3] - 0.5*t4303*var2[4];
  p_output1[37]=-0.5*t4295*var2[1];
  p_output1[38]=-0.5*t4299*var2[1];
  p_output1[39]=-0.5*t4303*var2[1];
  p_output1[40]=var2[1]*(-0.384*t3376*var2[2] - 0.384*t3291*var2[3] - 0.384*t3291*var2[4]);
  p_output1[41]=t4318;
  p_output1[42]=t4318;
  p_output1[43]=-0.384*t3253*var2[2] - 0.384*t3287*var2[3] - 0.384*t3287*var2[4];
  p_output1[44]=-0.384*t3253*var2[1];
  p_output1[45]=t4324;
  p_output1[46]=t4324;
  p_output1[47]=var2[1]*(-0.5*(t4325 + 3.2*t3584*t4328 + 3.2*t3581*t4333)*var2[2] - 0.5*t4339*var2[5] - 0.5*t4349*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t4339*var2[2] - 0.5*(t4325 + t4354 + t4355)*var2[5] - 0.5*t4360*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t4349*var2[2] - 0.5*t4360*var2[5] - 0.5*(3.2*t3570*t4343 + 6.4*t3618*t4343 + 3.2*t3557*(-1.*t3436*t4021 + 0.24*t4345) + 6.4*t3557*t4347 + t4354 + t4355)*var2[6]);
  p_output1[50]=-0.5*t4380*var2[2] - 0.5*t4384*var2[5] - 0.5*t4388*var2[6];
  p_output1[51]=-0.5*t4380*var2[1];
  p_output1[52]=-0.5*t4384*var2[1];
  p_output1[53]=-0.5*t4388*var2[1];
  p_output1[54]=var2[1]*(-0.384*t3581*var2[2] - 0.384*t3621*var2[5] - 0.384*t3621*var2[6]);
  p_output1[55]=t4403;
  p_output1[56]=t4403;
  p_output1[57]=-0.384*t3523*var2[2] - 0.384*t3618*var2[5] - 0.384*t3618*var2[6];
  p_output1[58]=-0.384*t3523*var2[1];
  p_output1[59]=t4409;
  p_output1[60]=t4409;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
