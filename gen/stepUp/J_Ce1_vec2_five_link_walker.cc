/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:20:18 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t2962;
  double t2936;
  double t2949;
  double t2967;
  double t3113;
  double t2872;
  double t3114;
  double t3115;
  double t3149;
  double t3159;
  double t3162;
  double t3184;
  double t3154;
  double t2960;
  double t3062;
  double t3084;
  double t3188;
  double t3187;
  double t3189;
  double t3214;
  double t3194;
  double t3195;
  double t3227;
  double t3236;
  double t3244;
  double t3215;
  double t3216;
  double t3293;
  double t3300;
  double t3301;
  double t3290;
  double t3291;
  double t3292;
  double t3304;
  double t3305;
  double t3306;
  double t3308;
  double t3318;
  double t3320;
  double t3101;
  double t3158;
  double t3190;
  double t3196;
  double t3197;
  double t3213;
  double t3220;
  double t3221;
  double t3222;
  double t3223;
  double t3248;
  double t3250;
  double t3251;
  double t3252;
  double t3253;
  double t3254;
  double t3267;
  double t3268;
  double t3279;
  double t3285;
  double t3303;
  double t3307;
  double t3323;
  double t3324;
  double t3344;
  double t3354;
  double t3357;
  double t3358;
  double t3359;
  double t3353;
  double t3355;
  double t3356;
  double t3366;
  double t3372;
  double t3386;
  double t3394;
  double t3395;
  double t3396;
  double t3399;
  double t3442;
  double t3400;
  double t3456;
  double t3457;
  double t3459;
  double t3480;
  double t3484;
  double t3522;
  double t3525;
  double t3526;
  double t3519;
  double t3532;
  double t3485;
  double t3542;
  double t3527;
  double t3533;
  double t3505;
  double t3520;
  double t3538;
  double t3540;
  double t3535;
  double t3536;
  double t3458;
  double t3486;
  double t3569;
  double t3570;
  double t3541;
  double t3577;
  double t3578;
  double t3579;
  double t3360;
  double t3392;
  double t3397;
  double t3398;
  double t3574;
  double t3575;
  double t3576;
  double t3580;
  double t3581;
  double t3582;
  double t3583;
  double t3584;
  double t3585;
  double t3586;
  double t3587;
  double t3588;
  double t3325;
  double t3341;
  double t3603;
  double t3604;
  double t3606;
  double t3607;
  double t3608;
  double t3610;
  double t3611;
  double t3612;
  double t3286;
  double t3613;
  double t3635;
  double t3593;
  double t3546;
  double t3645;
  double t3646;
  double t3647;
  double t3648;
  double t3649;
  double t3650;
  double t3651;
  double t3652;
  double t3591;
  double t3653;
  double t3660;
  double t3687;
  double t3688;
  double t3694;
  double t3698;
  double t3704;
  double t3714;
  double t3715;
  double t3716;
  double t3717;
  double t3720;
  double t3732;
  double t3733;
  double t3734;
  double t3735;
  double t3736;
  double t3737;
  double t3756;
  double t3757;
  double t3758;
  double t3759;
  double t3726;
  double t3727;
  double t3728;
  double t3729;
  double t3730;
  double t3731;
  double t3738;
  double t3739;
  double t3740;
  double t3745;
  double t3749;
  double t3753;
  double t3754;
  double t3721;
  double t3699;
  double t3762;
  double t3760;
  double t3784;
  double t3785;
  double t3789;
  double t3799;
  double t3802;
  double t3805;
  double t3806;
  double t3810;
  double t3811;
  double t3342;
  double t3339;
  double t3547;
  double t3544;
  double t3820;
  double t3821;
  double t3822;
  double t3823;
  double t3824;
  double t3843;
  double t3844;
  double t3845;
  double t3846;
  double t3812;
  double t3860;
  double t3861;
  double t3862;
  double t3863;
  double t3864;
  double t3800;
  double t3865;
  double t3866;
  double t3854;
  double t3876;
  double t3877;
  double t3878;
  double t3879;
  double t3880;
  double t3847;
  double t3881;
  double t3882;
  double t3893;
  double t3894;
  double t3899;
  double t3900;
  double t3897;
  double t3898;
  double t3901;
  double t3902;
  double t3903;
  double t3895;
  double t3891;
  double t3907;
  double t3905;
  double t3921;
  double t3922;
  double t3923;
  double t3924;
  double t3925;
  double t3926;
  double t3927;
  double t3928;
  double t3930;
  double t3931;
  double t3932;
  double t3936;
  double t3937;
  double t3938;
  double t3929;
  double t3933;
  double t3934;
  double t3935;
  double t3940;
  double t3941;
  double t3945;
  double t3946;
  double t3947;
  double t3948;
  double t3957;
  double t3958;
  double t3950;
  double t3960;
  double t3961;
  double t3952;
  double t3915;
  double t3916;
  double t3917;
  double t3918;
  double t3919;
  double t3920;
  double t3980;
  double t3981;
  double t3982;
  double t3983;
  double t3984;
  double t3985;
  double t3986;
  double t3987;
  double t3989;
  double t3990;
  double t3991;
  double t3974;
  double t3975;
  double t3976;
  double t3977;
  double t3978;
  double t3979;
  double t3988;
  double t3992;
  double t3993;
  double t3995;
  double t3996;
  double t3997;
  double t4002;
  double t4003;
  double t4004;
  double t4001;
  double t4006;
  double t4007;
  double t4011;
  double t4020;
  double t4021;
  double t4013;
  double t4023;
  double t4024;
  double t4015;
  double t3939;
  double t3942;
  double t3943;
  double t3944;
  double t3949;
  double t3951;
  double t3953;
  double t3954;
  double t3955;
  double t4043;
  double t4044;
  double t4045;
  double t4037;
  double t3959;
  double t3962;
  double t3963;
  double t4039;
  double t4042;
  double t4048;
  double t3965;
  double t3966;
  double t3967;
  double t4053;
  double t4066;
  double t4067;
  double t4057;
  double t3964;
  double t3968;
  double t3969;
  double t4062;
  double t4063;
  double t4064;
  double t4065;
  double t4068;
  double t4069;
  double t4070;
  double t4071;
  double t4072;
  double t4073;
  double t4074;
  double t4075;
  double t4076;
  double t4077;
  double t4078;
  double t4079;
  double t4080;
  double t4081;
  double t4082;
  double t4005;
  double t4008;
  double t4009;
  double t4010;
  double t4012;
  double t4014;
  double t4016;
  double t4017;
  double t4018;
  double t4109;
  double t4110;
  double t4111;
  double t4103;
  double t4022;
  double t4025;
  double t4026;
  double t4105;
  double t4108;
  double t4114;
  double t4028;
  double t4029;
  double t4030;
  double t4119;
  double t4132;
  double t4133;
  double t4123;
  double t4027;
  double t4031;
  double t4032;
  double t4128;
  double t4129;
  double t4130;
  double t4131;
  double t4134;
  double t4135;
  double t4136;
  double t4137;
  double t4138;
  double t4139;
  double t4140;
  double t4141;
  double t4142;
  double t4143;
  double t4144;
  double t4145;
  double t4146;
  double t4147;
  double t4148;
  double t4169;
  double t4171;
  double t4168;
  double t4182;
  double t4187;
  double t4189;
  double t4179;
  double t4180;
  double t4181;
  double t4183;
  double t4184;
  double t4185;
  double t4170;
  double t4172;
  double t4173;
  double t4175;
  double t4176;
  double t4177;
  double t4188;
  double t4190;
  double t4191;
  double t4193;
  double t4194;
  double t4195;
  double t4203;
  double t4204;
  double t4205;
  double t4206;
  double t4208;
  double t4209;
  double t4210;
  double t4211;
  double t4215;
  double t4216;
  double t4217;
  double t4223;
  double t4224;
  double t4225;
  double t4232;
  double t4219;
  double t4220;
  double t4221;
  double t4233;
  double t4222;
  double t4226;
  double t4227;
  double t4236;
  double t4237;
  double t4238;
  double t4255;
  double t4260;
  double t4261;
  double t4256;
  double t4257;
  double t4258;
  double t4262;
  double t4264;
  double t4265;
  double t4266;
  double t4277;
  double t4278;
  double t4279;
  double t4280;
  double t4281;
  double t4287;
  double t4288;
  double t4289;
  double t4290;
  double t4291;
  double t4293;
  double t4294;
  double t4295;
  double t4296;
  double t4300;
  double t4301;
  double t4302;
  double t4308;
  double t4309;
  double t4310;
  double t4317;
  double t4304;
  double t4305;
  double t4306;
  double t4318;
  double t4307;
  double t4311;
  double t4312;
  double t4321;
  double t4322;
  double t4323;
  double t4340;
  double t4345;
  double t4346;
  double t4341;
  double t4342;
  double t4343;
  double t4347;
  double t4349;
  double t4350;
  double t4351;
  double t4362;
  double t4363;
  double t4364;
  double t4365;
  double t4366;
  double t4372;
  t2962 = Cos(var1[3]);
  t2936 = Cos(var1[4]);
  t2949 = Sin(var1[3]);
  t2967 = Sin(var1[4]);
  t3113 = Cos(var1[2]);
  t2872 = Sin(var1[2]);
  t3114 = t2962*t2936;
  t3115 = -1.*t2949*t2967;
  t3149 = t3114 + t3115;
  t3159 = -1.*t2936*t2949;
  t3162 = -1.*t2962*t2967;
  t3184 = t3159 + t3162;
  t3154 = t3113*t3149;
  t2960 = t2936*t2949;
  t3062 = t2962*t2967;
  t3084 = t2960 + t3062;
  t3188 = -1.*t2872*t3149;
  t3187 = t3113*t3184;
  t3189 = t3187 + t3188;
  t3214 = -1.*t2872*t3184;
  t3194 = t2872*t3184;
  t3195 = t3194 + t3154;
  t3227 = -1.*t2962*t2936;
  t3236 = t2949*t2967;
  t3244 = t3227 + t3236;
  t3215 = -1.*t3113*t3149;
  t3216 = t3214 + t3215;
  t3293 = t3113*t2962;
  t3300 = -1.*t2872*t2949;
  t3301 = t3293 + t3300;
  t3290 = -1.*t2962*t2872;
  t3291 = -1.*t3113*t2949;
  t3292 = t3290 + t3291;
  t3304 = t2962*t2872;
  t3305 = t3113*t2949;
  t3306 = t3304 + t3305;
  t3308 = -1.*t3113*t2962;
  t3318 = t2872*t2949;
  t3320 = t3308 + t3318;
  t3101 = -1.*t2872*t3084;
  t3158 = t3101 + t3154;
  t3190 = 6.4*t3158*t3189;
  t3196 = -1.*t3113*t3084;
  t3197 = t3196 + t3188;
  t3213 = 3.2*t3195*t3197;
  t3220 = t3113*t3084;
  t3221 = t2872*t3149;
  t3222 = t3220 + t3221;
  t3223 = 3.2*t3216*t3222;
  t3248 = t3113*t3244;
  t3250 = t3214 + t3248;
  t3251 = 6.4*t3189*t3250;
  t3252 = -1.*t3113*t3184;
  t3253 = -1.*t2872*t3244;
  t3254 = t3252 + t3253;
  t3267 = 3.2*t3195*t3254;
  t3268 = t2872*t3244;
  t3279 = t3187 + t3268;
  t3285 = 3.2*t3216*t3279;
  t3303 = 20.4*t3292*t3301;
  t3307 = 6.8*t3306*t3301;
  t3323 = 20.4*t3292*t3320;
  t3324 = 6.8*t3306*t3320;
  t3344 = Cos(var1[5]);
  t3354 = Sin(var1[5]);
  t3357 = t3113*t3344;
  t3358 = -1.*t2872*t3354;
  t3359 = t3357 + t3358;
  t3353 = -1.*t3344*t2872;
  t3355 = -1.*t3113*t3354;
  t3356 = t3353 + t3355;
  t3366 = t3344*t2872;
  t3372 = t3113*t3354;
  t3386 = t3366 + t3372;
  t3394 = -1.*t3113*t3344;
  t3395 = t2872*t3354;
  t3396 = t3394 + t3395;
  t3399 = Cos(var1[6]);
  t3442 = Sin(var1[6]);
  t3400 = -1.*t3399*t3354;
  t3456 = -1.*t3344*t3442;
  t3457 = t3400 + t3456;
  t3459 = t3344*t3399;
  t3480 = -1.*t3354*t3442;
  t3484 = t3459 + t3480;
  t3522 = t3399*t3354;
  t3525 = t3344*t3442;
  t3526 = t3522 + t3525;
  t3519 = -1.*t2872*t3484;
  t3532 = t3113*t3484;
  t3485 = -1.*t3113*t3484;
  t3542 = t2872*t3484;
  t3527 = -1.*t2872*t3526;
  t3533 = t3527 + t3532;
  t3505 = t3113*t3457;
  t3520 = t3505 + t3519;
  t3538 = t2872*t3457;
  t3540 = t3538 + t3532;
  t3535 = -1.*t3113*t3526;
  t3536 = t3535 + t3519;
  t3458 = -1.*t2872*t3457;
  t3486 = t3458 + t3485;
  t3569 = t3113*t3526;
  t3570 = t3569 + t3542;
  t3541 = -1.*t3113*t3457;
  t3577 = -1.*t3344*t3399;
  t3578 = t3354*t3442;
  t3579 = t3577 + t3578;
  t3360 = 20.4*t3356*t3359;
  t3392 = 6.8*t3386*t3359;
  t3397 = 20.4*t3356*t3396;
  t3398 = 6.8*t3386*t3396;
  t3574 = 6.4*t3533*t3520;
  t3575 = 3.2*t3540*t3536;
  t3576 = 3.2*t3486*t3570;
  t3580 = t3113*t3579;
  t3581 = t3458 + t3580;
  t3582 = 6.4*t3520*t3581;
  t3583 = -1.*t2872*t3579;
  t3584 = t3541 + t3583;
  t3585 = 3.2*t3540*t3584;
  t3586 = t2872*t3579;
  t3587 = t3505 + t3586;
  t3588 = 3.2*t3486*t3587;
  t3325 = t3303 + t3307 + t3323 + t3324 + t3190 + t3213 + t3223 + t3251 + t3267 + t3285;
  t3341 = t2872*t3084;
  t3603 = 6.4*t3195*t3189;
  t3604 = 3.2*t3222*t3250;
  t3606 = t3341 + t3248;
  t3607 = 3.2*t3189*t3606;
  t3608 = t3220 + t3253;
  t3610 = 3.2*t3195*t3608;
  t3611 = 3.2*t3158*t3279;
  t3612 = 6.4*t3250*t3279;
  t3286 = t3190 + t3213 + t3223 + t3251 + t3267 + t3285;
  t3613 = t3603 + t3604 + t3607 + t3610 + t3611 + t3612;
  t3635 = -0.5*var2[4]*t3613;
  t3593 = t3360 + t3392 + t3397 + t3398 + t3574 + t3575 + t3576 + t3582 + t3585 + t3588;
  t3546 = t2872*t3526;
  t3645 = 6.4*t3540*t3520;
  t3646 = 3.2*t3570*t3581;
  t3647 = t3546 + t3580;
  t3648 = 3.2*t3520*t3647;
  t3649 = t3569 + t3583;
  t3650 = 3.2*t3540*t3649;
  t3651 = 3.2*t3533*t3587;
  t3652 = 6.4*t3581*t3587;
  t3591 = t3574 + t3575 + t3576 + t3582 + t3585 + t3588;
  t3653 = t3645 + t3646 + t3648 + t3650 + t3651 + t3652;
  t3660 = -0.5*var2[6]*t3653;
  t3687 = 3.2*t3195*t3158;
  t3688 = 3.2*t3189*t3222;
  t3694 = 3.2*t3195*t3250;
  t3698 = 3.2*t3189*t3279;
  t3704 = Power(t3292,2);
  t3714 = 6.8*t3704;
  t3715 = 6.8*t3292*t3306;
  t3716 = Power(t3301,2);
  t3717 = 6.8*t3716;
  t3720 = 6.8*t3301*t3320;
  t3732 = Power(t3356,2);
  t3733 = 6.8*t3732;
  t3734 = 6.8*t3356*t3386;
  t3735 = Power(t3359,2);
  t3736 = 6.8*t3735;
  t3737 = 6.8*t3359*t3396;
  t3756 = 3.2*t3540*t3533;
  t3757 = 3.2*t3520*t3570;
  t3758 = 3.2*t3540*t3581;
  t3759 = 3.2*t3520*t3587;
  t3726 = 3.2*t3216*t3195;
  t3727 = Power(t3158,2);
  t3728 = 3.2*t3727;
  t3729 = Power(t3189,2);
  t3730 = 3.2*t3729;
  t3731 = 3.2*t3197*t3222;
  t3738 = 3.2*t3486*t3540;
  t3739 = Power(t3533,2);
  t3740 = 3.2*t3739;
  t3745 = Power(t3520,2);
  t3749 = 3.2*t3745;
  t3753 = 3.2*t3536*t3570;
  t3754 = t3714 + t3715 + t3717 + t3720 + t3726 + t3728 + t3730 + t3731 + t3733 + t3734 + t3736 + t3737 + t3738 + t3740 + t3749 + t3753;
  t3721 = t3714 + t3715 + t3717 + t3720 + t3687 + t3688 + t3694 + t3698;
  t3699 = t3687 + t3688 + t3694 + t3698;
  t3762 = t3733 + t3734 + t3736 + t3737 + t3756 + t3757 + t3758 + t3759;
  t3760 = t3756 + t3757 + t3758 + t3759;
  t3784 = 6.4*t3216*t3158;
  t3785 = 6.4*t3189*t3197;
  t3789 = 6.4*t3216*t3250;
  t3799 = 6.4*t3189*t3254;
  t3802 = 13.6*t3704;
  t3805 = 13.6*t3292*t3306;
  t3806 = 13.6*t3301*t3320;
  t3810 = Power(t3320,2);
  t3811 = 13.6*t3810;
  t3342 = t3341 + t3215;
  t3339 = t3252 + t3221;
  t3547 = t3546 + t3485;
  t3544 = t3541 + t3542;
  t3820 = 13.6*t3732;
  t3821 = 13.6*t3356*t3386;
  t3822 = 13.6*t3359*t3396;
  t3823 = Power(t3396,2);
  t3824 = 13.6*t3823;
  t3843 = 6.4*t3486*t3533;
  t3844 = 6.4*t3520*t3536;
  t3845 = 6.4*t3486*t3581;
  t3846 = 6.4*t3520*t3584;
  t3812 = t3802 + t3805 + t3806 + t3811 + t3784 + t3785 + t3789 + t3799;
  t3860 = 6.4*t3729;
  t3861 = 6.4*t3158*t3250;
  t3862 = Power(t3250,2);
  t3863 = 6.4*t3862;
  t3864 = 6.4*t3189*t3608;
  t3800 = t3784 + t3785 + t3789 + t3799;
  t3865 = t3860 + t3861 + t3863 + t3864;
  t3866 = -0.5*var2[4]*t3865;
  t3854 = t3820 + t3821 + t3822 + t3824 + t3843 + t3844 + t3845 + t3846;
  t3876 = 6.4*t3745;
  t3877 = 6.4*t3533*t3581;
  t3878 = Power(t3581,2);
  t3879 = 6.4*t3878;
  t3880 = 6.4*t3520*t3649;
  t3847 = t3843 + t3844 + t3845 + t3846;
  t3881 = t3876 + t3877 + t3879 + t3880;
  t3882 = -0.5*var2[6]*t3881;
  t3893 = 13.6*t3292*t3301;
  t3894 = 13.6*t3292*t3320;
  t3899 = 13.6*t3356*t3359;
  t3900 = 13.6*t3356*t3396;
  t3897 = 6.4*t3216*t3189;
  t3898 = 6.4*t3158*t3197;
  t3901 = 6.4*t3486*t3520;
  t3902 = 6.4*t3533*t3536;
  t3903 = t3893 + t3894 + t3897 + t3898 + t3899 + t3900 + t3901 + t3902;
  t3895 = t3893 + t3894 + t3190 + t3251;
  t3891 = t3190 + t3251;
  t3907 = t3899 + t3900 + t3574 + t3582;
  t3905 = t3574 + t3582;
  t3921 = -1.*t2936;
  t3922 = 1. + t3921;
  t3923 = 0.4*t3922;
  t3924 = 0.64*t2936;
  t3925 = t3923 + t3924;
  t3926 = t3925*t2949;
  t3927 = 0.24*t2962*t2967;
  t3928 = t3926 + t3927;
  t3930 = t2962*t3925;
  t3931 = -0.24*t2949*t2967;
  t3932 = t3930 + t3931;
  t3936 = -1.*t3925*t2949;
  t3937 = -0.24*t2962*t2967;
  t3938 = t3936 + t3937;
  t3929 = -1.*t3928*t3149;
  t3933 = -1.*t3184*t3932;
  t3934 = t3929 + t3933;
  t3935 = 3.2*t3216*t3934;
  t3940 = t3928*t3149;
  t3941 = t3184*t3932;
  t3945 = t3928*t3084;
  t3946 = t3149*t3932;
  t3947 = t3945 + t3946;
  t3948 = 3.2*t3947*t3254;
  t3957 = -0.24*t2936*t2949;
  t3958 = t3957 + t3937;
  t3950 = -1.*t3184*t3928;
  t3960 = 0.24*t2962*t2936;
  t3961 = t3960 + t3931;
  t3952 = -1.*t3932*t3244;
  t3915 = Power(t2962,2);
  t3916 = 0.11*t3915;
  t3917 = Power(t2949,2);
  t3918 = 0.11*t3917;
  t3919 = t3916 + t3918;
  t3920 = 6.8*t3306*t3919;
  t3980 = -1.*t3399;
  t3981 = 1. + t3980;
  t3982 = 0.4*t3981;
  t3983 = 0.64*t3399;
  t3984 = t3982 + t3983;
  t3985 = t3984*t3354;
  t3986 = 0.24*t3344*t3442;
  t3987 = t3985 + t3986;
  t3989 = t3344*t3984;
  t3990 = -0.24*t3354*t3442;
  t3991 = t3989 + t3990;
  t3974 = Power(t3344,2);
  t3975 = 0.11*t3974;
  t3976 = Power(t3354,2);
  t3977 = 0.11*t3976;
  t3978 = t3975 + t3977;
  t3979 = 6.8*t3386*t3978;
  t3988 = -1.*t3987*t3484;
  t3992 = -1.*t3457*t3991;
  t3993 = t3988 + t3992;
  t3995 = t3987*t3526;
  t3996 = t3484*t3991;
  t3997 = t3995 + t3996;
  t4002 = -1.*t3984*t3354;
  t4003 = -0.24*t3344*t3442;
  t4004 = t4002 + t4003;
  t4001 = 3.2*t3486*t3993;
  t4006 = t3987*t3484;
  t4007 = t3457*t3991;
  t4011 = 3.2*t3997*t3584;
  t4020 = -0.24*t3399*t3354;
  t4021 = t4020 + t4003;
  t4013 = -1.*t3457*t3987;
  t4023 = 0.24*t3344*t3399;
  t4024 = t4023 + t3990;
  t4015 = -1.*t3991*t3579;
  t3939 = t3938*t3149;
  t3942 = t3084*t3932;
  t3943 = t3939 + t3940 + t3941 + t3942;
  t3944 = 3.2*t3216*t3943;
  t3949 = -1.*t3184*t3938;
  t3951 = -1.*t3149*t3932;
  t3953 = t3949 + t3950 + t3951 + t3952;
  t3954 = 3.2*t3197*t3953;
  t3955 = t3920 + t3935 + t3944 + t3948 + t3954;
  t4043 = -1.*t2962*t3925;
  t4044 = 0.24*t2949*t2967;
  t4045 = t4043 + t4044;
  t4037 = 3.2*t3934*t3250;
  t3959 = t3958*t3149;
  t3962 = t3084*t3961;
  t3963 = t3959 + t3940 + t3941 + t3962;
  t4039 = 3.2*t3947*t3608;
  t4042 = -1.*t3084*t3932;
  t4048 = -1.*t3928*t3244;
  t3965 = -1.*t3184*t3958;
  t3966 = -1.*t3149*t3961;
  t3967 = t3965 + t3950 + t3966 + t3952;
  t4053 = t3184*t3928;
  t4066 = -0.24*t2962*t2936;
  t4067 = t4066 + t4044;
  t4057 = t3932*t3244;
  t3964 = 3.2*t3216*t3963;
  t3968 = 3.2*t3197*t3967;
  t3969 = t3935 + t3964 + t3948 + t3968;
  t4062 = 3.2*t3943*t3250;
  t4063 = 3.2*t3963*t3250;
  t4064 = -1.*t3958*t3149;
  t4065 = -1.*t3184*t3961;
  t4068 = -1.*t3184*t4067;
  t4069 = -1.*t3938*t3244;
  t4070 = -1.*t3958*t3244;
  t4071 = t4064 + t3933 + t4042 + t4065 + t4068 + t4069 + t4070 + t4048;
  t4072 = 3.2*t3158*t4071;
  t4073 = 3.2*t3189*t3953;
  t4074 = 3.2*t3189*t3967;
  t4075 = t3184*t3938;
  t4076 = t3184*t3958;
  t4077 = t3958*t3084;
  t4078 = t3149*t3961;
  t4079 = t3149*t4067;
  t4080 = t4075 + t4076 + t4053 + t4077 + t3946 + t4078 + t4079 + t4057;
  t4081 = 3.2*t3189*t4080;
  t4082 = t4037 + t4062 + t4063 + t4039 + t4072 + t4073 + t4074 + t4081;
  t4005 = t4004*t3484;
  t4008 = t3526*t3991;
  t4009 = t4005 + t4006 + t4007 + t4008;
  t4010 = 3.2*t3486*t4009;
  t4012 = -1.*t3457*t4004;
  t4014 = -1.*t3484*t3991;
  t4016 = t4012 + t4013 + t4014 + t4015;
  t4017 = 3.2*t3536*t4016;
  t4018 = t3979 + t4001 + t4010 + t4011 + t4017;
  t4109 = -1.*t3344*t3984;
  t4110 = 0.24*t3354*t3442;
  t4111 = t4109 + t4110;
  t4103 = 3.2*t3993*t3581;
  t4022 = t4021*t3484;
  t4025 = t3526*t4024;
  t4026 = t4022 + t4006 + t4007 + t4025;
  t4105 = 3.2*t3997*t3649;
  t4108 = -1.*t3526*t3991;
  t4114 = -1.*t3987*t3579;
  t4028 = -1.*t3457*t4021;
  t4029 = -1.*t3484*t4024;
  t4030 = t4028 + t4013 + t4029 + t4015;
  t4119 = t3457*t3987;
  t4132 = -0.24*t3344*t3399;
  t4133 = t4132 + t4110;
  t4123 = t3991*t3579;
  t4027 = 3.2*t3486*t4026;
  t4031 = 3.2*t3536*t4030;
  t4032 = t4001 + t4027 + t4011 + t4031;
  t4128 = 3.2*t4009*t3581;
  t4129 = 3.2*t4026*t3581;
  t4130 = -1.*t4021*t3484;
  t4131 = -1.*t3457*t4024;
  t4134 = -1.*t3457*t4133;
  t4135 = -1.*t4004*t3579;
  t4136 = -1.*t4021*t3579;
  t4137 = t4130 + t3992 + t4108 + t4131 + t4134 + t4135 + t4136 + t4114;
  t4138 = 3.2*t3533*t4137;
  t4139 = 3.2*t3520*t4016;
  t4140 = 3.2*t3520*t4030;
  t4141 = t3457*t4004;
  t4142 = t3457*t4021;
  t4143 = t4021*t3526;
  t4144 = t3484*t4024;
  t4145 = t3484*t4133;
  t4146 = t4141 + t4142 + t4119 + t4143 + t3996 + t4144 + t4145 + t4123;
  t4147 = 3.2*t3520*t4146;
  t4148 = t4103 + t4128 + t4129 + t4105 + t4138 + t4139 + t4140 + t4147;
  t4169 = 3.2*t3189*t3934;
  t4171 = 3.2*t3947*t3250;
  t4168 = 6.8*t3320*t3919;
  t4182 = 6.8*t3396*t3978;
  t4187 = 3.2*t3520*t3993;
  t4189 = 3.2*t3997*t3581;
  t4179 = -2.88*t3113;
  t4180 = 3.2*t3197*t3934;
  t4181 = 3.2*t3216*t3947;
  t4183 = 3.2*t3536*t3993;
  t4184 = 3.2*t3486*t3997;
  t4185 = t4179 + t4168 + t4180 + t4181 + t4182 + t4183 + t4184;
  t4170 = 3.2*t3189*t3943;
  t4172 = 3.2*t3158*t3953;
  t4173 = t4168 + t4169 + t4170 + t4171 + t4172;
  t4175 = 3.2*t3189*t3963;
  t4176 = 3.2*t3158*t3967;
  t4177 = t4169 + t4175 + t4171 + t4176;
  t4188 = 3.2*t3520*t4009;
  t4190 = 3.2*t3533*t4016;
  t4191 = t4182 + t4187 + t4188 + t4189 + t4190;
  t4193 = 3.2*t3520*t4026;
  t4194 = 3.2*t3533*t4030;
  t4195 = t4187 + t4193 + t4189 + t4194;
  t4203 = 0.748*t3306;
  t4204 = t3925*t2967;
  t4205 = -0.24*t2936*t2967;
  t4206 = t4204 + t4205;
  t4208 = t3925*t2936;
  t4209 = Power(t2967,2);
  t4210 = 0.24*t4209;
  t4211 = t4208 + t4210;
  t4215 = 3.2*t4206*t3216;
  t4216 = 3.2*t4211*t3254;
  t4217 = t4203 + t4215 + t4216;
  t4223 = Power(t2936,2);
  t4224 = -0.24*t4223;
  t4225 = t4208 + t4224;
  t4232 = 3.2*t4206*t3250;
  t4219 = -1.*t3925*t2967;
  t4220 = 0.24*t2936*t2967;
  t4221 = t4219 + t4220;
  t4233 = 3.2*t4211*t3608;
  t4222 = 3.2*t4221*t3216;
  t4226 = 3.2*t4225*t3197;
  t4227 = t4215 + t4222 + t4226 + t4216;
  t4236 = 3.2*t4225*t3189;
  t4237 = 3.2*t4221*t3250;
  t4238 = t4236 + t4232 + t4237 + t4233;
  t4255 = 0.748*t3320;
  t4260 = 3.2*t4206*t3189;
  t4261 = 3.2*t4211*t3250;
  t4256 = 3.2*t4211*t3216;
  t4257 = 3.2*t4206*t3197;
  t4258 = t4255 + t4256 + t4257;
  t4262 = t4255 + t4260 + t4261;
  t4264 = 3.2*t4225*t3158;
  t4265 = 3.2*t4221*t3189;
  t4266 = t4264 + t4260 + t4265 + t4261;
  t4277 = -0.384*var2[2]*t3254;
  t4278 = -0.384*var2[3]*t3608;
  t4279 = -0.384*var2[4]*t3608;
  t4280 = t4277 + t4278 + t4279;
  t4281 = var2[1]*t4280;
  t4287 = -0.384*var2[1]*t3250;
  t4288 = 0.748*t3386;
  t4289 = t3984*t3442;
  t4290 = -0.24*t3399*t3442;
  t4291 = t4289 + t4290;
  t4293 = t3984*t3399;
  t4294 = Power(t3442,2);
  t4295 = 0.24*t4294;
  t4296 = t4293 + t4295;
  t4300 = 3.2*t4291*t3486;
  t4301 = 3.2*t4296*t3584;
  t4302 = t4288 + t4300 + t4301;
  t4308 = Power(t3399,2);
  t4309 = -0.24*t4308;
  t4310 = t4293 + t4309;
  t4317 = 3.2*t4291*t3581;
  t4304 = -1.*t3984*t3442;
  t4305 = 0.24*t3399*t3442;
  t4306 = t4304 + t4305;
  t4318 = 3.2*t4296*t3649;
  t4307 = 3.2*t4306*t3486;
  t4311 = 3.2*t4310*t3536;
  t4312 = t4300 + t4307 + t4311 + t4301;
  t4321 = 3.2*t4310*t3520;
  t4322 = 3.2*t4306*t3581;
  t4323 = t4321 + t4317 + t4322 + t4318;
  t4340 = 0.748*t3396;
  t4345 = 3.2*t4291*t3520;
  t4346 = 3.2*t4296*t3581;
  t4341 = 3.2*t4296*t3486;
  t4342 = 3.2*t4291*t3536;
  t4343 = t4340 + t4341 + t4342;
  t4347 = t4340 + t4345 + t4346;
  t4349 = 3.2*t4310*t3533;
  t4350 = 3.2*t4306*t3520;
  t4351 = t4349 + t4345 + t4350 + t4346;
  t4362 = -0.384*var2[2]*t3584;
  t4363 = -0.384*var2[5]*t3649;
  t4364 = -0.384*var2[6]*t3649;
  t4365 = t4362 + t4363 + t4364;
  t4366 = var2[1]*t4365;
  t4372 = -0.384*var2[1]*t3581;
  p_output1[0]=var2[1]*(-0.5*(9.6*t3158*t3197 + 9.6*t3189*t3216 + t3303 + t3307 + t3323 + t3324 + 3.2*t3195*t3339 + 3.2*t3222*t3342 + t3360 + t3392 + t3397 + t3398 + 9.6*t3486*t3520 + 9.6*t3533*t3536 + 3.2*t3540*t3544 + 3.2*t3547*t3570)*var2[2] - 0.5*t3325*var2[3] - 0.5*t3286*var2[4] - 0.5*t3593*var2[5] - 0.5*t3591*var2[6]);
  p_output1[1]=var2[1]*(t3635 - 0.5*t3325*var2[2] - 0.5*(t3303 + t3307 + t3323 + t3324 + t3603 + t3604 + t3607 + t3610 + t3611 + t3612)*var2[3]);
  p_output1[2]=var2[1]*(t3635 - 0.5*t3286*var2[2] - 0.5*t3613*var2[3]);
  p_output1[3]=var2[1]*(t3660 - 0.5*t3593*var2[2] - 0.5*(t3360 + t3392 + t3397 + t3398 + t3645 + t3646 + t3648 + t3650 + t3651 + t3652)*var2[5]);
  p_output1[4]=var2[1]*(t3660 - 0.5*t3591*var2[2] - 0.5*t3653*var2[5]);
  p_output1[5]=-0.5*t3754*var2[2] - 0.5*t3721*var2[3] - 0.5*t3699*var2[4] - 0.5*t3762*var2[5] - 0.5*t3760*var2[6];
  p_output1[6]=-0.5*t3754*var2[1];
  p_output1[7]=-0.5*t3721*var2[1];
  p_output1[8]=-0.5*t3699*var2[1];
  p_output1[9]=-0.5*t3762*var2[1];
  p_output1[10]=-0.5*t3760*var2[1];
  p_output1[11]=var2[1]*(-0.5*(6.4*Power(t3197,2) + 6.4*Power(t3216,2) + 6.4*t3189*t3339 + 6.4*t3158*t3342 + 6.4*Power(t3486,2) + 6.4*Power(t3536,2) + 6.4*t3520*t3544 + 6.4*t3533*t3547 + t3802 + t3805 + t3806 + t3811 + t3820 + t3821 + t3822 + t3824)*var2[2] - 0.5*t3812*var2[3] - 0.5*t3800*var2[4] - 0.5*t3854*var2[5] - 0.5*t3847*var2[6]);
  p_output1[12]=var2[1]*(t3866 - 0.5*t3812*var2[2] - 0.5*(t3802 + t3805 + t3806 + t3811 + t3860 + t3861 + t3863 + t3864)*var2[3]);
  p_output1[13]=var2[1]*(t3866 - 0.5*t3800*var2[2] - 0.5*t3865*var2[3]);
  p_output1[14]=var2[1]*(t3882 - 0.5*t3854*var2[2] - 0.5*(t3820 + t3821 + t3822 + t3824 + t3876 + t3877 + t3879 + t3880)*var2[5]);
  p_output1[15]=var2[1]*(t3882 - 0.5*t3847*var2[2] - 0.5*t3881*var2[5]);
  p_output1[16]=-0.5*t3903*var2[2] - 0.5*t3895*var2[3] - 0.5*t3891*var2[4] - 0.5*t3907*var2[5] - 0.5*t3905*var2[6];
  p_output1[17]=-0.5*t3903*var2[1];
  p_output1[18]=-0.5*t3895*var2[1];
  p_output1[19]=-0.5*t3891*var2[1];
  p_output1[20]=-0.5*t3907*var2[1];
  p_output1[21]=-0.5*t3905*var2[1];
  p_output1[22]=var2[1]*(-0.5*(2.88*t2872 + t3920 + 3.2*t3342*t3934 + 3.2*t3339*t3947 + t3979 + 3.2*t3547*t3993 + 3.2*t3544*t3997)*var2[2] - 0.5*t3955*var2[3] - 0.5*t3969*var2[4] - 0.5*t4018*var2[5] - 0.5*t4032*var2[6]);
  p_output1[23]=var2[1]*(-0.5*t3955*var2[2] - 0.5*(t3920 + 6.4*t3250*t3943 + 6.4*t3189*t3953 + t4037 + t4039 + 3.2*t3158*(-2.*t3184*t3932 - 1.*t3149*t3938 - 2.*t3244*t3938 + t4042 - 1.*t3184*t4045 + t4048) + 3.2*t3189*(2.*t3149*t3932 + t3084*t3938 + 2.*t3184*t3938 + t3149*t4045 + t4053 + t4057))*var2[3] - 0.5*t4082*var2[4]);
  p_output1[24]=var2[1]*(-0.5*t3969*var2[2] - 0.5*t4082*var2[3] - 0.5*(6.4*t3250*t3963 + 6.4*t3189*t3967 + t4037 + t4039 + 3.2*t3158*(-2.*t3244*t3958 - 2.*t3184*t3961 + t4042 + t4048 + t4064 + t4068) + 3.2*t3189*(2.*t3184*t3958 + 2.*t3149*t3961 + t4053 + t4057 + t4077 + t4079))*var2[4]);
  p_output1[25]=var2[1]*(-0.5*t4018*var2[2] - 0.5*(t3979 + 6.4*t3581*t4009 + 6.4*t3520*t4016 + t4103 + t4105 + 3.2*t3533*(-2.*t3457*t3991 - 1.*t3484*t4004 - 2.*t3579*t4004 + t4108 - 1.*t3457*t4111 + t4114) + 3.2*t3520*(2.*t3484*t3991 + 2.*t3457*t4004 + t3526*t4004 + t3484*t4111 + t4119 + t4123))*var2[5] - 0.5*t4148*var2[6]);
  p_output1[26]=var2[1]*(-0.5*t4032*var2[2] - 0.5*t4148*var2[5] - 0.5*(6.4*t3581*t4026 + 6.4*t3520*t4030 + t4103 + t4105 + 3.2*t3533*(-2.*t3579*t4021 - 2.*t3457*t4024 + t4108 + t4114 + t4130 + t4134) + 3.2*t3520*(2.*t3457*t4021 + 2.*t3484*t4024 + t4119 + t4123 + t4143 + t4145))*var2[6]);
  p_output1[27]=-0.5*t4185*var2[2] - 0.5*t4173*var2[3] - 0.5*t4177*var2[4] - 0.5*t4191*var2[5] - 0.5*t4195*var2[6];
  p_output1[28]=-0.5*t4185*var2[1];
  p_output1[29]=-0.5*t4173*var2[1];
  p_output1[30]=-0.5*t4177*var2[1];
  p_output1[31]=-0.5*t4191*var2[1];
  p_output1[32]=-0.5*t4195*var2[1];
  p_output1[33]=var2[1]*(-0.5*(t4203 + 3.2*t3342*t4206 + 3.2*t3339*t4211)*var2[2] - 0.5*t4217*var2[3] - 0.5*t4227*var2[4]);
  p_output1[34]=var2[1]*(-0.5*t4217*var2[2] - 0.5*(t4203 + t4232 + t4233)*var2[3] - 0.5*t4238*var2[4]);
  p_output1[35]=var2[1]*(-0.5*t4227*var2[2] - 0.5*t4238*var2[3] - 0.5*(3.2*t3158*t4221 + 6.4*t3250*t4221 + 3.2*t3189*(-1.*t2936*t3925 + 0.24*t4223) + 6.4*t3189*t4225 + t4232 + t4233)*var2[4]);
  p_output1[36]=-0.5*t4258*var2[2] - 0.5*t4262*var2[3] - 0.5*t4266*var2[4];
  p_output1[37]=-0.5*t4258*var2[1];
  p_output1[38]=-0.5*t4262*var2[1];
  p_output1[39]=-0.5*t4266*var2[1];
  p_output1[40]=var2[1]*(-0.384*t3339*var2[2] - 0.384*t3254*var2[3] - 0.384*t3254*var2[4]);
  p_output1[41]=t4281;
  p_output1[42]=t4281;
  p_output1[43]=-0.384*t3216*var2[2] - 0.384*t3250*var2[3] - 0.384*t3250*var2[4];
  p_output1[44]=-0.384*t3216*var2[1];
  p_output1[45]=t4287;
  p_output1[46]=t4287;
  p_output1[47]=var2[1]*(-0.5*(t4288 + 3.2*t3547*t4291 + 3.2*t3544*t4296)*var2[2] - 0.5*t4302*var2[5] - 0.5*t4312*var2[6]);
  p_output1[48]=var2[1]*(-0.5*t4302*var2[2] - 0.5*(t4288 + t4317 + t4318)*var2[5] - 0.5*t4323*var2[6]);
  p_output1[49]=var2[1]*(-0.5*t4312*var2[2] - 0.5*t4323*var2[5] - 0.5*(3.2*t3533*t4306 + 6.4*t3581*t4306 + 3.2*t3520*(-1.*t3399*t3984 + 0.24*t4308) + 6.4*t3520*t4310 + t4317 + t4318)*var2[6]);
  p_output1[50]=-0.5*t4343*var2[2] - 0.5*t4347*var2[5] - 0.5*t4351*var2[6];
  p_output1[51]=-0.5*t4343*var2[1];
  p_output1[52]=-0.5*t4347*var2[1];
  p_output1[53]=-0.5*t4351*var2[1];
  p_output1[54]=var2[1]*(-0.384*t3544*var2[2] - 0.384*t3584*var2[5] - 0.384*t3584*var2[6]);
  p_output1[55]=t4366;
  p_output1[56]=t4366;
  p_output1[57]=-0.384*t3486*var2[2] - 0.384*t3581*var2[5] - 0.384*t3581*var2[6];
  p_output1[58]=-0.384*t3486*var2[1];
  p_output1[59]=t4372;
  p_output1[60]=t4372;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 61, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce1_vec2_five_link_walker.hh"

namespace LeftStance
{

void J_Ce1_vec2_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
