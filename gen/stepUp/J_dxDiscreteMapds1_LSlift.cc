/*
 * Automatically Generated from Mathematica.
 * Wed 6 Nov 2019 23:23:47 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2,const double *var3,const double *var4)
{
  double t6212;
  double t759;
  double t11005;
  double t13458;
  double t14773;
  double t14925;
  double t17980;
  double t18002;
  double t18045;
  double t18413;
  double t18417;
  double t18454;
  double t18456;
  double t18464;
  double t18465;
  double t18466;
  double t14305;
  double t14318;
  double t14343;
  double t11679;
  double t14092;
  double t14093;
  double t14919;
  double t17946;
  double t17957;
  double t17976;
  double t18084;
  double t18094;
  double t18286;
  double t18288;
  double t18340;
  double t18344;
  double t18347;
  double t18349;
  double t18447;
  double t18448;
  double t18451;
  double t18414;
  double t18428;
  double t18429;
  double t18455;
  double t18459;
  double t18462;
  double t18463;
  double t18476;
  double t18480;
  double t18496;
  double t18500;
  double t18506;
  double t18507;
  double t18511;
  double t18512;
  double t18592;
  double t18593;
  double t18594;
  double t18595;
  double t18596;
  double t18597;
  double t18598;
  double t18599;
  double t18601;
  double t18602;
  double t18605;
  double t18619;
  double t18620;
  double t18621;
  double t18624;
  double t18625;
  double t18626;
  double t18627;
  double t18628;
  double t18630;
  double t18631;
  double t18632;
  double t18529;
  double t18530;
  double t18531;
  double t18520;
  double t18525;
  double t18526;
  double t18647;
  double t18648;
  double t18649;
  double t18533;
  double t18534;
  double t18642;
  double t18643;
  double t18644;
  double t18645;
  double t18549;
  double t18550;
  double t18553;
  double t18536;
  double t18537;
  double t18538;
  double t18659;
  double t18660;
  double t18661;
  double t18562;
  double t18569;
  double t18654;
  double t18655;
  double t18656;
  double t18657;
  double t14350;
  double t18452;
  double t18586;
  double t18587;
  double t18588;
  double t18589;
  double t18590;
  double t18600;
  double t18606;
  double t18607;
  double t18609;
  double t18610;
  double t18611;
  double t18613;
  double t18614;
  double t18615;
  double t18616;
  double t18617;
  double t18629;
  double t18633;
  double t18634;
  double t18636;
  double t18637;
  double t18638;
  double t18665;
  double t18666;
  double t18668;
  double t18669;
  double t18670;
  double t18751;
  double t18752;
  double t18753;
  double t18754;
  double t18755;
  double t18685;
  double t18686;
  double t18687;
  double t18688;
  double t18697;
  double t18698;
  double t18699;
  double t18700;
  double t18701;
  double t18702;
  double t18703;
  double t18704;
  double t18705;
  double t18706;
  double t18707;
  double t18739;
  double t18740;
  double t18742;
  double t18774;
  double t18775;
  double t18776;
  double t18756;
  double t18757;
  double t18758;
  double t18761;
  double t18762;
  double t18765;
  double t18766;
  double t18767;
  double t18768;
  double t18769;
  double t18770;
  double t18773;
  double t18778;
  double t18779;
  double t18783;
  double t18807;
  double t18808;
  double t18785;
  double t18810;
  double t18811;
  double t18787;
  double t18675;
  double t18676;
  double t18678;
  double t18679;
  double t18680;
  double t18822;
  double t18823;
  double t18824;
  double t18825;
  double t18826;
  double t18691;
  double t18692;
  double t18718;
  double t18719;
  double t18720;
  double t18721;
  double t18722;
  double t18723;
  double t18724;
  double t18725;
  double t18726;
  double t18745;
  double t18845;
  double t18846;
  double t18847;
  double t18827;
  double t18828;
  double t18829;
  double t18832;
  double t18833;
  double t18836;
  double t18837;
  double t18838;
  double t18839;
  double t18840;
  double t18841;
  double t18844;
  double t18849;
  double t18850;
  double t18854;
  double t18878;
  double t18879;
  double t18856;
  double t18881;
  double t18882;
  double t18858;
  double t770;
  double t7239;
  double t14286;
  double t18099;
  double t18350;
  double t18432;
  double t18486;
  double t18513;
  double t18527;
  double t18528;
  double t18532;
  double t18535;
  double t18539;
  double t18540;
  double t18558;
  double t18573;
  double t18580;
  double t781;
  double t10595;
  double t14632;
  double t18711;
  double t18713;
  double t18453;
  double t18730;
  double t18732;
  double t18708;
  double t18709;
  double t18715;
  double t18716;
  double t18727;
  double t18728;
  double t18734;
  double t18735;
  double t18710;
  double t18712;
  double t18714;
  double t18717;
  double t18729;
  double t18731;
  double t18733;
  double t18736;
  double t18737;
  double t18585;
  double t18955;
  double t18966;
  double t18771;
  double t18975;
  double t18777;
  double t18780;
  double t18781;
  double t18784;
  double t18786;
  double t18788;
  double t18984;
  double t18797;
  double t18798;
  double t18799;
  double t18985;
  double t18793;
  double t18794;
  double t18795;
  double t18986;
  double t18989;
  double t18990;
  double t18805;
  double t18994;
  double t18809;
  double t18812;
  double t18813;
  double t18996;
  double t18815;
  double t18816;
  double t18817;
  double t18961;
  double t18969;
  double t18842;
  double t18978;
  double t18848;
  double t18851;
  double t18852;
  double t18855;
  double t18857;
  double t18859;
  double t19013;
  double t18868;
  double t18869;
  double t18870;
  double t19014;
  double t18864;
  double t18865;
  double t18866;
  double t19015;
  double t19018;
  double t19019;
  double t18876;
  double t19023;
  double t18880;
  double t18883;
  double t18884;
  double t19025;
  double t18886;
  double t18887;
  double t18888;
  double t18902;
  double t18903;
  double t18904;
  double t18905;
  double t18906;
  double t18907;
  double t18908;
  double t18909;
  double t18910;
  double t18893;
  double t18894;
  double t18741;
  double t18743;
  double t18744;
  double t18746;
  double t18747;
  double t18748;
  double t18671;
  double t18672;
  double t18673;
  double t18681;
  double t18682;
  double t18683;
  double t18591;
  double t18608;
  double t18612;
  double t18618;
  double t18635;
  double t18639;
  double t18640;
  double t18936;
  double t18937;
  double t18938;
  double t18939;
  double t18940;
  double t18941;
  double t18942;
  double t18943;
  double t18976;
  double t18977;
  double t18979;
  double t18980;
  double t18981;
  double t18995;
  double t18997;
  double t18998;
  double t18782;
  double t18789;
  double t18790;
  double t19008;
  double t19009;
  double t19010;
  double t18814;
  double t18818;
  double t18819;
  double t19070;
  double t19071;
  double t19072;
  double t19073;
  double t19074;
  double t19075;
  double t19076;
  double t19077;
  double t19078;
  double t19079;
  double t19080;
  double t19081;
  double t19082;
  double t19083;
  double t19084;
  double t19085;
  double t19024;
  double t19026;
  double t19027;
  double t18853;
  double t18860;
  double t18861;
  double t19037;
  double t19038;
  double t19039;
  double t18885;
  double t18889;
  double t18890;
  double t18911;
  double t18912;
  double t18913;
  double t18914;
  double t18915;
  double t18916;
  double t18917;
  double t18918;
  double t19045;
  double t19047;
  double t19049;
  double t19051;
  double t19053;
  double t19055;
  double t19129;
  double t18641;
  double t18646;
  double t18650;
  double t18651;
  double t18944;
  double t18945;
  double t18946;
  double t18947;
  double t19058;
  double t19059;
  double t19060;
  double t19061;
  double t18956;
  double t18957;
  double t18958;
  double t18987;
  double t18759;
  double t19090;
  double t19091;
  double t19092;
  double t19001;
  double t19002;
  double t19003;
  double t18796;
  double t18800;
  double t18801;
  double t19102;
  double t19103;
  double t19104;
  double t19105;
  double t19106;
  double t18919;
  double t18920;
  double t18921;
  double t18922;
  double t19162;
  double t19163;
  double t19164;
  double t19165;
  double t19184;
  double t19186;
  double t18652;
  double t18948;
  double t19062;
  double t19063;
  double t19189;
  double t19190;
  double t19216;
  double t19217;
  double t18923;
  double t19043;
  double t19166;
  double t19167;
  double t19210;
  double t19211;
  double t18653;
  double t18658;
  double t18662;
  double t18663;
  double t18949;
  double t18950;
  double t18951;
  double t18952;
  double t19064;
  double t19065;
  double t19066;
  double t19067;
  double t18962;
  double t18963;
  double t18964;
  double t19016;
  double t18830;
  double t19116;
  double t19117;
  double t19118;
  double t19128;
  double t19130;
  double t19131;
  double t19132;
  double t19133;
  double t19134;
  double t19135;
  double t19136;
  double t19137;
  double t19138;
  double t19139;
  double t19140;
  double t19141;
  double t19030;
  double t19031;
  double t19032;
  double t18867;
  double t18871;
  double t18872;
  double t19142;
  double t19143;
  double t19144;
  double t19145;
  double t19146;
  double t18924;
  double t18925;
  double t18926;
  double t18927;
  double t19168;
  double t19169;
  double t19170;
  double t19171;
  double t19222;
  double t19224;
  double t19174;
  double t19175;
  double t19176;
  double t19177;
  double t19178;
  double t19179;
  double t19180;
  double t19181;
  double t19182;
  double t19183;
  double t18664;
  double t18953;
  double t19068;
  double t19069;
  double t19227;
  double t19228;
  double t19254;
  double t19255;
  double t18928;
  double t19044;
  double t19172;
  double t19173;
  double t19248;
  double t19249;
  double t19259;
  t6212 = Sin(var2[2]);
  t759 = Cos(var2[2]);
  t11005 = Cos(var2[3]);
  t13458 = Sin(var2[3]);
  t14773 = Cos(var2[4]);
  t14925 = Sin(var2[4]);
  t17980 = t11005*t14773;
  t18002 = -1.*t13458*t14925;
  t18045 = t17980 + t18002;
  t18413 = Cos(var2[5]);
  t18417 = Sin(var2[5]);
  t18454 = Cos(var2[6]);
  t18456 = Sin(var2[6]);
  t18464 = t18413*t18454;
  t18465 = -1.*t18417*t18456;
  t18466 = t18464 + t18465;
  t14305 = t759*t11005;
  t14318 = -1.*t6212*t13458;
  t14343 = t14305 + t14318;
  t11679 = t11005*t6212;
  t14092 = t759*t13458;
  t14093 = t11679 + t14092;
  t14919 = -1.*t14773*t13458;
  t17946 = -1.*t11005*t14925;
  t17957 = t14919 + t17946;
  t17976 = t6212*t17957;
  t18084 = t759*t18045;
  t18094 = t17976 + t18084;
  t18286 = t14773*t13458;
  t18288 = t11005*t14925;
  t18340 = t18286 + t18288;
  t18344 = t759*t18340;
  t18347 = t6212*t18045;
  t18349 = t18344 + t18347;
  t18447 = t759*t18413;
  t18448 = -1.*t6212*t18417;
  t18451 = t18447 + t18448;
  t18414 = t18413*t6212;
  t18428 = t759*t18417;
  t18429 = t18414 + t18428;
  t18455 = -1.*t18454*t18417;
  t18459 = -1.*t18413*t18456;
  t18462 = t18455 + t18459;
  t18463 = t6212*t18462;
  t18476 = t759*t18466;
  t18480 = t18463 + t18476;
  t18496 = t18454*t18417;
  t18500 = t18413*t18456;
  t18506 = t18496 + t18500;
  t18507 = t759*t18506;
  t18511 = t6212*t18466;
  t18512 = t18507 + t18511;
  t18592 = -1.*t14773;
  t18593 = 1. + t18592;
  t18594 = 0.4*t18593;
  t18595 = 0.64*t14773;
  t18596 = t18594 + t18595;
  t18597 = t18596*t13458;
  t18598 = 0.24*t11005*t14925;
  t18599 = t18597 + t18598;
  t18601 = t11005*t18596;
  t18602 = -0.24*t13458*t14925;
  t18605 = t18601 + t18602;
  t18619 = -1.*t18454;
  t18620 = 1. + t18619;
  t18621 = 0.4*t18620;
  t18624 = 0.64*t18454;
  t18625 = t18621 + t18624;
  t18626 = t18625*t18417;
  t18627 = 0.24*t18413*t18456;
  t18628 = t18626 + t18627;
  t18630 = t18413*t18625;
  t18631 = -0.24*t18417*t18456;
  t18632 = t18630 + t18631;
  t18529 = t759*t17957;
  t18530 = -1.*t6212*t18045;
  t18531 = t18529 + t18530;
  t18520 = -1.*t11005*t6212;
  t18525 = -1.*t759*t13458;
  t18526 = t18520 + t18525;
  t18647 = t18596*t14925;
  t18648 = -0.24*t14773*t14925;
  t18649 = t18647 + t18648;
  t18533 = -1.*t6212*t18340;
  t18534 = t18533 + t18084;
  t18642 = t18596*t14773;
  t18643 = Power(t14925,2);
  t18644 = 0.24*t18643;
  t18645 = t18642 + t18644;
  t18549 = t759*t18462;
  t18550 = -1.*t6212*t18466;
  t18553 = t18549 + t18550;
  t18536 = -1.*t18413*t6212;
  t18537 = -1.*t759*t18417;
  t18538 = t18536 + t18537;
  t18659 = t18625*t18456;
  t18660 = -0.24*t18454*t18456;
  t18661 = t18659 + t18660;
  t18562 = -1.*t6212*t18506;
  t18569 = t18562 + t18476;
  t18654 = t18625*t18454;
  t18655 = Power(t18456,2);
  t18656 = 0.24*t18655;
  t18657 = t18654 + t18656;
  t14350 = Power(t14343,2);
  t18452 = Power(t18451,2);
  t18586 = Power(t11005,2);
  t18587 = 0.11*t18586;
  t18588 = Power(t13458,2);
  t18589 = 0.11*t18588;
  t18590 = t18587 + t18589;
  t18600 = -1.*t18599*t18045;
  t18606 = -1.*t17957*t18605;
  t18607 = t18600 + t18606;
  t18609 = t18599*t18340;
  t18610 = t18045*t18605;
  t18611 = t18609 + t18610;
  t18613 = Power(t18413,2);
  t18614 = 0.11*t18613;
  t18615 = Power(t18417,2);
  t18616 = 0.11*t18615;
  t18617 = t18614 + t18616;
  t18629 = -1.*t18628*t18466;
  t18633 = -1.*t18462*t18632;
  t18634 = t18629 + t18633;
  t18636 = t18628*t18506;
  t18637 = t18466*t18632;
  t18638 = t18636 + t18637;
  t18665 = -1.*var1[4];
  t18666 = var3[4] + t18665;
  t18668 = -1.*var1[3];
  t18669 = var3[3] + t18668;
  t18670 = 0.748*t18526;
  t18751 = -1.*t11005*t14773;
  t18752 = t13458*t14925;
  t18753 = t18751 + t18752;
  t18754 = t6212*t18753;
  t18755 = t18529 + t18754;
  t18685 = -1.*var1[0];
  t18686 = var3[0] + t18685;
  t18687 = 13.6*t18526*t14343;
  t18688 = 13.6*t14093*t14343;
  t18697 = -1.*var1[1];
  t18698 = var3[1] + t18697;
  t18699 = Power(t18526,2);
  t18700 = 6.8*t18699;
  t18701 = 6.8*t18526*t14093;
  t18702 = 6.8*t14350;
  t18703 = -1.*t759*t11005;
  t18704 = t6212*t13458;
  t18705 = t18703 + t18704;
  t18706 = 6.8*t14343*t18705;
  t18707 = -1.*t6212*t17957;
  t18739 = -1.*var1[2];
  t18740 = var3[2] + t18739;
  t18742 = 6.8*t18526*t18590;
  t18774 = -1.*t18596*t13458;
  t18775 = -0.24*t11005*t14925;
  t18776 = t18774 + t18775;
  t18756 = 0.768*t18666*t18755;
  t18757 = 3.2*t18649*t18094;
  t18758 = 3.2*t18645*t18755;
  t18761 = 6.4*t18094*t18349;
  t18762 = 6.4*t18094*t18755;
  t18765 = 3.2*t18094*t18534;
  t18766 = 3.2*t18531*t18349;
  t18767 = t759*t18753;
  t18768 = t18707 + t18767;
  t18769 = 3.2*t18094*t18768;
  t18770 = 3.2*t18531*t18755;
  t18773 = 3.2*t18094*t18607;
  t18778 = t18599*t18045;
  t18779 = t17957*t18605;
  t18783 = 3.2*t18611*t18755;
  t18807 = -0.24*t14773*t13458;
  t18808 = t18807 + t18775;
  t18785 = -1.*t17957*t18599;
  t18810 = 0.24*t11005*t14773;
  t18811 = t18810 + t18602;
  t18787 = -1.*t18605*t18753;
  t18675 = -1.*var1[6];
  t18676 = var3[6] + t18675;
  t18678 = -1.*var1[5];
  t18679 = var3[5] + t18678;
  t18680 = 0.748*t18538;
  t18822 = -1.*t18413*t18454;
  t18823 = t18417*t18456;
  t18824 = t18822 + t18823;
  t18825 = t6212*t18824;
  t18826 = t18549 + t18825;
  t18691 = 13.6*t18538*t18451;
  t18692 = 13.6*t18429*t18451;
  t18718 = Power(t18538,2);
  t18719 = 6.8*t18718;
  t18720 = 6.8*t18538*t18429;
  t18721 = 6.8*t18452;
  t18722 = -1.*t759*t18413;
  t18723 = t6212*t18417;
  t18724 = t18722 + t18723;
  t18725 = 6.8*t18451*t18724;
  t18726 = -1.*t6212*t18462;
  t18745 = 6.8*t18538*t18617;
  t18845 = -1.*t18625*t18417;
  t18846 = -0.24*t18413*t18456;
  t18847 = t18845 + t18846;
  t18827 = 0.768*t18676*t18826;
  t18828 = 3.2*t18661*t18480;
  t18829 = 3.2*t18657*t18826;
  t18832 = 6.4*t18480*t18512;
  t18833 = 6.4*t18480*t18826;
  t18836 = 3.2*t18480*t18569;
  t18837 = 3.2*t18553*t18512;
  t18838 = t759*t18824;
  t18839 = t18726 + t18838;
  t18840 = 3.2*t18480*t18839;
  t18841 = 3.2*t18553*t18826;
  t18844 = 3.2*t18480*t18634;
  t18849 = t18628*t18466;
  t18850 = t18462*t18632;
  t18854 = 3.2*t18638*t18826;
  t18878 = -0.24*t18454*t18417;
  t18879 = t18878 + t18846;
  t18856 = -1.*t18462*t18628;
  t18881 = 0.24*t18413*t18454;
  t18882 = t18881 + t18631;
  t18858 = -1.*t18632*t18824;
  t770 = Power(t759,2);
  t7239 = Power(t6212,2);
  t14286 = Power(t14093,2);
  t18099 = Power(t18094,2);
  t18350 = Power(t18349,2);
  t18432 = Power(t18429,2);
  t18486 = Power(t18480,2);
  t18513 = Power(t18512,2);
  t18527 = -6.8*t18526*t14343;
  t18528 = -6.8*t14093*t14343;
  t18532 = -3.2*t18094*t18531;
  t18535 = -3.2*t18534*t18349;
  t18539 = -6.8*t18538*t18451;
  t18540 = -6.8*t18429*t18451;
  t18558 = -3.2*t18480*t18553;
  t18573 = -3.2*t18569*t18512;
  t18580 = t18527 + t18528 + t18532 + t18535 + t18539 + t18540 + t18558 + t18573;
  t781 = -12.*t770;
  t10595 = -12.*t7239;
  t14632 = -6.8*t14350;
  t18711 = Power(t18534,2);
  t18713 = Power(t18531,2);
  t18453 = -6.8*t18452;
  t18730 = Power(t18569,2);
  t18732 = Power(t18553,2);
  t18708 = -1.*t759*t18045;
  t18709 = t18707 + t18708;
  t18715 = -1.*t759*t18340;
  t18716 = t18715 + t18530;
  t18727 = -1.*t759*t18466;
  t18728 = t18726 + t18727;
  t18734 = -1.*t759*t18506;
  t18735 = t18734 + t18550;
  t18710 = 3.2*t18709*t18094;
  t18712 = 3.2*t18711;
  t18714 = 3.2*t18713;
  t18717 = 3.2*t18716*t18349;
  t18729 = 3.2*t18728*t18480;
  t18731 = 3.2*t18730;
  t18733 = 3.2*t18732;
  t18736 = 3.2*t18735*t18512;
  t18737 = t18700 + t18701 + t18702 + t18706 + t18710 + t18712 + t18714 + t18717 + t18719 + t18720 + t18721 + t18725 + t18729 + t18731 + t18733 + t18736;
  t18585 = -2.88*t759;
  t18955 = 0.748*t18705;
  t18966 = 13.6*t18526*t18705;
  t18771 = t18700 + t18701 + t18702 + t18706 + t18765 + t18766 + t18769 + t18770;
  t18975 = 6.8*t18705*t18590;
  t18777 = t18776*t18045;
  t18780 = t18340*t18605;
  t18781 = t18777 + t18778 + t18779 + t18780;
  t18784 = -1.*t17957*t18776;
  t18786 = -1.*t18045*t18605;
  t18788 = t18784 + t18785 + t18786 + t18787;
  t18984 = 0.768*t18666*t18768;
  t18797 = Power(t14773,2);
  t18798 = -0.24*t18797;
  t18799 = t18642 + t18798;
  t18985 = 3.2*t18649*t18531;
  t18793 = -1.*t18596*t14925;
  t18794 = 0.24*t14773*t14925;
  t18795 = t18793 + t18794;
  t18986 = 3.2*t18645*t18768;
  t18989 = 6.4*t18534*t18531;
  t18990 = 6.4*t18531*t18768;
  t18805 = t18765 + t18766 + t18769 + t18770;
  t18994 = 3.2*t18531*t18607;
  t18809 = t18808*t18045;
  t18812 = t18340*t18811;
  t18813 = t18809 + t18778 + t18779 + t18812;
  t18996 = 3.2*t18611*t18768;
  t18815 = -1.*t17957*t18808;
  t18816 = -1.*t18045*t18811;
  t18817 = t18815 + t18785 + t18816 + t18787;
  t18961 = 0.748*t18724;
  t18969 = 13.6*t18538*t18724;
  t18842 = t18719 + t18720 + t18721 + t18725 + t18836 + t18837 + t18840 + t18841;
  t18978 = 6.8*t18724*t18617;
  t18848 = t18847*t18466;
  t18851 = t18506*t18632;
  t18852 = t18848 + t18849 + t18850 + t18851;
  t18855 = -1.*t18462*t18847;
  t18857 = -1.*t18466*t18632;
  t18859 = t18855 + t18856 + t18857 + t18858;
  t19013 = 0.768*t18676*t18839;
  t18868 = Power(t18454,2);
  t18869 = -0.24*t18868;
  t18870 = t18654 + t18869;
  t19014 = 3.2*t18661*t18553;
  t18864 = -1.*t18625*t18456;
  t18865 = 0.24*t18454*t18456;
  t18866 = t18864 + t18865;
  t19015 = 3.2*t18657*t18839;
  t19018 = 6.4*t18569*t18553;
  t19019 = 6.4*t18553*t18839;
  t18876 = t18836 + t18837 + t18840 + t18841;
  t19023 = 3.2*t18553*t18634;
  t18880 = t18879*t18466;
  t18883 = t18506*t18882;
  t18884 = t18880 + t18849 + t18850 + t18883;
  t19025 = 3.2*t18638*t18839;
  t18886 = -1.*t18462*t18879;
  t18887 = -1.*t18466*t18882;
  t18888 = t18886 + t18856 + t18887 + t18858;
  t18902 = 6.8*t18526*t14343;
  t18903 = 6.8*t14093*t14343;
  t18904 = 3.2*t18094*t18531;
  t18905 = 3.2*t18534*t18349;
  t18906 = 6.8*t18538*t18451;
  t18907 = 6.8*t18429*t18451;
  t18908 = 3.2*t18480*t18553;
  t18909 = 3.2*t18569*t18512;
  t18910 = t18902 + t18903 + t18904 + t18905 + t18906 + t18907 + t18908 + t18909;
  t18893 = 12.*t770;
  t18894 = 12.*t7239;
  t18741 = -2.88*t6212;
  t18743 = 3.2*t18534*t18607;
  t18744 = 3.2*t18531*t18611;
  t18746 = 3.2*t18569*t18634;
  t18747 = 3.2*t18553*t18638;
  t18748 = t18741 + t18742 + t18743 + t18744 + t18745 + t18746 + t18747;
  t18671 = 3.2*t18649*t18534;
  t18672 = 3.2*t18645*t18531;
  t18673 = t18670 + t18671 + t18672;
  t18681 = 3.2*t18661*t18569;
  t18682 = 3.2*t18657*t18553;
  t18683 = t18680 + t18681 + t18682;
  t18591 = -6.8*t14343*t18590;
  t18608 = -3.2*t18349*t18607;
  t18612 = -3.2*t18094*t18611;
  t18618 = -6.8*t18451*t18617;
  t18635 = -3.2*t18512*t18634;
  t18639 = -3.2*t18480*t18638;
  t18640 = t18585 + t18591 + t18608 + t18612 + t18618 + t18635 + t18639;
  t18936 = 2.88*t6212;
  t18937 = -6.8*t18526*t18590;
  t18938 = -3.2*t18534*t18607;
  t18939 = -3.2*t18531*t18611;
  t18940 = -6.8*t18538*t18617;
  t18941 = -3.2*t18569*t18634;
  t18942 = -3.2*t18553*t18638;
  t18943 = t18936 + t18937 + t18938 + t18939 + t18940 + t18941 + t18942;
  t18976 = 3.2*t18716*t18607;
  t18977 = 3.2*t18709*t18611;
  t18979 = 3.2*t18735*t18634;
  t18980 = 3.2*t18728*t18638;
  t18981 = t18585 + t18975 + t18976 + t18977 + t18978 + t18979 + t18980;
  t18995 = 3.2*t18531*t18781;
  t18997 = 3.2*t18534*t18788;
  t18998 = t18975 + t18994 + t18995 + t18996 + t18997;
  t18782 = 3.2*t18094*t18781;
  t18789 = 3.2*t18349*t18788;
  t18790 = t18742 + t18773 + t18782 + t18783 + t18789;
  t19008 = 3.2*t18531*t18813;
  t19009 = 3.2*t18534*t18817;
  t19010 = t18994 + t19008 + t18996 + t19009;
  t18814 = 3.2*t18094*t18813;
  t18818 = 3.2*t18349*t18817;
  t18819 = t18773 + t18814 + t18783 + t18818;
  t19070 = 0.4*t18620*t18724;
  t19071 = -0.4*t18429*t18456;
  t19072 = t18454*t18724;
  t19073 = t18429*t18456;
  t19074 = t19072 + t19073;
  t19075 = 0.8*t19074;
  t19076 = t19070 + t19071 + t19075;
  t19077 = -1.*var4[2]*t19076;
  t19078 = 0.4*t18620*t18538;
  t19079 = -0.4*t18724*t18456;
  t19080 = t18454*t18538;
  t19081 = t18724*t18456;
  t19082 = t19080 + t19081;
  t19083 = 0.8*t19082;
  t19084 = t19078 + t19079 + t19083;
  t19085 = -1.*var4[0]*t19084;
  t19024 = 3.2*t18553*t18852;
  t19026 = 3.2*t18569*t18859;
  t19027 = t18978 + t19023 + t19024 + t19025 + t19026;
  t18853 = 3.2*t18480*t18852;
  t18860 = 3.2*t18512*t18859;
  t18861 = t18745 + t18844 + t18853 + t18854 + t18860;
  t19037 = 3.2*t18553*t18884;
  t19038 = 3.2*t18569*t18888;
  t19039 = t19023 + t19037 + t19025 + t19038;
  t18885 = 3.2*t18480*t18884;
  t18889 = 3.2*t18512*t18888;
  t18890 = t18844 + t18885 + t18854 + t18889;
  t18911 = 2.88*t759;
  t18912 = 6.8*t14343*t18590;
  t18913 = 3.2*t18349*t18607;
  t18914 = 3.2*t18094*t18611;
  t18915 = 6.8*t18451*t18617;
  t18916 = 3.2*t18512*t18634;
  t18917 = 3.2*t18480*t18638;
  t18918 = t18911 + t18912 + t18913 + t18914 + t18915 + t18916 + t18917;
  t19045 = Power(t18590,2);
  t19047 = Power(t18607,2);
  t19049 = Power(t18611,2);
  t19051 = Power(t18617,2);
  t19053 = Power(t18634,2);
  t19055 = Power(t18638,2);
  t19129 = 0.4*t18538*t18456;
  t18641 = -0.748*t14343;
  t18646 = -3.2*t18645*t18094;
  t18650 = -3.2*t18649*t18349;
  t18651 = t18641 + t18646 + t18650;
  t18944 = -0.748*t18526;
  t18945 = -3.2*t18649*t18534;
  t18946 = -3.2*t18645*t18531;
  t18947 = t18944 + t18945 + t18946;
  t19058 = -0.748*t18590;
  t19059 = -3.2*t18649*t18607;
  t19060 = -3.2*t18645*t18611;
  t19061 = -0.67 + t19058 + t19059 + t19060;
  t18956 = 3.2*t18645*t18709;
  t18957 = 3.2*t18649*t18716;
  t18958 = t18955 + t18956 + t18957;
  t18987 = t18955 + t18985 + t18986;
  t18759 = t18670 + t18757 + t18758;
  t19090 = 3.2*t18645*t18781;
  t19091 = 3.2*t18649*t18788;
  t19092 = t19090 + t19091;
  t19001 = 3.2*t18799*t18534;
  t19002 = 3.2*t18795*t18531;
  t19003 = t19001 + t18985 + t19002 + t18986;
  t18796 = 3.2*t18795*t18094;
  t18800 = 3.2*t18799*t18349;
  t18801 = t18757 + t18796 + t18800 + t18758;
  t19102 = 3.2*t18799*t18607;
  t19103 = 3.2*t18795*t18611;
  t19104 = 3.2*t18645*t18813;
  t19105 = 3.2*t18649*t18817;
  t19106 = t19102 + t19103 + t19104 + t19105;
  t18919 = 0.748*t14343;
  t18920 = 3.2*t18645*t18094;
  t18921 = 3.2*t18649*t18349;
  t18922 = t18919 + t18920 + t18921;
  t19162 = 0.748*t18590;
  t19163 = 3.2*t18649*t18607;
  t19164 = 3.2*t18645*t18611;
  t19165 = 0.67 + t19162 + t19163 + t19164;
  t19184 = Power(t18649,2);
  t19186 = Power(t18645,2);
  t18652 = -0.768*t18094;
  t18948 = -0.768*t18531;
  t19062 = -0.768*t18611;
  t19063 = -0.2 + t19062;
  t19189 = -0.768*t18645;
  t19190 = -0.2 + t19189;
  t19216 = 0.768*t18698*t18768;
  t19217 = 0.768*t18686*t18755;
  t18923 = 0.768*t18094;
  t19043 = 0.768*t18531;
  t19166 = 0.768*t18611;
  t19167 = 0.2 + t19166;
  t19210 = 0.768*t18645;
  t19211 = 0.2 + t19210;
  t18653 = -0.748*t18451;
  t18658 = -3.2*t18657*t18480;
  t18662 = -3.2*t18661*t18512;
  t18663 = t18653 + t18658 + t18662;
  t18949 = -0.748*t18538;
  t18950 = -3.2*t18661*t18569;
  t18951 = -3.2*t18657*t18553;
  t18952 = t18949 + t18950 + t18951;
  t19064 = -0.748*t18617;
  t19065 = -3.2*t18661*t18634;
  t19066 = -3.2*t18657*t18638;
  t19067 = -0.67 + t19064 + t19065 + t19066;
  t18962 = 3.2*t18657*t18728;
  t18963 = 3.2*t18661*t18735;
  t18964 = t18961 + t18962 + t18963;
  t19016 = t18961 + t19014 + t19015;
  t18830 = t18680 + t18828 + t18829;
  t19116 = 3.2*t18657*t18852;
  t19117 = 3.2*t18661*t18859;
  t19118 = t19116 + t19117;
  t19128 = -0.4*t18454*t18724;
  t19130 = -1.*t18538*t18456;
  t19131 = t19072 + t19130;
  t19132 = 0.8*t19131;
  t19133 = t19128 + t19129 + t19132;
  t19134 = -1.*var4[2]*t19133;
  t19135 = -0.4*t18454*t18538;
  t19136 = 0.4*t18451*t18456;
  t19137 = -1.*t18451*t18456;
  t19138 = t19080 + t19137;
  t19139 = 0.8*t19138;
  t19140 = t19135 + t19136 + t19139;
  t19141 = -1.*var4[0]*t19140;
  t19030 = 3.2*t18870*t18569;
  t19031 = 3.2*t18866*t18553;
  t19032 = t19030 + t19014 + t19031 + t19015;
  t18867 = 3.2*t18866*t18480;
  t18871 = 3.2*t18870*t18512;
  t18872 = t18828 + t18867 + t18871 + t18829;
  t19142 = 3.2*t18870*t18634;
  t19143 = 3.2*t18866*t18638;
  t19144 = 3.2*t18657*t18884;
  t19145 = 3.2*t18661*t18888;
  t19146 = t19142 + t19143 + t19144 + t19145;
  t18924 = 0.748*t18451;
  t18925 = 3.2*t18657*t18480;
  t18926 = 3.2*t18661*t18512;
  t18927 = t18924 + t18925 + t18926;
  t19168 = 0.748*t18617;
  t19169 = 3.2*t18661*t18634;
  t19170 = 3.2*t18657*t18638;
  t19171 = 0.67 + t19168 + t19169 + t19170;
  t19222 = Power(t18661,2);
  t19224 = Power(t18657,2);
  t19174 = -0.4*t18620*t18451;
  t19175 = t18454*t18451;
  t19176 = t18538*t18456;
  t19177 = t19175 + t19176;
  t19178 = -0.8*t19177;
  t19179 = t19174 + t19129 + t19178;
  t19180 = -0.4*t18620*t18538;
  t19181 = 0.4*t18724*t18456;
  t19182 = -0.8*t19082;
  t19183 = t19180 + t19181 + t19182;
  t18664 = -0.768*t18480;
  t18953 = -0.768*t18553;
  t19068 = -0.768*t18638;
  t19069 = -0.2 + t19068;
  t19227 = -0.768*t18657;
  t19228 = -0.2 + t19227;
  t19254 = 0.768*t18698*t18839;
  t19255 = 0.768*t18686*t18826;
  t18928 = 0.768*t18480;
  t19044 = 0.768*t18553;
  t19172 = 0.768*t18638;
  t19173 = 0.2 + t19172;
  t19248 = 0.768*t18657;
  t19249 = 0.2 + t19248;
  t19259 = 0.4*t18454*t18451;
  p_output1[0]=t10595 - 6.8*t14286 + t14632 - 3.2*t18099 - 3.2*t18350 - 6.8*t18432 + t18453 - 3.2*t18486 - 3.2*t18513 + t781;
  p_output1[1]=t18580;
  p_output1[2]=t18640;
  p_output1[3]=t18651;
  p_output1[4]=t18652;
  p_output1[5]=t18663;
  p_output1[6]=t18664;
  p_output1[7]=0.768*t18531*t18666 + t18669*t18673 + 0.768*t18553*t18676 + t18679*t18683 + t18686*(6.4*t18094*t18531 + 6.4*t18349*t18534 + 6.4*t18480*t18553 + 6.4*t18512*t18569 + t18687 + t18688 + t18691 + t18692) + t18698*t18737 + t18740*t18748;
  p_output1[8]=t18756 + t18669*t18759 + t18686*(t18687 + t18688 + t18761 + t18762) + t18698*t18771 + t18740*t18790;
  p_output1[9]=t18756 + t18686*(t18761 + t18762) + t18669*t18801 + t18698*t18805 + t18740*t18819;
  p_output1[10]=t18827 + t18679*t18830 + t18686*(t18691 + t18692 + t18832 + t18833) + t18698*t18842 + t18740*t18861;
  p_output1[11]=t18827 + t18686*(t18832 + t18833) + t18679*t18872 + t18698*t18876 + t18740*t18890;
  p_output1[12]=6.8*t14286 + 3.2*t18099 + 3.2*t18350 + 6.8*t18432 + 3.2*t18486 + 3.2*t18513 + t18702 + t18721 + t18893 + t18894;
  p_output1[13]=t18910;
  p_output1[14]=t18918;
  p_output1[15]=t18922;
  p_output1[16]=t18923;
  p_output1[17]=t18927;
  p_output1[18]=t18928;
  p_output1[19]=-1.;
  p_output1[20]=t18580;
  p_output1[21]=t10595 + t14632 + t18453 - 6.8*t18699 - 3.2*t18711 - 3.2*t18713 - 6.8*t18718 - 3.2*t18730 - 3.2*t18732 + t781;
  p_output1[22]=t18943;
  p_output1[23]=t18947;
  p_output1[24]=t18948;
  p_output1[25]=t18952;
  p_output1[26]=t18953;
  p_output1[27]=0.768*t18666*t18709 + 0.768*t18676*t18728 + t18686*t18737 + t18669*t18958 + t18679*t18964 + t18698*(t18687 + t18691 + 6.4*t18531*t18709 + 6.4*t18534*t18716 + 6.4*t18553*t18728 + 6.4*t18569*t18735 + t18966 + t18969) + t18740*t18981;
  p_output1[28]=t18686*t18771 + t18984 + t18669*t18987 + t18698*(t18687 + t18966 + t18989 + t18990) + t18740*t18998;
  p_output1[29]=t18686*t18805 + t18984 + t18698*(t18989 + t18990) + t18669*t19003 + t18740*t19010;
  p_output1[30]=t18686*t18842 + t19013 + t18679*t19016 + t18698*(t18691 + t18969 + t19018 + t19019) + t18740*t19027;
  p_output1[31]=t18686*t18876 + t19013 + t18698*(t19018 + t19019) + t18679*t19032 + t18740*t19039;
  p_output1[32]=t18910;
  p_output1[33]=t18700 + t18702 + t18712 + t18714 + t18719 + t18721 + t18731 + t18733 + t18893 + t18894;
  p_output1[34]=t18748;
  p_output1[35]=t18673;
  p_output1[36]=t19043;
  p_output1[37]=t18683;
  p_output1[38]=t19044;
  p_output1[39]=-1.;
  p_output1[40]=t18640;
  p_output1[41]=t18943;
  p_output1[42]=-3.3612 - 6.8*t19045 - 3.2*t19047 - 3.2*t19049 - 6.8*t19051 - 3.2*t19053 - 3.2*t19055;
  p_output1[43]=t19061;
  p_output1[44]=t19063;
  p_output1[45]=t19067;
  p_output1[46]=t19069;
  p_output1[47]=t18686*t18748 + t18698*t18981 + t19077 + t19085;
  p_output1[48]=0.768*t18666*t18781 + t18740*(6.4*t18611*t18781 + 6.4*t18607*t18788) + t18686*t18790 + t18698*t18998 + t18669*t19092;
  p_output1[49]=0.768*t18666*t18813 + t18740*(6.4*t18611*t18813 + 6.4*t18607*t18817) + t18686*t18819 + t18698*t19010 + t18669*t19106;
  p_output1[50]=0.768*t18676*t18852 + t18740*(6.4*t18638*t18852 + 6.4*t18634*t18859) + t18686*t18861 + t18698*t19027 + t19077 + t19085 + t18679*t19118;
  p_output1[51]=0.768*t18676*t18884 + t18740*(6.4*t18638*t18884 + 6.4*t18634*t18888) + t18686*t18890 + t18698*t19039 + t19134 + t19141 + t18679*t19146;
  p_output1[52]=t18918;
  p_output1[53]=t18748;
  p_output1[54]=3.3612 + 6.8*t19045 + 3.2*t19047 + 3.2*t19049 + 6.8*t19051 + 3.2*t19053 + 3.2*t19055;
  p_output1[55]=t19165;
  p_output1[56]=t19167;
  p_output1[57]=t19171;
  p_output1[58]=t19173;
  p_output1[59]=t19179;
  p_output1[60]=t19183;
  p_output1[61]=t18651;
  p_output1[62]=t18947;
  p_output1[63]=t19061;
  p_output1[64]=-1.58228 - 3.2*t19184 - 3.2*t19186;
  p_output1[65]=t19190;
  p_output1[66]=t18673*t18686 + t18698*t18958;
  p_output1[67]=t18686*t18759 + t18698*t18987 + t18740*t19092;
  p_output1[68]=0.768*t18666*t18795 + t18669*(6.4*t18645*t18795 + 6.4*t18649*t18799) + t18686*t18801 + t18698*t19003 + t18740*t19106;
  p_output1[69]=t18922;
  p_output1[70]=t18673;
  p_output1[71]=t19165;
  p_output1[72]=1.58228 + 3.2*t19184 + 3.2*t19186;
  p_output1[73]=t19211;
  p_output1[74]=t18652;
  p_output1[75]=t18948;
  p_output1[76]=t19063;
  p_output1[77]=t19190;
  p_output1[78]=-1.2143199999999998;
  p_output1[79]=0.768*t18531*t18686 + 0.768*t18698*t18709;
  p_output1[80]=0.768*t18740*t18781 + t19216 + t19217;
  p_output1[81]=0.768*t18669*t18795 + 0.768*t18740*t18813 + t19216 + t19217;
  p_output1[82]=t18923;
  p_output1[83]=t19043;
  p_output1[84]=t19167;
  p_output1[85]=t19211;
  p_output1[86]=1.2143199999999998;
  p_output1[87]=t18663;
  p_output1[88]=t18952;
  p_output1[89]=t19067;
  p_output1[90]=-1.58228 - 3.2*t19222 - 3.2*t19224;
  p_output1[91]=t19228;
  p_output1[92]=t18683*t18686 + t18698*t18964 + t19077 + t19085;
  p_output1[93]=t18686*t18830 + t18698*t19016 + t19077 + t19085 + t18740*t19118;
  p_output1[94]=0.768*t18676*t18866 + t18679*(6.4*t18657*t18866 + 6.4*t18661*t18870) + t18686*t18872 + t18698*t19032 + t19134 + t19141 + t18740*t19146;
  p_output1[95]=t18927;
  p_output1[96]=t18683;
  p_output1[97]=t19171;
  p_output1[98]=1.58228 + 3.2*t19222 + 3.2*t19224;
  p_output1[99]=t19249;
  p_output1[100]=t19179;
  p_output1[101]=t19183;
  p_output1[102]=t18664;
  p_output1[103]=t18953;
  p_output1[104]=t19069;
  p_output1[105]=t19228;
  p_output1[106]=-1.2143199999999998;
  p_output1[107]=0.768*t18553*t18686 + 0.768*t18698*t18728 + t19134 + t19141;
  p_output1[108]=0.768*t18740*t18852 + t19134 + t19141 + t19254 + t19255;
  p_output1[109]=0.768*t18679*t18866 + 0.768*t18740*t18884 + t19254 + t19255 - 1.*(0.4*t18429*t18454 + t19136 + 0.8*(-1.*t18429*t18454 + t19137))*var4[0] - 1.*(t19129 + 0.8*(-1.*t18451*t18454 + t19130) + t19259)*var4[2];
  p_output1[110]=t18928;
  p_output1[111]=t19044;
  p_output1[112]=t19173;
  p_output1[113]=t19249;
  p_output1[114]=1.2143199999999998;
  p_output1[115]=t19071 - 0.8*(-1.*t18429*t18456 + t19175) + t19259;
  p_output1[116]=-0.4*t18451*t18456 + 0.4*t18454*t18538 - 0.8*t19138;
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2,*var3,*var4;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 4)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Four input(s) required (var1,var2,var3,var4).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }
  mrows = mxGetM(prhs[2]);
  ncols = mxGetN(prhs[2]);
  if( !mxIsDouble(prhs[2]) || mxIsComplex(prhs[2]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var3 is wrong.");
    }
  mrows = mxGetM(prhs[3]);
  ncols = mxGetN(prhs[3]);
  if( !mxIsDouble(prhs[3]) || mxIsComplex(prhs[3]) ||
    ( !(mrows == 3 && ncols == 1) && 
      !(mrows == 1 && ncols == 3))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var4 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
  var3 = mxGetPr(prhs[2]);
  var4 = mxGetPr(prhs[3]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 117, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2,var3,var4);


}

#else // MATLAB_MEX_FILE

#include "J_dxDiscreteMapds1_LSlift.hh"

namespace Pattern[ds1, Blank[LSlift]]
{

void J_dxDiscreteMapds1_LSlift_raw(double *p_output1, const double *var1,const double *var2,const double *var3,const double *var4)
{
  // Call Subroutines
  output1(p_output1, var1, var2, var3, var4);

}

}

#endif // MATLAB_MEX_FILE
