/*
 * Automatically Generated from Mathematica.
 * Wed 6 Nov 2019 23:20:27 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t10666;
  double t7785;
  double t8072;
  double t10816;
  double t10912;
  double t7110;
  double t10645;
  double t10875;
  double t10904;
  double t10911;
  double t10915;
  double t10924;
  double t10931;
  double t10932;
  double t10944;
  double t11002;
  double t11003;
  double t11026;
  double t11027;
  double t11049;
  double t12037;
  double t11901;
  double t11912;
  double t12040;
  double t12005;
  double t12063;
  double t12064;
  double t12088;
  double t12091;
  double t12143;
  double t12144;
  double t12145;
  double t14041;
  double t14598;
  double t14599;
  double t14844;
  double t14847;
  double t14850;
  double t14938;
  double t14943;
  double t14947;
  double t14935;
  double t14936;
  double t14937;
  double t10990;
  double t10994;
  double t10995;
  double t14955;
  double t14959;
  double t14968;
  double t11125;
  double t11120;
  double t11122;
  double t11123;
  double t11124;
  double t11684;
  double t14986;
  double t15007;
  double t15018;
  double t15019;
  double t15020;
  double t15015;
  double t15016;
  double t15017;
  double t14371;
  double t14373;
  double t14375;
  double t15025;
  double t15031;
  double t15032;
  double t14915;
  double t14902;
  double t14912;
  double t14913;
  double t14914;
  double t14926;
  double t15040;
  double t15046;
  double t14993;
  double t15005;
  double t14982;
  double t14991;
  double t14979;
  double t14980;
  double t15012;
  double t15013;
  double t15043;
  double t15044;
  double t15039;
  double t15041;
  double t15036;
  double t15037;
  double t15058;
  double t15070;
  double t15115;
  double t15116;
  double t15117;
  double t15119;
  double t15120;
  double t15121;
  double t15135;
  double t15136;
  double t15137;
  double t15139;
  double t15140;
  double t15141;
  double t11000;
  double t11111;
  double t11117;
  double t11119;
  double t11052;
  double t11085;
  double t11087;
  double t11099;
  double t15153;
  double t15154;
  double t15155;
  double t15156;
  double t15157;
  double t14951;
  double t14973;
  double t14977;
  double t14978;
  double t15006;
  double t15074;
  double t15075;
  double t15076;
  double t15077;
  double t15078;
  double t15079;
  double t15170;
  double t15171;
  double t15109;
  double t15110;
  double t15111;
  double t15112;
  double t15113;
  double t15114;
  double t15118;
  double t15122;
  double t15123;
  double t15125;
  double t15126;
  double t15127;
  double t15182;
  double t15183;
  double t15184;
  double t15158;
  double t15159;
  double t15160;
  double t15163;
  double t15164;
  double t15165;
  double t15166;
  double t15167;
  double t15168;
  double t15169;
  double t15172;
  double t15175;
  double t15176;
  double t15177;
  double t15178;
  double t15181;
  double t15186;
  double t15187;
  double t15191;
  double t15216;
  double t15217;
  double t15193;
  double t15219;
  double t15220;
  double t15195;
  double t14434;
  double t14882;
  double t14883;
  double t14898;
  double t14858;
  double t14862;
  double t14866;
  double t14867;
  double t15232;
  double t15233;
  double t15234;
  double t15235;
  double t15236;
  double t15021;
  double t15033;
  double t15034;
  double t15035;
  double t15045;
  double t15086;
  double t15090;
  double t15096;
  double t15097;
  double t15098;
  double t15099;
  double t15249;
  double t15250;
  double t15129;
  double t15130;
  double t15131;
  double t15132;
  double t15133;
  double t15134;
  double t15138;
  double t15142;
  double t15143;
  double t15145;
  double t15146;
  double t15147;
  double t15261;
  double t15262;
  double t15263;
  double t15237;
  double t15238;
  double t15239;
  double t15242;
  double t15243;
  double t15244;
  double t15245;
  double t15246;
  double t15247;
  double t15248;
  double t15251;
  double t15254;
  double t15255;
  double t15256;
  double t15257;
  double t15260;
  double t15265;
  double t15266;
  double t15270;
  double t15295;
  double t15296;
  double t15272;
  double t15298;
  double t15299;
  double t15274;
  double t15081;
  double t15083;
  double t15101;
  double t15103;
  double t15311;
  double t15312;
  double t15313;
  double t15314;
  double t15315;
  double t15316;
  double t15317;
  double t15318;
  double t15319;
  double t15321;
  double t15322;
  double t15323;
  double t15324;
  double t15325;
  double t15326;
  double t15327;
  double t15328;
  double t15329;
  double t15330;
  double t15331;
  double t15332;
  double t15333;
  double t15334;
  double t15335;
  double t15336;
  double t15337;
  double t15340;
  double t15341;
  double t15342;
  double t15343;
  double t15346;
  double t15347;
  double t15348;
  double t15349;
  double t15008;
  double t15010;
  double t15011;
  double t15047;
  double t15056;
  double t15057;
  double t14981;
  double t14992;
  double t15009;
  double t15014;
  double t15038;
  double t15042;
  double t15051;
  double t15071;
  double t15072;
  double t15368;
  double t15379;
  double t15380;
  double t15173;
  double t15399;
  double t15185;
  double t15188;
  double t15189;
  double t15192;
  double t15194;
  double t15196;
  double t15409;
  double t15410;
  double t15206;
  double t15207;
  double t15208;
  double t15202;
  double t15203;
  double t15204;
  double t15411;
  double t15414;
  double t15415;
  double t15416;
  double t15417;
  double t15212;
  double t15421;
  double t15218;
  double t15221;
  double t15222;
  double t15423;
  double t15224;
  double t15225;
  double t15226;
  double t15374;
  double t15387;
  double t15388;
  double t15252;
  double t15402;
  double t15264;
  double t15267;
  double t15268;
  double t15271;
  double t15273;
  double t15275;
  double t15442;
  double t15443;
  double t15285;
  double t15286;
  double t15287;
  double t15281;
  double t15282;
  double t15283;
  double t15444;
  double t15447;
  double t15448;
  double t15449;
  double t15450;
  double t15291;
  double t15454;
  double t15297;
  double t15300;
  double t15301;
  double t15456;
  double t15303;
  double t15304;
  double t15305;
  double t15338;
  double t10986;
  double t11104;
  double t11891;
  double t11893;
  double t11895;
  double t14327;
  double t14868;
  double t14932;
  double t14933;
  double t14934;
  double t15475;
  double t15476;
  double t15477;
  double t15478;
  double t15479;
  double t15480;
  double t15481;
  double t15108;
  double t15124;
  double t15128;
  double t15144;
  double t15148;
  double t15149;
  double t15398;
  double t15400;
  double t15401;
  double t15403;
  double t15404;
  double t15405;
  double t15190;
  double t15197;
  double t15198;
  double t15422;
  double t15424;
  double t15425;
  double t15223;
  double t15227;
  double t15228;
  double t15436;
  double t15437;
  double t15438;
  double t15269;
  double t15276;
  double t15277;
  double t15455;
  double t15457;
  double t15458;
  double t15302;
  double t15306;
  double t15307;
  double t15469;
  double t15470;
  double t15471;
  double t15353;
  double t15354;
  double t15355;
  double t15356;
  double t15357;
  double t15358;
  double t15359;
  double t15360;
  double t15150;
  double t15369;
  double t15370;
  double t15371;
  double t15161;
  double t15412;
  double t15205;
  double t15209;
  double t15210;
  double t15429;
  double t15430;
  double t15431;
  double t15363;
  double t15487;
  double t15534;
  double t15535;
  double t15536;
  double t15537;
  double t15364;
  double t15488;
  double t15375;
  double t15376;
  double t15377;
  double t15240;
  double t15445;
  double t15284;
  double t15288;
  double t15289;
  double t15462;
  double t15463;
  double t15464;
  double t15365;
  double t15489;
  double t15560;
  double t15561;
  double t15562;
  double t15563;
  double t15366;
  double t15490;
  t10666 = Cos(var1[3]);
  t7785 = Cos(var1[4]);
  t8072 = Sin(var1[3]);
  t10816 = Sin(var1[4]);
  t10912 = Cos(var1[2]);
  t7110 = Sin(var1[2]);
  t10645 = -1.*t7785*t8072;
  t10875 = -1.*t10666*t10816;
  t10904 = t10645 + t10875;
  t10911 = -1.*t7110*t10904;
  t10915 = t10666*t7785;
  t10924 = -1.*t8072*t10816;
  t10931 = t10915 + t10924;
  t10932 = -1.*t10912*t10931;
  t10944 = t10911 + t10932;
  t11002 = -1.*t7785;
  t11003 = 1. + t11002;
  t11026 = 0.4*t11003;
  t11027 = 0.64*t7785;
  t11049 = t11026 + t11027;
  t12037 = Cos(var1[5]);
  t11901 = Cos(var1[6]);
  t11912 = Sin(var1[5]);
  t12040 = Sin(var1[6]);
  t12005 = -1.*t11901*t11912;
  t12063 = -1.*t12037*t12040;
  t12064 = t12005 + t12063;
  t12088 = -1.*t7110*t12064;
  t12091 = t12037*t11901;
  t12143 = -1.*t11912*t12040;
  t12144 = t12091 + t12143;
  t12145 = -1.*t10912*t12144;
  t14041 = t12088 + t12145;
  t14598 = -1.*t11901;
  t14599 = 1. + t14598;
  t14844 = 0.4*t14599;
  t14847 = 0.64*t11901;
  t14850 = t14844 + t14847;
  t14938 = t10912*t10666;
  t14943 = -1.*t7110*t8072;
  t14947 = t14938 + t14943;
  t14935 = -1.*t10666*t7110;
  t14936 = -1.*t10912*t8072;
  t14937 = t14935 + t14936;
  t10990 = -1.*t10912*t10666;
  t10994 = t7110*t8072;
  t10995 = t10990 + t10994;
  t14955 = t10666*t7110;
  t14959 = t10912*t8072;
  t14968 = t14955 + t14959;
  t11125 = -1.*t7110*t10931;
  t11120 = t7785*t8072;
  t11122 = t10666*t10816;
  t11123 = t11120 + t11122;
  t11124 = -1.*t10912*t11123;
  t11684 = t11124 + t11125;
  t14986 = t10912*t10931;
  t15007 = t7110*t10931;
  t15018 = t10912*t12037;
  t15019 = -1.*t7110*t11912;
  t15020 = t15018 + t15019;
  t15015 = -1.*t12037*t7110;
  t15016 = -1.*t10912*t11912;
  t15017 = t15015 + t15016;
  t14371 = -1.*t10912*t12037;
  t14373 = t7110*t11912;
  t14375 = t14371 + t14373;
  t15025 = t12037*t7110;
  t15031 = t10912*t11912;
  t15032 = t15025 + t15031;
  t14915 = -1.*t7110*t12144;
  t14902 = t11901*t11912;
  t14912 = t12037*t12040;
  t14913 = t14902 + t14912;
  t14914 = -1.*t10912*t14913;
  t14926 = t14914 + t14915;
  t15040 = t10912*t12144;
  t15046 = t7110*t12144;
  t14993 = t7110*t10904;
  t15005 = t14993 + t14986;
  t14982 = -1.*t7110*t11123;
  t14991 = t14982 + t14986;
  t14979 = t10912*t10904;
  t14980 = t14979 + t11125;
  t15012 = t10912*t11123;
  t15013 = t15012 + t15007;
  t15043 = t7110*t12064;
  t15044 = t15043 + t15040;
  t15039 = -1.*t7110*t14913;
  t15041 = t15039 + t15040;
  t15036 = t10912*t12064;
  t15037 = t15036 + t14915;
  t15058 = t10912*t14913;
  t15070 = t15058 + t15046;
  t15115 = t11049*t8072;
  t15116 = 0.24*t10666*t10816;
  t15117 = t15115 + t15116;
  t15119 = t10666*t11049;
  t15120 = -0.24*t8072*t10816;
  t15121 = t15119 + t15120;
  t15135 = t14850*t11912;
  t15136 = 0.24*t12037*t12040;
  t15137 = t15135 + t15136;
  t15139 = t12037*t14850;
  t15140 = -0.24*t11912*t12040;
  t15141 = t15139 + t15140;
  t11000 = 0.748*t10995;
  t11111 = t11049*t10816;
  t11117 = -0.24*t7785*t10816;
  t11119 = t11111 + t11117;
  t11052 = t11049*t7785;
  t11085 = Power(t10816,2);
  t11087 = 0.24*t11085;
  t11099 = t11052 + t11087;
  t15153 = -1.*t10666*t7785;
  t15154 = t8072*t10816;
  t15155 = t15153 + t15154;
  t15156 = t10912*t15155;
  t15157 = t10911 + t15156;
  t14951 = 20.4*t14937*t14947;
  t14973 = 6.8*t14968*t14947;
  t14977 = 20.4*t14937*t10995;
  t14978 = 6.8*t14968*t10995;
  t15006 = -1.*t10912*t10904;
  t15074 = Power(t14937,2);
  t15075 = 13.6*t15074;
  t15076 = 13.6*t14937*t14968;
  t15077 = Power(t14947,2);
  t15078 = 13.6*t15077;
  t15079 = 13.6*t14947*t10995;
  t15170 = t7110*t15155;
  t15171 = t14979 + t15170;
  t15109 = Power(t10666,2);
  t15110 = 0.11*t15109;
  t15111 = Power(t8072,2);
  t15112 = 0.11*t15111;
  t15113 = t15110 + t15112;
  t15114 = 6.8*t10995*t15113;
  t15118 = -1.*t15117*t10931;
  t15122 = -1.*t10904*t15121;
  t15123 = t15118 + t15122;
  t15125 = t15117*t11123;
  t15126 = t10931*t15121;
  t15127 = t15125 + t15126;
  t15182 = -1.*t11049*t8072;
  t15183 = -0.24*t10666*t10816;
  t15184 = t15182 + t15183;
  t15158 = -0.384*var2[4]*t15157;
  t15159 = 3.2*t11119*t14980;
  t15160 = 3.2*t11099*t15157;
  t15163 = 6.4*t14991*t14980;
  t15164 = 3.2*t15005*t11684;
  t15165 = 3.2*t10944*t15013;
  t15166 = 6.4*t14980*t15157;
  t15167 = -1.*t7110*t15155;
  t15168 = t15006 + t15167;
  t15169 = 3.2*t15005*t15168;
  t15172 = 3.2*t10944*t15171;
  t15175 = 6.4*t15005*t14991;
  t15176 = 6.4*t14980*t15013;
  t15177 = 6.4*t15005*t15157;
  t15178 = 6.4*t14980*t15171;
  t15181 = 3.2*t14980*t15123;
  t15186 = t15117*t10931;
  t15187 = t10904*t15121;
  t15191 = 3.2*t15127*t15157;
  t15216 = -0.24*t7785*t8072;
  t15217 = t15216 + t15183;
  t15193 = -1.*t10904*t15117;
  t15219 = 0.24*t10666*t7785;
  t15220 = t15219 + t15120;
  t15195 = -1.*t15121*t15155;
  t14434 = 0.748*t14375;
  t14882 = t14850*t12040;
  t14883 = -0.24*t11901*t12040;
  t14898 = t14882 + t14883;
  t14858 = t14850*t11901;
  t14862 = Power(t12040,2);
  t14866 = 0.24*t14862;
  t14867 = t14858 + t14866;
  t15232 = -1.*t12037*t11901;
  t15233 = t11912*t12040;
  t15234 = t15232 + t15233;
  t15235 = t10912*t15234;
  t15236 = t12088 + t15235;
  t15021 = 20.4*t15017*t15020;
  t15033 = 6.8*t15032*t15020;
  t15034 = 20.4*t15017*t14375;
  t15035 = 6.8*t15032*t14375;
  t15045 = -1.*t10912*t12064;
  t15086 = Power(t15017,2);
  t15090 = 13.6*t15086;
  t15096 = 13.6*t15017*t15032;
  t15097 = Power(t15020,2);
  t15098 = 13.6*t15097;
  t15099 = 13.6*t15020*t14375;
  t15249 = t7110*t15234;
  t15250 = t15036 + t15249;
  t15129 = Power(t12037,2);
  t15130 = 0.11*t15129;
  t15131 = Power(t11912,2);
  t15132 = 0.11*t15131;
  t15133 = t15130 + t15132;
  t15134 = 6.8*t14375*t15133;
  t15138 = -1.*t15137*t12144;
  t15142 = -1.*t12064*t15141;
  t15143 = t15138 + t15142;
  t15145 = t15137*t14913;
  t15146 = t12144*t15141;
  t15147 = t15145 + t15146;
  t15261 = -1.*t14850*t11912;
  t15262 = -0.24*t12037*t12040;
  t15263 = t15261 + t15262;
  t15237 = -0.384*var2[6]*t15236;
  t15238 = 3.2*t14898*t15037;
  t15239 = 3.2*t14867*t15236;
  t15242 = 6.4*t15041*t15037;
  t15243 = 3.2*t15044*t14926;
  t15244 = 3.2*t14041*t15070;
  t15245 = 6.4*t15037*t15236;
  t15246 = -1.*t7110*t15234;
  t15247 = t15045 + t15246;
  t15248 = 3.2*t15044*t15247;
  t15251 = 3.2*t14041*t15250;
  t15254 = 6.4*t15044*t15041;
  t15255 = 6.4*t15037*t15070;
  t15256 = 6.4*t15044*t15236;
  t15257 = 6.4*t15037*t15250;
  t15260 = 3.2*t15037*t15143;
  t15265 = t15137*t12144;
  t15266 = t12064*t15141;
  t15270 = 3.2*t15147*t15236;
  t15295 = -0.24*t11901*t11912;
  t15296 = t15295 + t15262;
  t15272 = -1.*t12064*t15137;
  t15298 = 0.24*t12037*t11901;
  t15299 = t15298 + t15140;
  t15274 = -1.*t15141*t15234;
  t15081 = Power(t14991,2);
  t15083 = Power(t14980,2);
  t15101 = Power(t15041,2);
  t15103 = Power(t15037,2);
  t15311 = 13.6*t14937*t14947;
  t15312 = 13.6*t14968*t14947;
  t15313 = 6.4*t15005*t14980;
  t15314 = 6.4*t14991*t15013;
  t15315 = 13.6*t15017*t15020;
  t15316 = 13.6*t15032*t15020;
  t15317 = 6.4*t15044*t15037;
  t15318 = 6.4*t15041*t15070;
  t15319 = t15311 + t15312 + t15313 + t15314 + t15315 + t15316 + t15317 + t15318;
  t15321 = 6.8*t15074;
  t15322 = 6.8*t14937*t14968;
  t15323 = 6.8*t15077;
  t15324 = 6.8*t14947*t10995;
  t15325 = 3.2*t10944*t15005;
  t15326 = 3.2*t15081;
  t15327 = 3.2*t15083;
  t15328 = 3.2*t11684*t15013;
  t15329 = 6.8*t15086;
  t15330 = 6.8*t15017*t15032;
  t15331 = 6.8*t15097;
  t15332 = 6.8*t15020*t14375;
  t15333 = 3.2*t14041*t15044;
  t15334 = 3.2*t15101;
  t15335 = 3.2*t15103;
  t15336 = 3.2*t14926*t15070;
  t15337 = t15321 + t15322 + t15323 + t15324 + t15325 + t15326 + t15327 + t15328 + t15329 + t15330 + t15331 + t15332 + t15333 + t15334 + t15335 + t15336;
  t15340 = 0.748*t14937;
  t15341 = 3.2*t11119*t14991;
  t15342 = 3.2*t11099*t14980;
  t15343 = t15340 + t15341 + t15342;
  t15346 = 0.748*t15017;
  t15347 = 3.2*t14898*t15041;
  t15348 = 3.2*t14867*t15037;
  t15349 = t15346 + t15347 + t15348;
  t15008 = t15006 + t15007;
  t15010 = t7110*t11123;
  t15011 = t15010 + t10932;
  t15047 = t15045 + t15046;
  t15056 = t7110*t14913;
  t15057 = t15056 + t12145;
  t14981 = 9.6*t10944*t14980;
  t14992 = 9.6*t14991*t11684;
  t15009 = 3.2*t15005*t15008;
  t15014 = 3.2*t15011*t15013;
  t15038 = 9.6*t14041*t15037;
  t15042 = 9.6*t15041*t14926;
  t15051 = 3.2*t15044*t15047;
  t15071 = 3.2*t15057*t15070;
  t15072 = t14951 + t14973 + t14977 + t14978 + t14981 + t14992 + t15009 + t15014 + t15021 + t15033 + t15034 + t15035 + t15038 + t15042 + t15051 + t15071;
  t15368 = 0.748*t14968;
  t15379 = Power(t10995,2);
  t15380 = 13.6*t15379;
  t15173 = t14951 + t14973 + t14977 + t14978 + t15163 + t15164 + t15165 + t15166 + t15169 + t15172;
  t15399 = 6.8*t14968*t15113;
  t15185 = t15184*t10931;
  t15188 = t11123*t15121;
  t15189 = t15185 + t15186 + t15187 + t15188;
  t15192 = -1.*t10904*t15184;
  t15194 = -1.*t10931*t15121;
  t15196 = t15192 + t15193 + t15194 + t15195;
  t15409 = -0.384*var2[4]*t15168;
  t15410 = 3.2*t11119*t10944;
  t15206 = -1.*t11049*t10816;
  t15207 = 0.24*t7785*t10816;
  t15208 = t15206 + t15207;
  t15202 = Power(t7785,2);
  t15203 = -0.24*t15202;
  t15204 = t11052 + t15203;
  t15411 = 3.2*t11099*t15168;
  t15414 = 6.4*t10944*t14991;
  t15415 = 6.4*t14980*t11684;
  t15416 = 6.4*t10944*t15157;
  t15417 = 6.4*t14980*t15168;
  t15212 = t15163 + t15164 + t15165 + t15166 + t15169 + t15172;
  t15421 = 3.2*t10944*t15123;
  t15218 = t15217*t10931;
  t15221 = t11123*t15220;
  t15222 = t15218 + t15186 + t15187 + t15221;
  t15423 = 3.2*t15127*t15168;
  t15224 = -1.*t10904*t15217;
  t15225 = -1.*t10931*t15220;
  t15226 = t15224 + t15193 + t15225 + t15195;
  t15374 = 0.748*t15032;
  t15387 = Power(t14375,2);
  t15388 = 13.6*t15387;
  t15252 = t15021 + t15033 + t15034 + t15035 + t15242 + t15243 + t15244 + t15245 + t15248 + t15251;
  t15402 = 6.8*t15032*t15133;
  t15264 = t15263*t12144;
  t15267 = t14913*t15141;
  t15268 = t15264 + t15265 + t15266 + t15267;
  t15271 = -1.*t12064*t15263;
  t15273 = -1.*t12144*t15141;
  t15275 = t15271 + t15272 + t15273 + t15274;
  t15442 = -0.384*var2[6]*t15247;
  t15443 = 3.2*t14898*t14041;
  t15285 = -1.*t14850*t12040;
  t15286 = 0.24*t11901*t12040;
  t15287 = t15285 + t15286;
  t15281 = Power(t11901,2);
  t15282 = -0.24*t15281;
  t15283 = t14858 + t15282;
  t15444 = 3.2*t14867*t15247;
  t15447 = 6.4*t14041*t15041;
  t15448 = 6.4*t15037*t14926;
  t15449 = 6.4*t14041*t15236;
  t15450 = 6.4*t15037*t15247;
  t15291 = t15242 + t15243 + t15244 + t15245 + t15248 + t15251;
  t15454 = 3.2*t14041*t15143;
  t15297 = t15296*t12144;
  t15300 = t14913*t15299;
  t15301 = t15297 + t15265 + t15266 + t15300;
  t15456 = 3.2*t15147*t15247;
  t15303 = -1.*t12064*t15296;
  t15304 = -1.*t12144*t15299;
  t15305 = t15303 + t15272 + t15304 + t15274;
  t15338 = -0.5*var2[2]*t15337;
  t10986 = -0.384*var2[4]*t10944;
  t11104 = 3.2*t11099*t10944;
  t11891 = 3.2*t11119*t11684;
  t11893 = t11000 + t11104 + t11891;
  t11895 = -0.5*var2[3]*t11893;
  t14327 = -0.384*var2[6]*t14041;
  t14868 = 3.2*t14867*t14041;
  t14932 = 3.2*t14898*t14926;
  t14933 = t14434 + t14868 + t14932;
  t14934 = -0.5*var2[5]*t14933;
  t15475 = 13.6*t14937*t10995;
  t15476 = 6.4*t10944*t14980;
  t15477 = 6.4*t14991*t11684;
  t15478 = 13.6*t15017*t14375;
  t15479 = 6.4*t14041*t15037;
  t15480 = 6.4*t15041*t14926;
  t15481 = t15311 + t15475 + t15476 + t15477 + t15315 + t15478 + t15479 + t15480;
  t15108 = -2.88*t10912;
  t15124 = 3.2*t11684*t15123;
  t15128 = 3.2*t10944*t15127;
  t15144 = 3.2*t14926*t15143;
  t15148 = 3.2*t14041*t15147;
  t15149 = t15108 + t15114 + t15124 + t15128 + t15134 + t15144 + t15148;
  t15398 = 2.88*t7110;
  t15400 = 3.2*t15011*t15123;
  t15401 = 3.2*t15008*t15127;
  t15403 = 3.2*t15057*t15143;
  t15404 = 3.2*t15047*t15147;
  t15405 = t15398 + t15399 + t15400 + t15401 + t15402 + t15403 + t15404;
  t15190 = 3.2*t14980*t15189;
  t15197 = 3.2*t14991*t15196;
  t15198 = t15114 + t15181 + t15190 + t15191 + t15197;
  t15422 = 3.2*t10944*t15189;
  t15424 = 3.2*t11684*t15196;
  t15425 = t15399 + t15421 + t15422 + t15423 + t15424;
  t15223 = 3.2*t14980*t15222;
  t15227 = 3.2*t14991*t15226;
  t15228 = t15181 + t15223 + t15191 + t15227;
  t15436 = 3.2*t10944*t15222;
  t15437 = 3.2*t11684*t15226;
  t15438 = t15421 + t15436 + t15423 + t15437;
  t15269 = 3.2*t15037*t15268;
  t15276 = 3.2*t15041*t15275;
  t15277 = t15134 + t15260 + t15269 + t15270 + t15276;
  t15455 = 3.2*t14041*t15268;
  t15457 = 3.2*t14926*t15275;
  t15458 = t15402 + t15454 + t15455 + t15456 + t15457;
  t15302 = 3.2*t15037*t15301;
  t15306 = 3.2*t15041*t15305;
  t15307 = t15260 + t15302 + t15270 + t15306;
  t15469 = 3.2*t14041*t15301;
  t15470 = 3.2*t14926*t15305;
  t15471 = t15454 + t15469 + t15456 + t15470;
  t15353 = -2.88*t7110;
  t15354 = 6.8*t14937*t15113;
  t15355 = 3.2*t14991*t15123;
  t15356 = 3.2*t14980*t15127;
  t15357 = 6.8*t15017*t15133;
  t15358 = 3.2*t15041*t15143;
  t15359 = 3.2*t15037*t15147;
  t15360 = t15353 + t15354 + t15355 + t15356 + t15357 + t15358 + t15359;
  t15150 = -0.5*var2[2]*t15149;
  t15369 = 3.2*t11119*t15011;
  t15370 = 3.2*t11099*t15008;
  t15371 = t15368 + t15369 + t15370;
  t15161 = t11000 + t15159 + t15160;
  t15412 = t15368 + t15410 + t15411;
  t15205 = 3.2*t15204*t14991;
  t15209 = 3.2*t15208*t14980;
  t15210 = t15205 + t15159 + t15209 + t15160;
  t15429 = 3.2*t15208*t10944;
  t15430 = 3.2*t15204*t11684;
  t15431 = t15410 + t15429 + t15430 + t15411;
  t15363 = -0.5*var2[2]*t15343;
  t15487 = -0.5*var2[2]*t11893;
  t15534 = -0.384*var2[0]*t15157;
  t15535 = -0.384*var2[1]*t15168;
  t15536 = t15534 + t15535;
  t15537 = var2[2]*t15536;
  t15364 = -0.384*var2[2]*t14980;
  t15488 = -0.384*var2[2]*t10944;
  t15375 = 3.2*t14898*t15057;
  t15376 = 3.2*t14867*t15047;
  t15377 = t15374 + t15375 + t15376;
  t15240 = t14434 + t15238 + t15239;
  t15445 = t15374 + t15443 + t15444;
  t15284 = 3.2*t15283*t15041;
  t15288 = 3.2*t15287*t15037;
  t15289 = t15284 + t15238 + t15288 + t15239;
  t15462 = 3.2*t15287*t14041;
  t15463 = 3.2*t15283*t14926;
  t15464 = t15443 + t15462 + t15463 + t15444;
  t15365 = -0.5*var2[2]*t15349;
  t15489 = -0.5*var2[2]*t14933;
  t15560 = -0.384*var2[0]*t15236;
  t15561 = -0.384*var2[1]*t15247;
  t15562 = t15560 + t15561;
  t15563 = var2[2]*t15562;
  t15366 = -0.384*var2[2]*t15037;
  t15490 = -0.384*var2[2]*t14041;
  p_output1[0]=(t10986 + t11895 + t14327 + t14934 + t15150 - 0.5*(6.4*t10944*t15005 + 6.4*t11684*t15013 + 6.4*t14041*t15044 + 6.4*t14926*t15070 + t15075 + t15076 + t15078 + t15079 + 6.4*t15081 + 6.4*t15083 + t15090 + t15096 + t15098 + t15099 + 6.4*t15101 + 6.4*t15103)*var2[0] - 0.5*t15072*var2[1])*var2[2];
  p_output1[1]=var2[2]*(t15158 - 0.5*(t15075 + t15076 + t15078 + t15079 + t15175 + t15176 + t15177 + t15178)*var2[0] - 0.5*t15173*var2[1] - 0.5*t15198*var2[2] - 0.5*t15161*var2[3]);
  p_output1[2]=var2[2]*(t15158 - 0.5*(t15175 + t15176 + t15177 + t15178)*var2[0] - 0.5*t15212*var2[1] - 0.5*t15228*var2[2] - 0.5*t15210*var2[3]);
  p_output1[3]=var2[2]*(t15237 - 0.5*(t15090 + t15096 + t15098 + t15099 + t15254 + t15255 + t15256 + t15257)*var2[0] - 0.5*t15252*var2[1] - 0.5*t15277*var2[2] - 0.5*t15240*var2[5]);
  p_output1[4]=var2[2]*(t15237 - 0.5*(t15254 + t15255 + t15256 + t15257)*var2[0] - 0.5*t15291*var2[1] - 0.5*t15307*var2[2] - 0.5*t15289*var2[5]);
  p_output1[5]=-0.5*t15319*var2[2];
  p_output1[6]=t15338;
  p_output1[7]=-0.5*t15319*var2[0] - 0.5*t15337*var2[1] - 1.*t15360*var2[2] - 0.5*t15343*var2[3] - 0.384*t14980*var2[4] - 0.5*t15349*var2[5] - 0.384*t15037*var2[6];
  p_output1[8]=t15363;
  p_output1[9]=t15364;
  p_output1[10]=t15365;
  p_output1[11]=t15366;
  p_output1[12]=var2[2]*(-0.5*t15072*var2[0] - 0.5*(6.4*Power(t10944,2) + 6.4*Power(t11684,2) + 6.4*Power(t14041,2) + 6.4*Power(t14926,2) + 6.4*t14980*t15008 + 6.4*t14991*t15011 + 6.4*t15037*t15047 + 6.4*t15041*t15057 + t15075 + t15076 + t15079 + t15090 + t15096 + t15099 + t15380 + t15388)*var2[1] - 0.5*t15405*var2[2] - 0.5*t15371*var2[3] - 0.384*t15008*var2[4] - 0.5*t15377*var2[5] - 0.384*t15047*var2[6]);
  p_output1[13]=var2[2]*(t15409 - 0.5*t15173*var2[0] - 0.5*(t15075 + t15076 + t15079 + t15380 + t15414 + t15415 + t15416 + t15417)*var2[1] - 0.5*t15425*var2[2] - 0.5*t15412*var2[3]);
  p_output1[14]=var2[2]*(t15409 - 0.5*t15212*var2[0] - 0.5*(t15414 + t15415 + t15416 + t15417)*var2[1] - 0.5*t15438*var2[2] - 0.5*t15431*var2[3]);
  p_output1[15]=var2[2]*(t15442 - 0.5*t15252*var2[0] - 0.5*(t15090 + t15096 + t15099 + t15388 + t15447 + t15448 + t15449 + t15450)*var2[1] - 0.5*t15458*var2[2] - 0.5*t15445*var2[5]);
  p_output1[16]=var2[2]*(t15442 - 0.5*t15291*var2[0] - 0.5*(t15447 + t15448 + t15449 + t15450)*var2[1] - 0.5*t15471*var2[2] - 0.5*t15464*var2[5]);
  p_output1[17]=t15338;
  p_output1[18]=-0.5*t15481*var2[2];
  p_output1[19]=t10986 + t11895 + t14327 + t14934 - 0.5*t15337*var2[0] - 0.5*t15481*var2[1] - 1.*t15149*var2[2];
  p_output1[20]=t15487;
  p_output1[21]=t15488;
  p_output1[22]=t15489;
  p_output1[23]=t15490;
  p_output1[24]=(-0.5*t15149*var2[0] - 0.5*t15405*var2[1])*var2[2];
  p_output1[25]=(-0.5*t15198*var2[0] - 0.5*t15425*var2[1])*var2[2];
  p_output1[26]=(-0.5*t15228*var2[0] - 0.5*t15438*var2[1])*var2[2];
  p_output1[27]=(-0.5*t15277*var2[0] - 0.5*t15458*var2[1])*var2[2];
  p_output1[28]=(-0.5*t15307*var2[0] - 0.5*t15471*var2[1])*var2[2];
  p_output1[29]=-0.5*t15360*var2[2];
  p_output1[30]=t15150;
  p_output1[31]=-0.5*t15360*var2[0] - 0.5*t15149*var2[1];
  p_output1[32]=(-0.5*t11893*var2[0] - 0.5*t15371*var2[1])*var2[2];
  p_output1[33]=(-0.5*t15161*var2[0] - 0.5*t15412*var2[1])*var2[2];
  p_output1[34]=(-0.5*t15210*var2[0] - 0.5*t15431*var2[1])*var2[2];
  p_output1[35]=t15363;
  p_output1[36]=t15487;
  p_output1[37]=-0.5*t15343*var2[0] - 0.5*t11893*var2[1];
  p_output1[38]=(-0.384*t10944*var2[0] - 0.384*t15008*var2[1])*var2[2];
  p_output1[39]=t15537;
  p_output1[40]=t15537;
  p_output1[41]=t15364;
  p_output1[42]=t15488;
  p_output1[43]=-0.384*t14980*var2[0] - 0.384*t10944*var2[1];
  p_output1[44]=(-0.5*t14933*var2[0] - 0.5*t15377*var2[1])*var2[2];
  p_output1[45]=(-0.5*t15240*var2[0] - 0.5*t15445*var2[1])*var2[2];
  p_output1[46]=(-0.5*t15289*var2[0] - 0.5*t15464*var2[1])*var2[2];
  p_output1[47]=t15365;
  p_output1[48]=t15489;
  p_output1[49]=-0.5*t15349*var2[0] - 0.5*t14933*var2[1];
  p_output1[50]=(-0.384*t14041*var2[0] - 0.384*t15047*var2[1])*var2[2];
  p_output1[51]=t15563;
  p_output1[52]=t15563;
  p_output1[53]=t15366;
  p_output1[54]=t15490;
  p_output1[55]=-0.384*t15037*var2[0] - 0.384*t14041*var2[1];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 56, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec3_five_link_walker.hh"

namespace DoubleSupportConstHeight
{

void J_Ce2_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
