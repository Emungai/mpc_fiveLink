/*
 * Automatically Generated from Mathematica.
 * Tue 12 Nov 2019 14:40:04 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4995;
  double t4958;
  double t4988;
  double t4996;
  double t5001;
  double t4957;
  double t4994;
  double t4997;
  double t4998;
  double t5000;
  double t5002;
  double t5005;
  double t5006;
  double t5007;
  double t5008;
  double t5097;
  double t5098;
  double t5100;
  double t5101;
  double t5103;
  double t5150;
  double t5147;
  double t5148;
  double t5151;
  double t5149;
  double t5152;
  double t5153;
  double t5154;
  double t5155;
  double t5156;
  double t5157;
  double t5158;
  double t5159;
  double t5165;
  double t5166;
  double t5167;
  double t5168;
  double t5169;
  double t5190;
  double t5191;
  double t5192;
  double t5187;
  double t5188;
  double t5189;
  double t5032;
  double t5033;
  double t5080;
  double t5194;
  double t5195;
  double t5196;
  double t5142;
  double t5133;
  double t5134;
  double t5135;
  double t5141;
  double t5143;
  double t5204;
  double t5210;
  double t5221;
  double t5222;
  double t5223;
  double t5218;
  double t5219;
  double t5220;
  double t5161;
  double t5162;
  double t5163;
  double t5225;
  double t5226;
  double t5227;
  double t5182;
  double t5178;
  double t5179;
  double t5180;
  double t5181;
  double t5183;
  double t5235;
  double t5241;
  double t5207;
  double t5208;
  double t5203;
  double t5205;
  double t5200;
  double t5201;
  double t5215;
  double t5216;
  double t5238;
  double t5239;
  double t5234;
  double t5236;
  double t5231;
  double t5232;
  double t5246;
  double t5247;
  double t5284;
  double t5285;
  double t5286;
  double t5288;
  double t5289;
  double t5290;
  double t5304;
  double t5305;
  double t5306;
  double t5308;
  double t5309;
  double t5310;
  double t5090;
  double t5130;
  double t5131;
  double t5132;
  double t5104;
  double t5123;
  double t5127;
  double t5128;
  double t5322;
  double t5323;
  double t5324;
  double t5325;
  double t5326;
  double t5193;
  double t5197;
  double t5198;
  double t5199;
  double t5209;
  double t5251;
  double t5252;
  double t5253;
  double t5254;
  double t5255;
  double t5256;
  double t5339;
  double t5340;
  double t5278;
  double t5279;
  double t5280;
  double t5281;
  double t5282;
  double t5283;
  double t5287;
  double t5291;
  double t5292;
  double t5294;
  double t5295;
  double t5296;
  double t5351;
  double t5352;
  double t5353;
  double t5327;
  double t5328;
  double t5329;
  double t5332;
  double t5333;
  double t5334;
  double t5335;
  double t5336;
  double t5337;
  double t5338;
  double t5341;
  double t5344;
  double t5345;
  double t5346;
  double t5347;
  double t5350;
  double t5355;
  double t5356;
  double t5360;
  double t5385;
  double t5386;
  double t5362;
  double t5388;
  double t5389;
  double t5364;
  double t5164;
  double t5175;
  double t5176;
  double t5177;
  double t5170;
  double t5171;
  double t5172;
  double t5173;
  double t5401;
  double t5402;
  double t5403;
  double t5404;
  double t5405;
  double t5224;
  double t5228;
  double t5229;
  double t5230;
  double t5240;
  double t5263;
  double t5264;
  double t5265;
  double t5266;
  double t5267;
  double t5268;
  double t5418;
  double t5419;
  double t5298;
  double t5299;
  double t5300;
  double t5301;
  double t5302;
  double t5303;
  double t5307;
  double t5311;
  double t5312;
  double t5314;
  double t5315;
  double t5316;
  double t5430;
  double t5431;
  double t5432;
  double t5406;
  double t5407;
  double t5408;
  double t5411;
  double t5412;
  double t5413;
  double t5414;
  double t5415;
  double t5416;
  double t5417;
  double t5420;
  double t5423;
  double t5424;
  double t5425;
  double t5426;
  double t5429;
  double t5434;
  double t5435;
  double t5439;
  double t5464;
  double t5465;
  double t5441;
  double t5467;
  double t5468;
  double t5443;
  double t5258;
  double t5260;
  double t5270;
  double t5272;
  double t5480;
  double t5481;
  double t5482;
  double t5483;
  double t5484;
  double t5485;
  double t5486;
  double t5487;
  double t5488;
  double t5490;
  double t5491;
  double t5492;
  double t5493;
  double t5494;
  double t5495;
  double t5496;
  double t5497;
  double t5498;
  double t5499;
  double t5500;
  double t5501;
  double t5502;
  double t5503;
  double t5504;
  double t5505;
  double t5506;
  double t5509;
  double t5510;
  double t5511;
  double t5512;
  double t5515;
  double t5516;
  double t5517;
  double t5518;
  double t5211;
  double t5213;
  double t5214;
  double t5242;
  double t5244;
  double t5245;
  double t5202;
  double t5206;
  double t5212;
  double t5217;
  double t5233;
  double t5237;
  double t5243;
  double t5248;
  double t5249;
  double t5537;
  double t5548;
  double t5549;
  double t5342;
  double t5568;
  double t5354;
  double t5357;
  double t5358;
  double t5361;
  double t5363;
  double t5365;
  double t5578;
  double t5579;
  double t5375;
  double t5376;
  double t5377;
  double t5371;
  double t5372;
  double t5373;
  double t5580;
  double t5583;
  double t5584;
  double t5585;
  double t5586;
  double t5381;
  double t5590;
  double t5387;
  double t5390;
  double t5391;
  double t5592;
  double t5393;
  double t5394;
  double t5395;
  double t5543;
  double t5556;
  double t5557;
  double t5421;
  double t5571;
  double t5433;
  double t5436;
  double t5437;
  double t5440;
  double t5442;
  double t5444;
  double t5611;
  double t5612;
  double t5454;
  double t5455;
  double t5456;
  double t5450;
  double t5451;
  double t5452;
  double t5613;
  double t5616;
  double t5617;
  double t5618;
  double t5619;
  double t5460;
  double t5623;
  double t5466;
  double t5469;
  double t5470;
  double t5625;
  double t5472;
  double t5473;
  double t5474;
  double t5507;
  double t5031;
  double t5129;
  double t5144;
  double t5145;
  double t5146;
  double t5160;
  double t5174;
  double t5184;
  double t5185;
  double t5186;
  double t5644;
  double t5645;
  double t5646;
  double t5647;
  double t5648;
  double t5649;
  double t5650;
  double t5277;
  double t5293;
  double t5297;
  double t5313;
  double t5317;
  double t5318;
  double t5567;
  double t5569;
  double t5570;
  double t5572;
  double t5573;
  double t5574;
  double t5359;
  double t5366;
  double t5367;
  double t5591;
  double t5593;
  double t5594;
  double t5392;
  double t5396;
  double t5397;
  double t5605;
  double t5606;
  double t5607;
  double t5438;
  double t5445;
  double t5446;
  double t5624;
  double t5626;
  double t5627;
  double t5471;
  double t5475;
  double t5476;
  double t5638;
  double t5639;
  double t5640;
  double t5522;
  double t5523;
  double t5524;
  double t5525;
  double t5526;
  double t5527;
  double t5528;
  double t5529;
  double t5319;
  double t5538;
  double t5539;
  double t5540;
  double t5330;
  double t5581;
  double t5374;
  double t5378;
  double t5379;
  double t5598;
  double t5599;
  double t5600;
  double t5532;
  double t5656;
  double t5703;
  double t5704;
  double t5705;
  double t5706;
  double t5533;
  double t5657;
  double t5544;
  double t5545;
  double t5546;
  double t5409;
  double t5614;
  double t5453;
  double t5457;
  double t5458;
  double t5631;
  double t5632;
  double t5633;
  double t5534;
  double t5658;
  double t5729;
  double t5730;
  double t5731;
  double t5732;
  double t5535;
  double t5659;
  t4995 = Cos(var1[3]);
  t4958 = Cos(var1[4]);
  t4988 = Sin(var1[3]);
  t4996 = Sin(var1[4]);
  t5001 = Cos(var1[2]);
  t4957 = Sin(var1[2]);
  t4994 = -1.*t4958*t4988;
  t4997 = -1.*t4995*t4996;
  t4998 = t4994 + t4997;
  t5000 = -1.*t4957*t4998;
  t5002 = t4995*t4958;
  t5005 = -1.*t4988*t4996;
  t5006 = t5002 + t5005;
  t5007 = -1.*t5001*t5006;
  t5008 = t5000 + t5007;
  t5097 = -1.*t4958;
  t5098 = 1. + t5097;
  t5100 = 0.4*t5098;
  t5101 = 0.64*t4958;
  t5103 = t5100 + t5101;
  t5150 = Cos(var1[5]);
  t5147 = Cos(var1[6]);
  t5148 = Sin(var1[5]);
  t5151 = Sin(var1[6]);
  t5149 = -1.*t5147*t5148;
  t5152 = -1.*t5150*t5151;
  t5153 = t5149 + t5152;
  t5154 = -1.*t4957*t5153;
  t5155 = t5150*t5147;
  t5156 = -1.*t5148*t5151;
  t5157 = t5155 + t5156;
  t5158 = -1.*t5001*t5157;
  t5159 = t5154 + t5158;
  t5165 = -1.*t5147;
  t5166 = 1. + t5165;
  t5167 = 0.4*t5166;
  t5168 = 0.64*t5147;
  t5169 = t5167 + t5168;
  t5190 = t5001*t4995;
  t5191 = -1.*t4957*t4988;
  t5192 = t5190 + t5191;
  t5187 = -1.*t4995*t4957;
  t5188 = -1.*t5001*t4988;
  t5189 = t5187 + t5188;
  t5032 = -1.*t5001*t4995;
  t5033 = t4957*t4988;
  t5080 = t5032 + t5033;
  t5194 = t4995*t4957;
  t5195 = t5001*t4988;
  t5196 = t5194 + t5195;
  t5142 = -1.*t4957*t5006;
  t5133 = t4958*t4988;
  t5134 = t4995*t4996;
  t5135 = t5133 + t5134;
  t5141 = -1.*t5001*t5135;
  t5143 = t5141 + t5142;
  t5204 = t5001*t5006;
  t5210 = t4957*t5006;
  t5221 = t5001*t5150;
  t5222 = -1.*t4957*t5148;
  t5223 = t5221 + t5222;
  t5218 = -1.*t5150*t4957;
  t5219 = -1.*t5001*t5148;
  t5220 = t5218 + t5219;
  t5161 = -1.*t5001*t5150;
  t5162 = t4957*t5148;
  t5163 = t5161 + t5162;
  t5225 = t5150*t4957;
  t5226 = t5001*t5148;
  t5227 = t5225 + t5226;
  t5182 = -1.*t4957*t5157;
  t5178 = t5147*t5148;
  t5179 = t5150*t5151;
  t5180 = t5178 + t5179;
  t5181 = -1.*t5001*t5180;
  t5183 = t5181 + t5182;
  t5235 = t5001*t5157;
  t5241 = t4957*t5157;
  t5207 = t4957*t4998;
  t5208 = t5207 + t5204;
  t5203 = -1.*t4957*t5135;
  t5205 = t5203 + t5204;
  t5200 = t5001*t4998;
  t5201 = t5200 + t5142;
  t5215 = t5001*t5135;
  t5216 = t5215 + t5210;
  t5238 = t4957*t5153;
  t5239 = t5238 + t5235;
  t5234 = -1.*t4957*t5180;
  t5236 = t5234 + t5235;
  t5231 = t5001*t5153;
  t5232 = t5231 + t5182;
  t5246 = t5001*t5180;
  t5247 = t5246 + t5241;
  t5284 = t5103*t4988;
  t5285 = 0.24*t4995*t4996;
  t5286 = t5284 + t5285;
  t5288 = t4995*t5103;
  t5289 = -0.24*t4988*t4996;
  t5290 = t5288 + t5289;
  t5304 = t5169*t5148;
  t5305 = 0.24*t5150*t5151;
  t5306 = t5304 + t5305;
  t5308 = t5150*t5169;
  t5309 = -0.24*t5148*t5151;
  t5310 = t5308 + t5309;
  t5090 = 0.748*t5080;
  t5130 = t5103*t4996;
  t5131 = -0.24*t4958*t4996;
  t5132 = t5130 + t5131;
  t5104 = t5103*t4958;
  t5123 = Power(t4996,2);
  t5127 = 0.24*t5123;
  t5128 = t5104 + t5127;
  t5322 = -1.*t4995*t4958;
  t5323 = t4988*t4996;
  t5324 = t5322 + t5323;
  t5325 = t5001*t5324;
  t5326 = t5000 + t5325;
  t5193 = 20.4*t5189*t5192;
  t5197 = 6.8*t5196*t5192;
  t5198 = 20.4*t5189*t5080;
  t5199 = 6.8*t5196*t5080;
  t5209 = -1.*t5001*t4998;
  t5251 = Power(t5189,2);
  t5252 = 13.6*t5251;
  t5253 = 13.6*t5189*t5196;
  t5254 = Power(t5192,2);
  t5255 = 13.6*t5254;
  t5256 = 13.6*t5192*t5080;
  t5339 = t4957*t5324;
  t5340 = t5200 + t5339;
  t5278 = Power(t4995,2);
  t5279 = 0.11*t5278;
  t5280 = Power(t4988,2);
  t5281 = 0.11*t5280;
  t5282 = t5279 + t5281;
  t5283 = 6.8*t5080*t5282;
  t5287 = -1.*t5286*t5006;
  t5291 = -1.*t4998*t5290;
  t5292 = t5287 + t5291;
  t5294 = t5286*t5135;
  t5295 = t5006*t5290;
  t5296 = t5294 + t5295;
  t5351 = -1.*t5103*t4988;
  t5352 = -0.24*t4995*t4996;
  t5353 = t5351 + t5352;
  t5327 = -0.384*var2[4]*t5326;
  t5328 = 3.2*t5132*t5201;
  t5329 = 3.2*t5128*t5326;
  t5332 = 6.4*t5205*t5201;
  t5333 = 3.2*t5208*t5143;
  t5334 = 3.2*t5008*t5216;
  t5335 = 6.4*t5201*t5326;
  t5336 = -1.*t4957*t5324;
  t5337 = t5209 + t5336;
  t5338 = 3.2*t5208*t5337;
  t5341 = 3.2*t5008*t5340;
  t5344 = 6.4*t5208*t5205;
  t5345 = 6.4*t5201*t5216;
  t5346 = 6.4*t5208*t5326;
  t5347 = 6.4*t5201*t5340;
  t5350 = 3.2*t5201*t5292;
  t5355 = t5286*t5006;
  t5356 = t4998*t5290;
  t5360 = 3.2*t5296*t5326;
  t5385 = -0.24*t4958*t4988;
  t5386 = t5385 + t5352;
  t5362 = -1.*t4998*t5286;
  t5388 = 0.24*t4995*t4958;
  t5389 = t5388 + t5289;
  t5364 = -1.*t5290*t5324;
  t5164 = 0.748*t5163;
  t5175 = t5169*t5151;
  t5176 = -0.24*t5147*t5151;
  t5177 = t5175 + t5176;
  t5170 = t5169*t5147;
  t5171 = Power(t5151,2);
  t5172 = 0.24*t5171;
  t5173 = t5170 + t5172;
  t5401 = -1.*t5150*t5147;
  t5402 = t5148*t5151;
  t5403 = t5401 + t5402;
  t5404 = t5001*t5403;
  t5405 = t5154 + t5404;
  t5224 = 20.4*t5220*t5223;
  t5228 = 6.8*t5227*t5223;
  t5229 = 20.4*t5220*t5163;
  t5230 = 6.8*t5227*t5163;
  t5240 = -1.*t5001*t5153;
  t5263 = Power(t5220,2);
  t5264 = 13.6*t5263;
  t5265 = 13.6*t5220*t5227;
  t5266 = Power(t5223,2);
  t5267 = 13.6*t5266;
  t5268 = 13.6*t5223*t5163;
  t5418 = t4957*t5403;
  t5419 = t5231 + t5418;
  t5298 = Power(t5150,2);
  t5299 = 0.11*t5298;
  t5300 = Power(t5148,2);
  t5301 = 0.11*t5300;
  t5302 = t5299 + t5301;
  t5303 = 6.8*t5163*t5302;
  t5307 = -1.*t5306*t5157;
  t5311 = -1.*t5153*t5310;
  t5312 = t5307 + t5311;
  t5314 = t5306*t5180;
  t5315 = t5157*t5310;
  t5316 = t5314 + t5315;
  t5430 = -1.*t5169*t5148;
  t5431 = -0.24*t5150*t5151;
  t5432 = t5430 + t5431;
  t5406 = -0.384*var2[6]*t5405;
  t5407 = 3.2*t5177*t5232;
  t5408 = 3.2*t5173*t5405;
  t5411 = 6.4*t5236*t5232;
  t5412 = 3.2*t5239*t5183;
  t5413 = 3.2*t5159*t5247;
  t5414 = 6.4*t5232*t5405;
  t5415 = -1.*t4957*t5403;
  t5416 = t5240 + t5415;
  t5417 = 3.2*t5239*t5416;
  t5420 = 3.2*t5159*t5419;
  t5423 = 6.4*t5239*t5236;
  t5424 = 6.4*t5232*t5247;
  t5425 = 6.4*t5239*t5405;
  t5426 = 6.4*t5232*t5419;
  t5429 = 3.2*t5232*t5312;
  t5434 = t5306*t5157;
  t5435 = t5153*t5310;
  t5439 = 3.2*t5316*t5405;
  t5464 = -0.24*t5147*t5148;
  t5465 = t5464 + t5431;
  t5441 = -1.*t5153*t5306;
  t5467 = 0.24*t5150*t5147;
  t5468 = t5467 + t5309;
  t5443 = -1.*t5310*t5403;
  t5258 = Power(t5205,2);
  t5260 = Power(t5201,2);
  t5270 = Power(t5236,2);
  t5272 = Power(t5232,2);
  t5480 = 13.6*t5189*t5192;
  t5481 = 13.6*t5196*t5192;
  t5482 = 6.4*t5208*t5201;
  t5483 = 6.4*t5205*t5216;
  t5484 = 13.6*t5220*t5223;
  t5485 = 13.6*t5227*t5223;
  t5486 = 6.4*t5239*t5232;
  t5487 = 6.4*t5236*t5247;
  t5488 = t5480 + t5481 + t5482 + t5483 + t5484 + t5485 + t5486 + t5487;
  t5490 = 6.8*t5251;
  t5491 = 6.8*t5189*t5196;
  t5492 = 6.8*t5254;
  t5493 = 6.8*t5192*t5080;
  t5494 = 3.2*t5008*t5208;
  t5495 = 3.2*t5258;
  t5496 = 3.2*t5260;
  t5497 = 3.2*t5143*t5216;
  t5498 = 6.8*t5263;
  t5499 = 6.8*t5220*t5227;
  t5500 = 6.8*t5266;
  t5501 = 6.8*t5223*t5163;
  t5502 = 3.2*t5159*t5239;
  t5503 = 3.2*t5270;
  t5504 = 3.2*t5272;
  t5505 = 3.2*t5183*t5247;
  t5506 = t5490 + t5491 + t5492 + t5493 + t5494 + t5495 + t5496 + t5497 + t5498 + t5499 + t5500 + t5501 + t5502 + t5503 + t5504 + t5505;
  t5509 = 0.748*t5189;
  t5510 = 3.2*t5132*t5205;
  t5511 = 3.2*t5128*t5201;
  t5512 = t5509 + t5510 + t5511;
  t5515 = 0.748*t5220;
  t5516 = 3.2*t5177*t5236;
  t5517 = 3.2*t5173*t5232;
  t5518 = t5515 + t5516 + t5517;
  t5211 = t5209 + t5210;
  t5213 = t4957*t5135;
  t5214 = t5213 + t5007;
  t5242 = t5240 + t5241;
  t5244 = t4957*t5180;
  t5245 = t5244 + t5158;
  t5202 = 9.6*t5008*t5201;
  t5206 = 9.6*t5205*t5143;
  t5212 = 3.2*t5208*t5211;
  t5217 = 3.2*t5214*t5216;
  t5233 = 9.6*t5159*t5232;
  t5237 = 9.6*t5236*t5183;
  t5243 = 3.2*t5239*t5242;
  t5248 = 3.2*t5245*t5247;
  t5249 = t5193 + t5197 + t5198 + t5199 + t5202 + t5206 + t5212 + t5217 + t5224 + t5228 + t5229 + t5230 + t5233 + t5237 + t5243 + t5248;
  t5537 = 0.748*t5196;
  t5548 = Power(t5080,2);
  t5549 = 13.6*t5548;
  t5342 = t5193 + t5197 + t5198 + t5199 + t5332 + t5333 + t5334 + t5335 + t5338 + t5341;
  t5568 = 6.8*t5196*t5282;
  t5354 = t5353*t5006;
  t5357 = t5135*t5290;
  t5358 = t5354 + t5355 + t5356 + t5357;
  t5361 = -1.*t4998*t5353;
  t5363 = -1.*t5006*t5290;
  t5365 = t5361 + t5362 + t5363 + t5364;
  t5578 = -0.384*var2[4]*t5337;
  t5579 = 3.2*t5132*t5008;
  t5375 = -1.*t5103*t4996;
  t5376 = 0.24*t4958*t4996;
  t5377 = t5375 + t5376;
  t5371 = Power(t4958,2);
  t5372 = -0.24*t5371;
  t5373 = t5104 + t5372;
  t5580 = 3.2*t5128*t5337;
  t5583 = 6.4*t5008*t5205;
  t5584 = 6.4*t5201*t5143;
  t5585 = 6.4*t5008*t5326;
  t5586 = 6.4*t5201*t5337;
  t5381 = t5332 + t5333 + t5334 + t5335 + t5338 + t5341;
  t5590 = 3.2*t5008*t5292;
  t5387 = t5386*t5006;
  t5390 = t5135*t5389;
  t5391 = t5387 + t5355 + t5356 + t5390;
  t5592 = 3.2*t5296*t5337;
  t5393 = -1.*t4998*t5386;
  t5394 = -1.*t5006*t5389;
  t5395 = t5393 + t5362 + t5394 + t5364;
  t5543 = 0.748*t5227;
  t5556 = Power(t5163,2);
  t5557 = 13.6*t5556;
  t5421 = t5224 + t5228 + t5229 + t5230 + t5411 + t5412 + t5413 + t5414 + t5417 + t5420;
  t5571 = 6.8*t5227*t5302;
  t5433 = t5432*t5157;
  t5436 = t5180*t5310;
  t5437 = t5433 + t5434 + t5435 + t5436;
  t5440 = -1.*t5153*t5432;
  t5442 = -1.*t5157*t5310;
  t5444 = t5440 + t5441 + t5442 + t5443;
  t5611 = -0.384*var2[6]*t5416;
  t5612 = 3.2*t5177*t5159;
  t5454 = -1.*t5169*t5151;
  t5455 = 0.24*t5147*t5151;
  t5456 = t5454 + t5455;
  t5450 = Power(t5147,2);
  t5451 = -0.24*t5450;
  t5452 = t5170 + t5451;
  t5613 = 3.2*t5173*t5416;
  t5616 = 6.4*t5159*t5236;
  t5617 = 6.4*t5232*t5183;
  t5618 = 6.4*t5159*t5405;
  t5619 = 6.4*t5232*t5416;
  t5460 = t5411 + t5412 + t5413 + t5414 + t5417 + t5420;
  t5623 = 3.2*t5159*t5312;
  t5466 = t5465*t5157;
  t5469 = t5180*t5468;
  t5470 = t5466 + t5434 + t5435 + t5469;
  t5625 = 3.2*t5316*t5416;
  t5472 = -1.*t5153*t5465;
  t5473 = -1.*t5157*t5468;
  t5474 = t5472 + t5441 + t5473 + t5443;
  t5507 = -0.5*var2[2]*t5506;
  t5031 = -0.384*var2[4]*t5008;
  t5129 = 3.2*t5128*t5008;
  t5144 = 3.2*t5132*t5143;
  t5145 = t5090 + t5129 + t5144;
  t5146 = -0.5*var2[3]*t5145;
  t5160 = -0.384*var2[6]*t5159;
  t5174 = 3.2*t5173*t5159;
  t5184 = 3.2*t5177*t5183;
  t5185 = t5164 + t5174 + t5184;
  t5186 = -0.5*var2[5]*t5185;
  t5644 = 13.6*t5189*t5080;
  t5645 = 6.4*t5008*t5201;
  t5646 = 6.4*t5205*t5143;
  t5647 = 13.6*t5220*t5163;
  t5648 = 6.4*t5159*t5232;
  t5649 = 6.4*t5236*t5183;
  t5650 = t5480 + t5644 + t5645 + t5646 + t5484 + t5647 + t5648 + t5649;
  t5277 = -2.88*t5001;
  t5293 = 3.2*t5143*t5292;
  t5297 = 3.2*t5008*t5296;
  t5313 = 3.2*t5183*t5312;
  t5317 = 3.2*t5159*t5316;
  t5318 = t5277 + t5283 + t5293 + t5297 + t5303 + t5313 + t5317;
  t5567 = 2.88*t4957;
  t5569 = 3.2*t5214*t5292;
  t5570 = 3.2*t5211*t5296;
  t5572 = 3.2*t5245*t5312;
  t5573 = 3.2*t5242*t5316;
  t5574 = t5567 + t5568 + t5569 + t5570 + t5571 + t5572 + t5573;
  t5359 = 3.2*t5201*t5358;
  t5366 = 3.2*t5205*t5365;
  t5367 = t5283 + t5350 + t5359 + t5360 + t5366;
  t5591 = 3.2*t5008*t5358;
  t5593 = 3.2*t5143*t5365;
  t5594 = t5568 + t5590 + t5591 + t5592 + t5593;
  t5392 = 3.2*t5201*t5391;
  t5396 = 3.2*t5205*t5395;
  t5397 = t5350 + t5392 + t5360 + t5396;
  t5605 = 3.2*t5008*t5391;
  t5606 = 3.2*t5143*t5395;
  t5607 = t5590 + t5605 + t5592 + t5606;
  t5438 = 3.2*t5232*t5437;
  t5445 = 3.2*t5236*t5444;
  t5446 = t5303 + t5429 + t5438 + t5439 + t5445;
  t5624 = 3.2*t5159*t5437;
  t5626 = 3.2*t5183*t5444;
  t5627 = t5571 + t5623 + t5624 + t5625 + t5626;
  t5471 = 3.2*t5232*t5470;
  t5475 = 3.2*t5236*t5474;
  t5476 = t5429 + t5471 + t5439 + t5475;
  t5638 = 3.2*t5159*t5470;
  t5639 = 3.2*t5183*t5474;
  t5640 = t5623 + t5638 + t5625 + t5639;
  t5522 = -2.88*t4957;
  t5523 = 6.8*t5189*t5282;
  t5524 = 3.2*t5205*t5292;
  t5525 = 3.2*t5201*t5296;
  t5526 = 6.8*t5220*t5302;
  t5527 = 3.2*t5236*t5312;
  t5528 = 3.2*t5232*t5316;
  t5529 = t5522 + t5523 + t5524 + t5525 + t5526 + t5527 + t5528;
  t5319 = -0.5*var2[2]*t5318;
  t5538 = 3.2*t5132*t5214;
  t5539 = 3.2*t5128*t5211;
  t5540 = t5537 + t5538 + t5539;
  t5330 = t5090 + t5328 + t5329;
  t5581 = t5537 + t5579 + t5580;
  t5374 = 3.2*t5373*t5205;
  t5378 = 3.2*t5377*t5201;
  t5379 = t5374 + t5328 + t5378 + t5329;
  t5598 = 3.2*t5377*t5008;
  t5599 = 3.2*t5373*t5143;
  t5600 = t5579 + t5598 + t5599 + t5580;
  t5532 = -0.5*var2[2]*t5512;
  t5656 = -0.5*var2[2]*t5145;
  t5703 = -0.384*var2[0]*t5326;
  t5704 = -0.384*var2[1]*t5337;
  t5705 = t5703 + t5704;
  t5706 = var2[2]*t5705;
  t5533 = -0.384*var2[2]*t5201;
  t5657 = -0.384*var2[2]*t5008;
  t5544 = 3.2*t5177*t5245;
  t5545 = 3.2*t5173*t5242;
  t5546 = t5543 + t5544 + t5545;
  t5409 = t5164 + t5407 + t5408;
  t5614 = t5543 + t5612 + t5613;
  t5453 = 3.2*t5452*t5236;
  t5457 = 3.2*t5456*t5232;
  t5458 = t5453 + t5407 + t5457 + t5408;
  t5631 = 3.2*t5456*t5159;
  t5632 = 3.2*t5452*t5183;
  t5633 = t5612 + t5631 + t5632 + t5613;
  t5534 = -0.5*var2[2]*t5518;
  t5658 = -0.5*var2[2]*t5185;
  t5729 = -0.384*var2[0]*t5405;
  t5730 = -0.384*var2[1]*t5416;
  t5731 = t5729 + t5730;
  t5732 = var2[2]*t5731;
  t5535 = -0.384*var2[2]*t5232;
  t5659 = -0.384*var2[2]*t5159;
  p_output1[0]=(t5031 + t5146 + t5160 + t5186 + t5319 - 0.5*(6.4*t5008*t5208 + 6.4*t5143*t5216 + 6.4*t5159*t5239 + 6.4*t5183*t5247 + t5252 + t5253 + t5255 + t5256 + 6.4*t5258 + 6.4*t5260 + t5264 + t5265 + t5267 + t5268 + 6.4*t5270 + 6.4*t5272)*var2[0] - 0.5*t5249*var2[1])*var2[2];
  p_output1[1]=var2[2]*(t5327 - 0.5*(t5252 + t5253 + t5255 + t5256 + t5344 + t5345 + t5346 + t5347)*var2[0] - 0.5*t5342*var2[1] - 0.5*t5367*var2[2] - 0.5*t5330*var2[3]);
  p_output1[2]=var2[2]*(t5327 - 0.5*(t5344 + t5345 + t5346 + t5347)*var2[0] - 0.5*t5381*var2[1] - 0.5*t5397*var2[2] - 0.5*t5379*var2[3]);
  p_output1[3]=var2[2]*(t5406 - 0.5*(t5264 + t5265 + t5267 + t5268 + t5423 + t5424 + t5425 + t5426)*var2[0] - 0.5*t5421*var2[1] - 0.5*t5446*var2[2] - 0.5*t5409*var2[5]);
  p_output1[4]=var2[2]*(t5406 - 0.5*(t5423 + t5424 + t5425 + t5426)*var2[0] - 0.5*t5460*var2[1] - 0.5*t5476*var2[2] - 0.5*t5458*var2[5]);
  p_output1[5]=-0.5*t5488*var2[2];
  p_output1[6]=t5507;
  p_output1[7]=-0.5*t5488*var2[0] - 0.5*t5506*var2[1] - 1.*t5529*var2[2] - 0.5*t5512*var2[3] - 0.384*t5201*var2[4] - 0.5*t5518*var2[5] - 0.384*t5232*var2[6];
  p_output1[8]=t5532;
  p_output1[9]=t5533;
  p_output1[10]=t5534;
  p_output1[11]=t5535;
  p_output1[12]=var2[2]*(-0.5*t5249*var2[0] - 0.5*(6.4*Power(t5008,2) + 6.4*Power(t5143,2) + 6.4*Power(t5159,2) + 6.4*Power(t5183,2) + 6.4*t5201*t5211 + 6.4*t5205*t5214 + 6.4*t5232*t5242 + 6.4*t5236*t5245 + t5252 + t5253 + t5256 + t5264 + t5265 + t5268 + t5549 + t5557)*var2[1] - 0.5*t5574*var2[2] - 0.5*t5540*var2[3] - 0.384*t5211*var2[4] - 0.5*t5546*var2[5] - 0.384*t5242*var2[6]);
  p_output1[13]=var2[2]*(t5578 - 0.5*t5342*var2[0] - 0.5*(t5252 + t5253 + t5256 + t5549 + t5583 + t5584 + t5585 + t5586)*var2[1] - 0.5*t5594*var2[2] - 0.5*t5581*var2[3]);
  p_output1[14]=var2[2]*(t5578 - 0.5*t5381*var2[0] - 0.5*(t5583 + t5584 + t5585 + t5586)*var2[1] - 0.5*t5607*var2[2] - 0.5*t5600*var2[3]);
  p_output1[15]=var2[2]*(t5611 - 0.5*t5421*var2[0] - 0.5*(t5264 + t5265 + t5268 + t5557 + t5616 + t5617 + t5618 + t5619)*var2[1] - 0.5*t5627*var2[2] - 0.5*t5614*var2[5]);
  p_output1[16]=var2[2]*(t5611 - 0.5*t5460*var2[0] - 0.5*(t5616 + t5617 + t5618 + t5619)*var2[1] - 0.5*t5640*var2[2] - 0.5*t5633*var2[5]);
  p_output1[17]=t5507;
  p_output1[18]=-0.5*t5650*var2[2];
  p_output1[19]=t5031 + t5146 + t5160 + t5186 - 0.5*t5506*var2[0] - 0.5*t5650*var2[1] - 1.*t5318*var2[2];
  p_output1[20]=t5656;
  p_output1[21]=t5657;
  p_output1[22]=t5658;
  p_output1[23]=t5659;
  p_output1[24]=(-0.5*t5318*var2[0] - 0.5*t5574*var2[1])*var2[2];
  p_output1[25]=(-0.5*t5367*var2[0] - 0.5*t5594*var2[1])*var2[2];
  p_output1[26]=(-0.5*t5397*var2[0] - 0.5*t5607*var2[1])*var2[2];
  p_output1[27]=(-0.5*t5446*var2[0] - 0.5*t5627*var2[1])*var2[2];
  p_output1[28]=(-0.5*t5476*var2[0] - 0.5*t5640*var2[1])*var2[2];
  p_output1[29]=-0.5*t5529*var2[2];
  p_output1[30]=t5319;
  p_output1[31]=-0.5*t5529*var2[0] - 0.5*t5318*var2[1];
  p_output1[32]=(-0.5*t5145*var2[0] - 0.5*t5540*var2[1])*var2[2];
  p_output1[33]=(-0.5*t5330*var2[0] - 0.5*t5581*var2[1])*var2[2];
  p_output1[34]=(-0.5*t5379*var2[0] - 0.5*t5600*var2[1])*var2[2];
  p_output1[35]=t5532;
  p_output1[36]=t5656;
  p_output1[37]=-0.5*t5512*var2[0] - 0.5*t5145*var2[1];
  p_output1[38]=(-0.384*t5008*var2[0] - 0.384*t5211*var2[1])*var2[2];
  p_output1[39]=t5706;
  p_output1[40]=t5706;
  p_output1[41]=t5533;
  p_output1[42]=t5657;
  p_output1[43]=-0.384*t5201*var2[0] - 0.384*t5008*var2[1];
  p_output1[44]=(-0.5*t5185*var2[0] - 0.5*t5546*var2[1])*var2[2];
  p_output1[45]=(-0.5*t5409*var2[0] - 0.5*t5614*var2[1])*var2[2];
  p_output1[46]=(-0.5*t5458*var2[0] - 0.5*t5633*var2[1])*var2[2];
  p_output1[47]=t5534;
  p_output1[48]=t5658;
  p_output1[49]=-0.5*t5518*var2[0] - 0.5*t5185*var2[1];
  p_output1[50]=(-0.384*t5159*var2[0] - 0.384*t5242*var2[1])*var2[2];
  p_output1[51]=t5732;
  p_output1[52]=t5732;
  p_output1[53]=t5535;
  p_output1[54]=t5659;
  p_output1[55]=-0.384*t5232*var2[0] - 0.384*t5159*var2[1];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 56, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec3_five_link_walker.hh"

namespace Pattern[DS1, Blank[opt]]
{

void J_Ce2_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
