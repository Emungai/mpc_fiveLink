/*
 * Automatically Generated from Mathematica.
 * Tue 19 Nov 2019 20:20:46 GMT-05:00
 */

#ifdef MATLAB_MEX_FILE
#include <stdexcept>
#include <cmath>
/**
 * Copied from Wolfram Mathematica C Definitions file mdefs.hpp
 * Changed marcos to inline functions (Eric Cousineau)
 */
inline double Power(double x, double y) { return pow(x, y); }
inline double Sqrt(double x) { return sqrt(x); }

inline double Abs(double x) { return fabs(x); }

inline double Exp(double x) { return exp(x); }
inline double Log(double x) { return log(x); }

inline double Sin(double x) { return sin(x); }
inline double Cos(double x) { return cos(x); }
inline double Tan(double x) { return tan(x); }

inline double ArcSin(double x) { return asin(x); }
inline double ArcCos(double x) { return acos(x); }
inline double ArcTan(double x) { return atan(x); }

/* update ArcTan function to use atan2 instead. */
inline double ArcTan(double x, double y) { return atan2(y,x); }

inline double Sinh(double x) { return sinh(x); }
inline double Cosh(double x) { return cosh(x); }
inline double Tanh(double x) { return tanh(x); }

const double E	= 2.71828182845904523536029;
const double Pi = 3.14159265358979323846264;
const double Degree = 0.01745329251994329576924;


#endif

/*
 * Sub functions
 */
static void output1(double *p_output1,const double *var1,const double *var2)
{
  double t4959;
  double t4922;
  double t4952;
  double t4960;
  double t4965;
  double t4921;
  double t4958;
  double t4961;
  double t4962;
  double t4964;
  double t4966;
  double t4969;
  double t4970;
  double t4971;
  double t4972;
  double t5061;
  double t5062;
  double t5064;
  double t5065;
  double t5067;
  double t5114;
  double t5111;
  double t5112;
  double t5115;
  double t5113;
  double t5116;
  double t5117;
  double t5118;
  double t5119;
  double t5120;
  double t5121;
  double t5122;
  double t5123;
  double t5129;
  double t5130;
  double t5131;
  double t5132;
  double t5133;
  double t5154;
  double t5155;
  double t5156;
  double t5151;
  double t5152;
  double t5153;
  double t4996;
  double t4997;
  double t5044;
  double t5158;
  double t5159;
  double t5160;
  double t5106;
  double t5097;
  double t5098;
  double t5099;
  double t5105;
  double t5107;
  double t5168;
  double t5174;
  double t5185;
  double t5186;
  double t5187;
  double t5182;
  double t5183;
  double t5184;
  double t5125;
  double t5126;
  double t5127;
  double t5189;
  double t5190;
  double t5191;
  double t5146;
  double t5142;
  double t5143;
  double t5144;
  double t5145;
  double t5147;
  double t5199;
  double t5205;
  double t5171;
  double t5172;
  double t5167;
  double t5169;
  double t5164;
  double t5165;
  double t5179;
  double t5180;
  double t5202;
  double t5203;
  double t5198;
  double t5200;
  double t5195;
  double t5196;
  double t5210;
  double t5211;
  double t5248;
  double t5249;
  double t5250;
  double t5252;
  double t5253;
  double t5254;
  double t5268;
  double t5269;
  double t5270;
  double t5272;
  double t5273;
  double t5274;
  double t5054;
  double t5094;
  double t5095;
  double t5096;
  double t5068;
  double t5087;
  double t5091;
  double t5092;
  double t5286;
  double t5287;
  double t5288;
  double t5289;
  double t5290;
  double t5157;
  double t5161;
  double t5162;
  double t5163;
  double t5173;
  double t5215;
  double t5216;
  double t5217;
  double t5218;
  double t5219;
  double t5220;
  double t5303;
  double t5304;
  double t5242;
  double t5243;
  double t5244;
  double t5245;
  double t5246;
  double t5247;
  double t5251;
  double t5255;
  double t5256;
  double t5258;
  double t5259;
  double t5260;
  double t5315;
  double t5316;
  double t5317;
  double t5291;
  double t5292;
  double t5293;
  double t5296;
  double t5297;
  double t5298;
  double t5299;
  double t5300;
  double t5301;
  double t5302;
  double t5305;
  double t5308;
  double t5309;
  double t5310;
  double t5311;
  double t5314;
  double t5319;
  double t5320;
  double t5324;
  double t5349;
  double t5350;
  double t5326;
  double t5352;
  double t5353;
  double t5328;
  double t5128;
  double t5139;
  double t5140;
  double t5141;
  double t5134;
  double t5135;
  double t5136;
  double t5137;
  double t5365;
  double t5366;
  double t5367;
  double t5368;
  double t5369;
  double t5188;
  double t5192;
  double t5193;
  double t5194;
  double t5204;
  double t5227;
  double t5228;
  double t5229;
  double t5230;
  double t5231;
  double t5232;
  double t5382;
  double t5383;
  double t5262;
  double t5263;
  double t5264;
  double t5265;
  double t5266;
  double t5267;
  double t5271;
  double t5275;
  double t5276;
  double t5278;
  double t5279;
  double t5280;
  double t5394;
  double t5395;
  double t5396;
  double t5370;
  double t5371;
  double t5372;
  double t5375;
  double t5376;
  double t5377;
  double t5378;
  double t5379;
  double t5380;
  double t5381;
  double t5384;
  double t5387;
  double t5388;
  double t5389;
  double t5390;
  double t5393;
  double t5398;
  double t5399;
  double t5403;
  double t5428;
  double t5429;
  double t5405;
  double t5431;
  double t5432;
  double t5407;
  double t5222;
  double t5224;
  double t5234;
  double t5236;
  double t5444;
  double t5445;
  double t5446;
  double t5447;
  double t5448;
  double t5449;
  double t5450;
  double t5451;
  double t5452;
  double t5454;
  double t5455;
  double t5456;
  double t5457;
  double t5458;
  double t5459;
  double t5460;
  double t5461;
  double t5462;
  double t5463;
  double t5464;
  double t5465;
  double t5466;
  double t5467;
  double t5468;
  double t5469;
  double t5470;
  double t5473;
  double t5474;
  double t5475;
  double t5476;
  double t5479;
  double t5480;
  double t5481;
  double t5482;
  double t5175;
  double t5177;
  double t5178;
  double t5206;
  double t5208;
  double t5209;
  double t5166;
  double t5170;
  double t5176;
  double t5181;
  double t5197;
  double t5201;
  double t5207;
  double t5212;
  double t5213;
  double t5501;
  double t5512;
  double t5513;
  double t5306;
  double t5532;
  double t5318;
  double t5321;
  double t5322;
  double t5325;
  double t5327;
  double t5329;
  double t5542;
  double t5543;
  double t5339;
  double t5340;
  double t5341;
  double t5335;
  double t5336;
  double t5337;
  double t5544;
  double t5547;
  double t5548;
  double t5549;
  double t5550;
  double t5345;
  double t5554;
  double t5351;
  double t5354;
  double t5355;
  double t5556;
  double t5357;
  double t5358;
  double t5359;
  double t5507;
  double t5520;
  double t5521;
  double t5385;
  double t5535;
  double t5397;
  double t5400;
  double t5401;
  double t5404;
  double t5406;
  double t5408;
  double t5575;
  double t5576;
  double t5418;
  double t5419;
  double t5420;
  double t5414;
  double t5415;
  double t5416;
  double t5577;
  double t5580;
  double t5581;
  double t5582;
  double t5583;
  double t5424;
  double t5587;
  double t5430;
  double t5433;
  double t5434;
  double t5589;
  double t5436;
  double t5437;
  double t5438;
  double t5471;
  double t4995;
  double t5093;
  double t5108;
  double t5109;
  double t5110;
  double t5124;
  double t5138;
  double t5148;
  double t5149;
  double t5150;
  double t5608;
  double t5609;
  double t5610;
  double t5611;
  double t5612;
  double t5613;
  double t5614;
  double t5241;
  double t5257;
  double t5261;
  double t5277;
  double t5281;
  double t5282;
  double t5531;
  double t5533;
  double t5534;
  double t5536;
  double t5537;
  double t5538;
  double t5323;
  double t5330;
  double t5331;
  double t5555;
  double t5557;
  double t5558;
  double t5356;
  double t5360;
  double t5361;
  double t5569;
  double t5570;
  double t5571;
  double t5402;
  double t5409;
  double t5410;
  double t5588;
  double t5590;
  double t5591;
  double t5435;
  double t5439;
  double t5440;
  double t5602;
  double t5603;
  double t5604;
  double t5486;
  double t5487;
  double t5488;
  double t5489;
  double t5490;
  double t5491;
  double t5492;
  double t5493;
  double t5283;
  double t5502;
  double t5503;
  double t5504;
  double t5294;
  double t5545;
  double t5338;
  double t5342;
  double t5343;
  double t5562;
  double t5563;
  double t5564;
  double t5496;
  double t5620;
  double t5667;
  double t5668;
  double t5669;
  double t5670;
  double t5497;
  double t5621;
  double t5508;
  double t5509;
  double t5510;
  double t5373;
  double t5578;
  double t5417;
  double t5421;
  double t5422;
  double t5595;
  double t5596;
  double t5597;
  double t5498;
  double t5622;
  double t5693;
  double t5694;
  double t5695;
  double t5696;
  double t5499;
  double t5623;
  t4959 = Cos(var1[3]);
  t4922 = Cos(var1[4]);
  t4952 = Sin(var1[3]);
  t4960 = Sin(var1[4]);
  t4965 = Cos(var1[2]);
  t4921 = Sin(var1[2]);
  t4958 = -1.*t4922*t4952;
  t4961 = -1.*t4959*t4960;
  t4962 = t4958 + t4961;
  t4964 = -1.*t4921*t4962;
  t4966 = t4959*t4922;
  t4969 = -1.*t4952*t4960;
  t4970 = t4966 + t4969;
  t4971 = -1.*t4965*t4970;
  t4972 = t4964 + t4971;
  t5061 = -1.*t4922;
  t5062 = 1. + t5061;
  t5064 = 0.4*t5062;
  t5065 = 0.64*t4922;
  t5067 = t5064 + t5065;
  t5114 = Cos(var1[5]);
  t5111 = Cos(var1[6]);
  t5112 = Sin(var1[5]);
  t5115 = Sin(var1[6]);
  t5113 = -1.*t5111*t5112;
  t5116 = -1.*t5114*t5115;
  t5117 = t5113 + t5116;
  t5118 = -1.*t4921*t5117;
  t5119 = t5114*t5111;
  t5120 = -1.*t5112*t5115;
  t5121 = t5119 + t5120;
  t5122 = -1.*t4965*t5121;
  t5123 = t5118 + t5122;
  t5129 = -1.*t5111;
  t5130 = 1. + t5129;
  t5131 = 0.4*t5130;
  t5132 = 0.64*t5111;
  t5133 = t5131 + t5132;
  t5154 = t4965*t4959;
  t5155 = -1.*t4921*t4952;
  t5156 = t5154 + t5155;
  t5151 = -1.*t4959*t4921;
  t5152 = -1.*t4965*t4952;
  t5153 = t5151 + t5152;
  t4996 = -1.*t4965*t4959;
  t4997 = t4921*t4952;
  t5044 = t4996 + t4997;
  t5158 = t4959*t4921;
  t5159 = t4965*t4952;
  t5160 = t5158 + t5159;
  t5106 = -1.*t4921*t4970;
  t5097 = t4922*t4952;
  t5098 = t4959*t4960;
  t5099 = t5097 + t5098;
  t5105 = -1.*t4965*t5099;
  t5107 = t5105 + t5106;
  t5168 = t4965*t4970;
  t5174 = t4921*t4970;
  t5185 = t4965*t5114;
  t5186 = -1.*t4921*t5112;
  t5187 = t5185 + t5186;
  t5182 = -1.*t5114*t4921;
  t5183 = -1.*t4965*t5112;
  t5184 = t5182 + t5183;
  t5125 = -1.*t4965*t5114;
  t5126 = t4921*t5112;
  t5127 = t5125 + t5126;
  t5189 = t5114*t4921;
  t5190 = t4965*t5112;
  t5191 = t5189 + t5190;
  t5146 = -1.*t4921*t5121;
  t5142 = t5111*t5112;
  t5143 = t5114*t5115;
  t5144 = t5142 + t5143;
  t5145 = -1.*t4965*t5144;
  t5147 = t5145 + t5146;
  t5199 = t4965*t5121;
  t5205 = t4921*t5121;
  t5171 = t4921*t4962;
  t5172 = t5171 + t5168;
  t5167 = -1.*t4921*t5099;
  t5169 = t5167 + t5168;
  t5164 = t4965*t4962;
  t5165 = t5164 + t5106;
  t5179 = t4965*t5099;
  t5180 = t5179 + t5174;
  t5202 = t4921*t5117;
  t5203 = t5202 + t5199;
  t5198 = -1.*t4921*t5144;
  t5200 = t5198 + t5199;
  t5195 = t4965*t5117;
  t5196 = t5195 + t5146;
  t5210 = t4965*t5144;
  t5211 = t5210 + t5205;
  t5248 = t5067*t4952;
  t5249 = 0.24*t4959*t4960;
  t5250 = t5248 + t5249;
  t5252 = t4959*t5067;
  t5253 = -0.24*t4952*t4960;
  t5254 = t5252 + t5253;
  t5268 = t5133*t5112;
  t5269 = 0.24*t5114*t5115;
  t5270 = t5268 + t5269;
  t5272 = t5114*t5133;
  t5273 = -0.24*t5112*t5115;
  t5274 = t5272 + t5273;
  t5054 = 0.748*t5044;
  t5094 = t5067*t4960;
  t5095 = -0.24*t4922*t4960;
  t5096 = t5094 + t5095;
  t5068 = t5067*t4922;
  t5087 = Power(t4960,2);
  t5091 = 0.24*t5087;
  t5092 = t5068 + t5091;
  t5286 = -1.*t4959*t4922;
  t5287 = t4952*t4960;
  t5288 = t5286 + t5287;
  t5289 = t4965*t5288;
  t5290 = t4964 + t5289;
  t5157 = 20.4*t5153*t5156;
  t5161 = 6.8*t5160*t5156;
  t5162 = 20.4*t5153*t5044;
  t5163 = 6.8*t5160*t5044;
  t5173 = -1.*t4965*t4962;
  t5215 = Power(t5153,2);
  t5216 = 13.6*t5215;
  t5217 = 13.6*t5153*t5160;
  t5218 = Power(t5156,2);
  t5219 = 13.6*t5218;
  t5220 = 13.6*t5156*t5044;
  t5303 = t4921*t5288;
  t5304 = t5164 + t5303;
  t5242 = Power(t4959,2);
  t5243 = 0.11*t5242;
  t5244 = Power(t4952,2);
  t5245 = 0.11*t5244;
  t5246 = t5243 + t5245;
  t5247 = 6.8*t5044*t5246;
  t5251 = -1.*t5250*t4970;
  t5255 = -1.*t4962*t5254;
  t5256 = t5251 + t5255;
  t5258 = t5250*t5099;
  t5259 = t4970*t5254;
  t5260 = t5258 + t5259;
  t5315 = -1.*t5067*t4952;
  t5316 = -0.24*t4959*t4960;
  t5317 = t5315 + t5316;
  t5291 = -0.384*var2[4]*t5290;
  t5292 = 3.2*t5096*t5165;
  t5293 = 3.2*t5092*t5290;
  t5296 = 6.4*t5169*t5165;
  t5297 = 3.2*t5172*t5107;
  t5298 = 3.2*t4972*t5180;
  t5299 = 6.4*t5165*t5290;
  t5300 = -1.*t4921*t5288;
  t5301 = t5173 + t5300;
  t5302 = 3.2*t5172*t5301;
  t5305 = 3.2*t4972*t5304;
  t5308 = 6.4*t5172*t5169;
  t5309 = 6.4*t5165*t5180;
  t5310 = 6.4*t5172*t5290;
  t5311 = 6.4*t5165*t5304;
  t5314 = 3.2*t5165*t5256;
  t5319 = t5250*t4970;
  t5320 = t4962*t5254;
  t5324 = 3.2*t5260*t5290;
  t5349 = -0.24*t4922*t4952;
  t5350 = t5349 + t5316;
  t5326 = -1.*t4962*t5250;
  t5352 = 0.24*t4959*t4922;
  t5353 = t5352 + t5253;
  t5328 = -1.*t5254*t5288;
  t5128 = 0.748*t5127;
  t5139 = t5133*t5115;
  t5140 = -0.24*t5111*t5115;
  t5141 = t5139 + t5140;
  t5134 = t5133*t5111;
  t5135 = Power(t5115,2);
  t5136 = 0.24*t5135;
  t5137 = t5134 + t5136;
  t5365 = -1.*t5114*t5111;
  t5366 = t5112*t5115;
  t5367 = t5365 + t5366;
  t5368 = t4965*t5367;
  t5369 = t5118 + t5368;
  t5188 = 20.4*t5184*t5187;
  t5192 = 6.8*t5191*t5187;
  t5193 = 20.4*t5184*t5127;
  t5194 = 6.8*t5191*t5127;
  t5204 = -1.*t4965*t5117;
  t5227 = Power(t5184,2);
  t5228 = 13.6*t5227;
  t5229 = 13.6*t5184*t5191;
  t5230 = Power(t5187,2);
  t5231 = 13.6*t5230;
  t5232 = 13.6*t5187*t5127;
  t5382 = t4921*t5367;
  t5383 = t5195 + t5382;
  t5262 = Power(t5114,2);
  t5263 = 0.11*t5262;
  t5264 = Power(t5112,2);
  t5265 = 0.11*t5264;
  t5266 = t5263 + t5265;
  t5267 = 6.8*t5127*t5266;
  t5271 = -1.*t5270*t5121;
  t5275 = -1.*t5117*t5274;
  t5276 = t5271 + t5275;
  t5278 = t5270*t5144;
  t5279 = t5121*t5274;
  t5280 = t5278 + t5279;
  t5394 = -1.*t5133*t5112;
  t5395 = -0.24*t5114*t5115;
  t5396 = t5394 + t5395;
  t5370 = -0.384*var2[6]*t5369;
  t5371 = 3.2*t5141*t5196;
  t5372 = 3.2*t5137*t5369;
  t5375 = 6.4*t5200*t5196;
  t5376 = 3.2*t5203*t5147;
  t5377 = 3.2*t5123*t5211;
  t5378 = 6.4*t5196*t5369;
  t5379 = -1.*t4921*t5367;
  t5380 = t5204 + t5379;
  t5381 = 3.2*t5203*t5380;
  t5384 = 3.2*t5123*t5383;
  t5387 = 6.4*t5203*t5200;
  t5388 = 6.4*t5196*t5211;
  t5389 = 6.4*t5203*t5369;
  t5390 = 6.4*t5196*t5383;
  t5393 = 3.2*t5196*t5276;
  t5398 = t5270*t5121;
  t5399 = t5117*t5274;
  t5403 = 3.2*t5280*t5369;
  t5428 = -0.24*t5111*t5112;
  t5429 = t5428 + t5395;
  t5405 = -1.*t5117*t5270;
  t5431 = 0.24*t5114*t5111;
  t5432 = t5431 + t5273;
  t5407 = -1.*t5274*t5367;
  t5222 = Power(t5169,2);
  t5224 = Power(t5165,2);
  t5234 = Power(t5200,2);
  t5236 = Power(t5196,2);
  t5444 = 13.6*t5153*t5156;
  t5445 = 13.6*t5160*t5156;
  t5446 = 6.4*t5172*t5165;
  t5447 = 6.4*t5169*t5180;
  t5448 = 13.6*t5184*t5187;
  t5449 = 13.6*t5191*t5187;
  t5450 = 6.4*t5203*t5196;
  t5451 = 6.4*t5200*t5211;
  t5452 = t5444 + t5445 + t5446 + t5447 + t5448 + t5449 + t5450 + t5451;
  t5454 = 6.8*t5215;
  t5455 = 6.8*t5153*t5160;
  t5456 = 6.8*t5218;
  t5457 = 6.8*t5156*t5044;
  t5458 = 3.2*t4972*t5172;
  t5459 = 3.2*t5222;
  t5460 = 3.2*t5224;
  t5461 = 3.2*t5107*t5180;
  t5462 = 6.8*t5227;
  t5463 = 6.8*t5184*t5191;
  t5464 = 6.8*t5230;
  t5465 = 6.8*t5187*t5127;
  t5466 = 3.2*t5123*t5203;
  t5467 = 3.2*t5234;
  t5468 = 3.2*t5236;
  t5469 = 3.2*t5147*t5211;
  t5470 = t5454 + t5455 + t5456 + t5457 + t5458 + t5459 + t5460 + t5461 + t5462 + t5463 + t5464 + t5465 + t5466 + t5467 + t5468 + t5469;
  t5473 = 0.748*t5153;
  t5474 = 3.2*t5096*t5169;
  t5475 = 3.2*t5092*t5165;
  t5476 = t5473 + t5474 + t5475;
  t5479 = 0.748*t5184;
  t5480 = 3.2*t5141*t5200;
  t5481 = 3.2*t5137*t5196;
  t5482 = t5479 + t5480 + t5481;
  t5175 = t5173 + t5174;
  t5177 = t4921*t5099;
  t5178 = t5177 + t4971;
  t5206 = t5204 + t5205;
  t5208 = t4921*t5144;
  t5209 = t5208 + t5122;
  t5166 = 9.6*t4972*t5165;
  t5170 = 9.6*t5169*t5107;
  t5176 = 3.2*t5172*t5175;
  t5181 = 3.2*t5178*t5180;
  t5197 = 9.6*t5123*t5196;
  t5201 = 9.6*t5200*t5147;
  t5207 = 3.2*t5203*t5206;
  t5212 = 3.2*t5209*t5211;
  t5213 = t5157 + t5161 + t5162 + t5163 + t5166 + t5170 + t5176 + t5181 + t5188 + t5192 + t5193 + t5194 + t5197 + t5201 + t5207 + t5212;
  t5501 = 0.748*t5160;
  t5512 = Power(t5044,2);
  t5513 = 13.6*t5512;
  t5306 = t5157 + t5161 + t5162 + t5163 + t5296 + t5297 + t5298 + t5299 + t5302 + t5305;
  t5532 = 6.8*t5160*t5246;
  t5318 = t5317*t4970;
  t5321 = t5099*t5254;
  t5322 = t5318 + t5319 + t5320 + t5321;
  t5325 = -1.*t4962*t5317;
  t5327 = -1.*t4970*t5254;
  t5329 = t5325 + t5326 + t5327 + t5328;
  t5542 = -0.384*var2[4]*t5301;
  t5543 = 3.2*t5096*t4972;
  t5339 = -1.*t5067*t4960;
  t5340 = 0.24*t4922*t4960;
  t5341 = t5339 + t5340;
  t5335 = Power(t4922,2);
  t5336 = -0.24*t5335;
  t5337 = t5068 + t5336;
  t5544 = 3.2*t5092*t5301;
  t5547 = 6.4*t4972*t5169;
  t5548 = 6.4*t5165*t5107;
  t5549 = 6.4*t4972*t5290;
  t5550 = 6.4*t5165*t5301;
  t5345 = t5296 + t5297 + t5298 + t5299 + t5302 + t5305;
  t5554 = 3.2*t4972*t5256;
  t5351 = t5350*t4970;
  t5354 = t5099*t5353;
  t5355 = t5351 + t5319 + t5320 + t5354;
  t5556 = 3.2*t5260*t5301;
  t5357 = -1.*t4962*t5350;
  t5358 = -1.*t4970*t5353;
  t5359 = t5357 + t5326 + t5358 + t5328;
  t5507 = 0.748*t5191;
  t5520 = Power(t5127,2);
  t5521 = 13.6*t5520;
  t5385 = t5188 + t5192 + t5193 + t5194 + t5375 + t5376 + t5377 + t5378 + t5381 + t5384;
  t5535 = 6.8*t5191*t5266;
  t5397 = t5396*t5121;
  t5400 = t5144*t5274;
  t5401 = t5397 + t5398 + t5399 + t5400;
  t5404 = -1.*t5117*t5396;
  t5406 = -1.*t5121*t5274;
  t5408 = t5404 + t5405 + t5406 + t5407;
  t5575 = -0.384*var2[6]*t5380;
  t5576 = 3.2*t5141*t5123;
  t5418 = -1.*t5133*t5115;
  t5419 = 0.24*t5111*t5115;
  t5420 = t5418 + t5419;
  t5414 = Power(t5111,2);
  t5415 = -0.24*t5414;
  t5416 = t5134 + t5415;
  t5577 = 3.2*t5137*t5380;
  t5580 = 6.4*t5123*t5200;
  t5581 = 6.4*t5196*t5147;
  t5582 = 6.4*t5123*t5369;
  t5583 = 6.4*t5196*t5380;
  t5424 = t5375 + t5376 + t5377 + t5378 + t5381 + t5384;
  t5587 = 3.2*t5123*t5276;
  t5430 = t5429*t5121;
  t5433 = t5144*t5432;
  t5434 = t5430 + t5398 + t5399 + t5433;
  t5589 = 3.2*t5280*t5380;
  t5436 = -1.*t5117*t5429;
  t5437 = -1.*t5121*t5432;
  t5438 = t5436 + t5405 + t5437 + t5407;
  t5471 = -0.5*var2[2]*t5470;
  t4995 = -0.384*var2[4]*t4972;
  t5093 = 3.2*t5092*t4972;
  t5108 = 3.2*t5096*t5107;
  t5109 = t5054 + t5093 + t5108;
  t5110 = -0.5*var2[3]*t5109;
  t5124 = -0.384*var2[6]*t5123;
  t5138 = 3.2*t5137*t5123;
  t5148 = 3.2*t5141*t5147;
  t5149 = t5128 + t5138 + t5148;
  t5150 = -0.5*var2[5]*t5149;
  t5608 = 13.6*t5153*t5044;
  t5609 = 6.4*t4972*t5165;
  t5610 = 6.4*t5169*t5107;
  t5611 = 13.6*t5184*t5127;
  t5612 = 6.4*t5123*t5196;
  t5613 = 6.4*t5200*t5147;
  t5614 = t5444 + t5608 + t5609 + t5610 + t5448 + t5611 + t5612 + t5613;
  t5241 = -2.88*t4965;
  t5257 = 3.2*t5107*t5256;
  t5261 = 3.2*t4972*t5260;
  t5277 = 3.2*t5147*t5276;
  t5281 = 3.2*t5123*t5280;
  t5282 = t5241 + t5247 + t5257 + t5261 + t5267 + t5277 + t5281;
  t5531 = 2.88*t4921;
  t5533 = 3.2*t5178*t5256;
  t5534 = 3.2*t5175*t5260;
  t5536 = 3.2*t5209*t5276;
  t5537 = 3.2*t5206*t5280;
  t5538 = t5531 + t5532 + t5533 + t5534 + t5535 + t5536 + t5537;
  t5323 = 3.2*t5165*t5322;
  t5330 = 3.2*t5169*t5329;
  t5331 = t5247 + t5314 + t5323 + t5324 + t5330;
  t5555 = 3.2*t4972*t5322;
  t5557 = 3.2*t5107*t5329;
  t5558 = t5532 + t5554 + t5555 + t5556 + t5557;
  t5356 = 3.2*t5165*t5355;
  t5360 = 3.2*t5169*t5359;
  t5361 = t5314 + t5356 + t5324 + t5360;
  t5569 = 3.2*t4972*t5355;
  t5570 = 3.2*t5107*t5359;
  t5571 = t5554 + t5569 + t5556 + t5570;
  t5402 = 3.2*t5196*t5401;
  t5409 = 3.2*t5200*t5408;
  t5410 = t5267 + t5393 + t5402 + t5403 + t5409;
  t5588 = 3.2*t5123*t5401;
  t5590 = 3.2*t5147*t5408;
  t5591 = t5535 + t5587 + t5588 + t5589 + t5590;
  t5435 = 3.2*t5196*t5434;
  t5439 = 3.2*t5200*t5438;
  t5440 = t5393 + t5435 + t5403 + t5439;
  t5602 = 3.2*t5123*t5434;
  t5603 = 3.2*t5147*t5438;
  t5604 = t5587 + t5602 + t5589 + t5603;
  t5486 = -2.88*t4921;
  t5487 = 6.8*t5153*t5246;
  t5488 = 3.2*t5169*t5256;
  t5489 = 3.2*t5165*t5260;
  t5490 = 6.8*t5184*t5266;
  t5491 = 3.2*t5200*t5276;
  t5492 = 3.2*t5196*t5280;
  t5493 = t5486 + t5487 + t5488 + t5489 + t5490 + t5491 + t5492;
  t5283 = -0.5*var2[2]*t5282;
  t5502 = 3.2*t5096*t5178;
  t5503 = 3.2*t5092*t5175;
  t5504 = t5501 + t5502 + t5503;
  t5294 = t5054 + t5292 + t5293;
  t5545 = t5501 + t5543 + t5544;
  t5338 = 3.2*t5337*t5169;
  t5342 = 3.2*t5341*t5165;
  t5343 = t5338 + t5292 + t5342 + t5293;
  t5562 = 3.2*t5341*t4972;
  t5563 = 3.2*t5337*t5107;
  t5564 = t5543 + t5562 + t5563 + t5544;
  t5496 = -0.5*var2[2]*t5476;
  t5620 = -0.5*var2[2]*t5109;
  t5667 = -0.384*var2[0]*t5290;
  t5668 = -0.384*var2[1]*t5301;
  t5669 = t5667 + t5668;
  t5670 = var2[2]*t5669;
  t5497 = -0.384*var2[2]*t5165;
  t5621 = -0.384*var2[2]*t4972;
  t5508 = 3.2*t5141*t5209;
  t5509 = 3.2*t5137*t5206;
  t5510 = t5507 + t5508 + t5509;
  t5373 = t5128 + t5371 + t5372;
  t5578 = t5507 + t5576 + t5577;
  t5417 = 3.2*t5416*t5200;
  t5421 = 3.2*t5420*t5196;
  t5422 = t5417 + t5371 + t5421 + t5372;
  t5595 = 3.2*t5420*t5123;
  t5596 = 3.2*t5416*t5147;
  t5597 = t5576 + t5595 + t5596 + t5577;
  t5498 = -0.5*var2[2]*t5482;
  t5622 = -0.5*var2[2]*t5149;
  t5693 = -0.384*var2[0]*t5369;
  t5694 = -0.384*var2[1]*t5380;
  t5695 = t5693 + t5694;
  t5696 = var2[2]*t5695;
  t5499 = -0.384*var2[2]*t5196;
  t5623 = -0.384*var2[2]*t5123;
  p_output1[0]=(t4995 + t5110 + t5124 + t5150 + t5283 - 0.5*(6.4*t4972*t5172 + 6.4*t5107*t5180 + 6.4*t5123*t5203 + 6.4*t5147*t5211 + t5216 + t5217 + t5219 + t5220 + 6.4*t5222 + 6.4*t5224 + t5228 + t5229 + t5231 + t5232 + 6.4*t5234 + 6.4*t5236)*var2[0] - 0.5*t5213*var2[1])*var2[2];
  p_output1[1]=var2[2]*(t5291 - 0.5*(t5216 + t5217 + t5219 + t5220 + t5308 + t5309 + t5310 + t5311)*var2[0] - 0.5*t5306*var2[1] - 0.5*t5331*var2[2] - 0.5*t5294*var2[3]);
  p_output1[2]=var2[2]*(t5291 - 0.5*(t5308 + t5309 + t5310 + t5311)*var2[0] - 0.5*t5345*var2[1] - 0.5*t5361*var2[2] - 0.5*t5343*var2[3]);
  p_output1[3]=var2[2]*(t5370 - 0.5*(t5228 + t5229 + t5231 + t5232 + t5387 + t5388 + t5389 + t5390)*var2[0] - 0.5*t5385*var2[1] - 0.5*t5410*var2[2] - 0.5*t5373*var2[5]);
  p_output1[4]=var2[2]*(t5370 - 0.5*(t5387 + t5388 + t5389 + t5390)*var2[0] - 0.5*t5424*var2[1] - 0.5*t5440*var2[2] - 0.5*t5422*var2[5]);
  p_output1[5]=-0.5*t5452*var2[2];
  p_output1[6]=t5471;
  p_output1[7]=-0.5*t5452*var2[0] - 0.5*t5470*var2[1] - 1.*t5493*var2[2] - 0.5*t5476*var2[3] - 0.384*t5165*var2[4] - 0.5*t5482*var2[5] - 0.384*t5196*var2[6];
  p_output1[8]=t5496;
  p_output1[9]=t5497;
  p_output1[10]=t5498;
  p_output1[11]=t5499;
  p_output1[12]=var2[2]*(-0.5*t5213*var2[0] - 0.5*(6.4*Power(t4972,2) + 6.4*Power(t5107,2) + 6.4*Power(t5123,2) + 6.4*Power(t5147,2) + 6.4*t5165*t5175 + 6.4*t5169*t5178 + 6.4*t5196*t5206 + 6.4*t5200*t5209 + t5216 + t5217 + t5220 + t5228 + t5229 + t5232 + t5513 + t5521)*var2[1] - 0.5*t5538*var2[2] - 0.5*t5504*var2[3] - 0.384*t5175*var2[4] - 0.5*t5510*var2[5] - 0.384*t5206*var2[6]);
  p_output1[13]=var2[2]*(t5542 - 0.5*t5306*var2[0] - 0.5*(t5216 + t5217 + t5220 + t5513 + t5547 + t5548 + t5549 + t5550)*var2[1] - 0.5*t5558*var2[2] - 0.5*t5545*var2[3]);
  p_output1[14]=var2[2]*(t5542 - 0.5*t5345*var2[0] - 0.5*(t5547 + t5548 + t5549 + t5550)*var2[1] - 0.5*t5571*var2[2] - 0.5*t5564*var2[3]);
  p_output1[15]=var2[2]*(t5575 - 0.5*t5385*var2[0] - 0.5*(t5228 + t5229 + t5232 + t5521 + t5580 + t5581 + t5582 + t5583)*var2[1] - 0.5*t5591*var2[2] - 0.5*t5578*var2[5]);
  p_output1[16]=var2[2]*(t5575 - 0.5*t5424*var2[0] - 0.5*(t5580 + t5581 + t5582 + t5583)*var2[1] - 0.5*t5604*var2[2] - 0.5*t5597*var2[5]);
  p_output1[17]=t5471;
  p_output1[18]=-0.5*t5614*var2[2];
  p_output1[19]=t4995 + t5110 + t5124 + t5150 - 0.5*t5470*var2[0] - 0.5*t5614*var2[1] - 1.*t5282*var2[2];
  p_output1[20]=t5620;
  p_output1[21]=t5621;
  p_output1[22]=t5622;
  p_output1[23]=t5623;
  p_output1[24]=(-0.5*t5282*var2[0] - 0.5*t5538*var2[1])*var2[2];
  p_output1[25]=(-0.5*t5331*var2[0] - 0.5*t5558*var2[1])*var2[2];
  p_output1[26]=(-0.5*t5361*var2[0] - 0.5*t5571*var2[1])*var2[2];
  p_output1[27]=(-0.5*t5410*var2[0] - 0.5*t5591*var2[1])*var2[2];
  p_output1[28]=(-0.5*t5440*var2[0] - 0.5*t5604*var2[1])*var2[2];
  p_output1[29]=-0.5*t5493*var2[2];
  p_output1[30]=t5283;
  p_output1[31]=-0.5*t5493*var2[0] - 0.5*t5282*var2[1];
  p_output1[32]=(-0.5*t5109*var2[0] - 0.5*t5504*var2[1])*var2[2];
  p_output1[33]=(-0.5*t5294*var2[0] - 0.5*t5545*var2[1])*var2[2];
  p_output1[34]=(-0.5*t5343*var2[0] - 0.5*t5564*var2[1])*var2[2];
  p_output1[35]=t5496;
  p_output1[36]=t5620;
  p_output1[37]=-0.5*t5476*var2[0] - 0.5*t5109*var2[1];
  p_output1[38]=(-0.384*t4972*var2[0] - 0.384*t5175*var2[1])*var2[2];
  p_output1[39]=t5670;
  p_output1[40]=t5670;
  p_output1[41]=t5497;
  p_output1[42]=t5621;
  p_output1[43]=-0.384*t5165*var2[0] - 0.384*t4972*var2[1];
  p_output1[44]=(-0.5*t5149*var2[0] - 0.5*t5510*var2[1])*var2[2];
  p_output1[45]=(-0.5*t5373*var2[0] - 0.5*t5578*var2[1])*var2[2];
  p_output1[46]=(-0.5*t5422*var2[0] - 0.5*t5597*var2[1])*var2[2];
  p_output1[47]=t5498;
  p_output1[48]=t5622;
  p_output1[49]=-0.5*t5482*var2[0] - 0.5*t5149*var2[1];
  p_output1[50]=(-0.384*t5123*var2[0] - 0.384*t5206*var2[1])*var2[2];
  p_output1[51]=t5696;
  p_output1[52]=t5696;
  p_output1[53]=t5499;
  p_output1[54]=t5623;
  p_output1[55]=-0.384*t5196*var2[0] - 0.384*t5123*var2[1];
}



#ifdef MATLAB_MEX_FILE

#include "mex.h"
/*
 * Main function
 */
void mexFunction( int nlhs, mxArray *plhs[],
                  int nrhs, const mxArray *prhs[] )
{
  size_t mrows, ncols;

  double *var1,*var2;
  double *p_output1;

  /*  Check for proper number of arguments.  */ 
  if( nrhs != 2)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:invalidNumInputs", "Two input(s) required (var1,var2).");
    }
  else if( nlhs > 1)
    {
      mexErrMsgIdAndTxt("MATLAB:MShaped:maxlhs", "Too many output arguments.");
    }

  /*  The input must be a noncomplex double vector or scaler.  */
  mrows = mxGetM(prhs[0]);
  ncols = mxGetN(prhs[0]);
  if( !mxIsDouble(prhs[0]) || mxIsComplex(prhs[0]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var1 is wrong.");
    }
  mrows = mxGetM(prhs[1]);
  ncols = mxGetN(prhs[1]);
  if( !mxIsDouble(prhs[1]) || mxIsComplex(prhs[1]) ||
    ( !(mrows == 7 && ncols == 1) && 
      !(mrows == 1 && ncols == 7))) 
    {
      mexErrMsgIdAndTxt( "MATLAB:MShaped:inputNotRealVector", "var2 is wrong.");
    }

  /*  Assign pointers to each input.  */
  var1 = mxGetPr(prhs[0]);
  var2 = mxGetPr(prhs[1]);
   


   
  /*  Create matrices for return arguments.  */
  plhs[0] = mxCreateDoubleMatrix((mwSize) 56, (mwSize) 1, mxREAL);
  p_output1 = mxGetPr(plhs[0]);


  /* Call the calculation subroutine. */
  output1(p_output1,var1,var2);


}

#else // MATLAB_MEX_FILE

#include "J_Ce2_vec3_five_link_walker.hh"

namespace LeftStance
{

void J_Ce2_vec3_five_link_walker_raw(double *p_output1, const double *var1,const double *var2)
{
  // Call Subroutines
  output1(p_output1, var1, var2);

}

}

#endif // MATLAB_MEX_FILE
